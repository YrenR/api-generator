/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/comun/v1/autonomos/{idEmpresa}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve los datos de un autónomo */
        get: operations["getAutonomoPorIdEmpresa"];
        /** Edita los datos de un autónomo */
        put: operations["putAutonomoPorIdEmpresa"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/categorias-recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve las categorías de recursos materiales filtradas */
        get: operations["getCategoriasRecursosMateriales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/categorias-recursos-materiales/{idCategoria}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la entidad correspondiente al ID introducido */
        get: operations["getCategoriaRecursoMaterialPorIdCategoria"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/categorias-recursos-materiales/{idCategoria}/tipos-recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los TipoRecursoMaterial de una categoría */
        get: operations["getTiposRecursosMaterialesPorIdCategoria"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/categorias-recursos-materiales/{idCategoria}/tipos-recursos-materiales/{idTipoRecursoMaterial}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el TipoRecursoMaterial de una categoría por id */
        get: operations["getTipoRecursoMaterialPorIdTipoRecursoMaterialPorIdCategoria"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/configuraciones/zonas-horarias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene una lista de posibles franjas horarias a seleccionar por el usuario */
        get: operations["getZonasHorariasConfiguraciones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/criterios-estandar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve un listado con todos los criterios estándar. */
        get: operations["getCriteriosEstandar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/empresas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recupera el listado de empresas mediante unos parámetros
         * @description Si no se pasan parámetros, devolverá todas las empresas
         */
        get: operations["getEmpresas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/empresas/contar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el numero de empresas dadas de alta en el sistema */
        get: operations["getContarEmpresas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/empresas/{idEmpresa}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera una empresa por su id */
        get: operations["getEmpresaPorIdEmpresa"];
        /** Actualiza una empresa existente */
        put: operations["putEmpresaPorIdEmpresa"];
        post?: never;
        /** Borra una empresa */
        delete: operations["deleteEmpresaPorIdEmpresa"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/empresas/{idEmpresa}/logotipo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crea o modifica un logotipo para una empresa determinada
         * @description *La llamada POST creará el archivo en BBDD en caso de no existir o lo actualizará en caso contrario
         */
        post: operations["postLogotipoPorIdEmpresa"];
        /** Borra el logotipo de una empresa */
        delete: operations["deleteLogotipoPorIdEmpresa"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/empresas/{idEmpresa}/logotipo/informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Comprueba que la empresa tiene foto, devuelve información */
        get: operations["getInformacionLogotipoPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/empresas/{idEmpresa}/logotipo/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recupera el logotipo de una empresa determinada
         * @description *Este método necesita únicamente el jwt a través de la URL
         */
        get: operations["getLogotipoPorIdEmpresaPorUuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/idiomas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todos los idiomas que hay en la aplicación */
        get: operations["getIdiomas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/idiomas/{idIdioma}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un idioma que hay en la aplicación */
        get: operations["getIdiomasPorIdIdioma"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/personas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todas las personas o la persona por el dni de su pasaporte y país */
        get: operations["getPersonas"];
        put?: never;
        /** Crea una nueva persona */
        post: operations["postPersona"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/personas/contar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Cuento el numero de personas dadas de alta en el sistema */
        get: operations["getContarPersonas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/personas/{idPersona}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera una persona por su id */
        get: operations["getPersonaPorIdPersona"];
        /** Actualiza una persona existente */
        put: operations["putPersonaPorIdPersona"];
        post?: never;
        /** Borra una persona */
        delete: operations["deletePersonaPorIdPersona"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/tipos-documentos-informatizados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve todos los tipo documento informatizados del sistema */
        get: operations["getTiposDocumentosInformatizados"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/tipos-documentos-informatizados/{idTipoDocumentoInformatizado}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve tipo documento informatizado segun el id. */
        get: operations["getTipoDocumentoInformatizadoPorIdTipoDocumentoInformatizado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/tipos-documentos-universales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un listado tipo documentos universales pertenecientes a los ids de paises pasados. */
        get: operations["getTipoDocumentosUniversales"];
        put?: never;
        /** Inserta un tipo de documento universal junto al listado de sus criterios de validación. */
        post: operations["postTipoDocumentoUniversal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/tipos-documentos-universales/{idTipoDocumentoUniversal}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un tipo documento universal según el id pasado. */
        get: operations["getTipoDocumentoUniversalPorIdTipoDocumentoUniversal"];
        /** Actualiza tanto la información general de un tipo de documento universal, como sus criterios de validación. */
        put: operations["putTipoDocumentoUniversalPorIdTipoDocumentoUniversal"];
        post?: never;
        /** Elimina un tipo de documento universal. */
        delete: operations["deleteTipoDocumentoUniversalPorIdTipoDocumentoUniversal"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/tipos-documentos-universales/{idTipoDocumentoUniversal}/aumentar-usos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Aumenta en 1 el número de usos del tipo de documento universal. */
        post: operations["postAumentarUsosTipoDocumentoUniversalPorIdTipoDocumentoUniversal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/tipos-documentos-universales/{idTipoDocumentoUniversal}/disminuir-usos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disminuye en 1 el número de usos del tipo de documento universal hasta un mínimo de 0 usos. Si se llama al endpoint cuando el tipo de documento universal ya tiene 0 usos, no se realiza ningún cambio. */
        post: operations["postDisminuirUsosTipoDocumentoUniversalPorIdTipoDocumentoUniversal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comun/v1/tipos-documentos-universales/{idTipoDocumentoUniversal}/versiones/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve la información de una versión específica de un tipo de documento universal además de sus criterios de validación. */
        get: operations["getVersionPorIdTipoDocumentoUniversalPorVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** @enum {string} */
        AplicableAEnum: AplicableAEnum;
        ArchivoDTO_GET: {
            /** Format: int32 */
            idTipoEntidad: number;
            /** Format: int32 */
            idEntidad: number;
            /** Format: int32 */
            idTipoEntidadSecundaria?: number;
            /** Format: int32 */
            idEntidadSecundaria?: number;
            observaciones: string;
            nombre: string;
            /** Format: binary */
            binario: string;
            esCreacion?: boolean;
            extension?: string;
            /** Format: int32 */
            numeroPaginas?: number;
            /** Format: int32 */
            idArchivo?: number;
            uuid?: string;
            /** Format: int32 */
            idEntorno?: number;
            fechaInsercion?: components["schemas"]["ZonedDateTime"];
            fechaModificacion?: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            tamano?: number;
        };
        ArchivoDTO_GET_INFO: {
            existe?: boolean;
            uuid?: string;
            fechaInsercion?: components["schemas"]["ZonedDateTime"];
            fechaModificacion?: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            tamano?: number;
            extension?: string;
            nombre?: string;
            observaciones?: string;
            /** Format: int32 */
            idArchivo?: number;
            /** Format: int32 */
            numeroPaginas?: number;
        };
        AutonomoDtoRequestUpdate: {
            nombre?: string;
            apellido1: string;
            apellido2: string;
            nombreComercial?: string;
            observaciones?: string;
        };
        AutonomoDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            nombre?: string;
            apellido1?: string;
            apellido2?: string;
            cif: string;
            /** Format: int32 */
            paisCif: number;
            fechaCreacion?: string;
            fechaUltimoAcceso?: string;
            observaciones: string;
            nombreComercial?: string;
        };
        CategoriaRecursoMaterialDTO_GET: {
            nombre: string;
            observaciones: string;
            /** Format: int32 */
            idPais: number;
            /** Format: int32 */
            idCategoria: number;
        };
        CriterioEstandarDtoResponse: {
            /** Format: int32 */
            idCriterioEstandar?: number;
            nombre?: string;
            criterio?: string;
            mensajeRechazo?: string;
            soloUsuariosInternos?: boolean;
        };
        /** @enum {string} */
        DayOfWeek: DayOfWeek;
        /** @enum {string} */
        DepartamentoAreaEnum: DepartamentoAreaEnum;
        /**
         * Format: duration
         * @example P1D
         */
        Duration: string;
        EmpresaDtoRequestUpdate: {
            nombre?: string;
            observaciones?: string;
        };
        EmpresaDtoResponse: {
            cif: string;
            nombre: string;
            /** Format: int32 */
            paisCif: number;
            observaciones: string;
            /** Format: int32 */
            idEmpresa?: number;
            nombreUsuario?: string;
            apellidosUsuario?: string;
            emailUsuario?: string;
            tipoEmpresa?: components["schemas"]["TipoSolicitudAltaEnum"];
            entornos?: components["schemas"]["EntornoDtoResponse"][];
            fechaCreacion?: components["schemas"]["ZonedDateTime"];
            fechaUltimoAcceso?: components["schemas"]["ZonedDateTime"];
            razonSocial?: string;
            zonaHoraria?: components["schemas"]["ZoneId"];
        };
        EntornoDtoResponse: {
            /** Format: int32 */
            idEntorno?: number;
            /** Format: int32 */
            idModulo?: number;
            activo?: boolean;
            estado?: components["schemas"]["EntornoEstadoEnum"];
        };
        /** @enum {string} */
        EntornoEstadoEnum: EntornoEstadoEnum;
        /** @enum {string} */
        EspecificidadEnum: EspecificidadEnum;
        /** @enum {string} */
        FormatoEnum: FormatoEnum;
        IdiomaDtoResponse: {
            /** Format: int32 */
            idIdioma?: number;
            nombre?: string;
            codigo?: string;
        };
        /**
         * Format: date-time
         * @example 2022-03-10T16:15:50Z
         */
        Instant: string;
        /**
         * Format: date-time
         * @example 2022-03-10T12:15:50
         */
        LocalDateTime: string;
        /**
         * Format: local-time
         * @example 13:45:30.123456789
         */
        LocalTime: string;
        /** @enum {string} */
        ModuloEnum: ModuloEnum;
        /** @enum {string} */
        Month: Month;
        PersonaDTO_GET: {
            dni: string;
            nombre: string;
            apellido1: string;
            apellido2: string;
            tipoDocId: string;
            /** Format: int32 */
            idPaisDni: number;
            /** Format: int32 */
            idPersona?: number;
        };
        PersonaDTO_POST_PUT: {
            dni: string;
            nombre: string;
            apellido1: string;
            apellido2: string;
            tipoDocId: string;
            /** Format: int32 */
            idPaisDni: number;
        };
        /** @enum {string} */
        TimeDefinition: TimeDefinition;
        TipoDocumentoInformatizadoDtoResponse: {
            /** Format: int32 */
            idDocInformatizado?: number;
            nombre?: string;
            codigo?: string;
            observaciones?: string;
        };
        /** @enum {string} */
        TipoDocumentoPrlEnum: TipoDocumentoPrlEnum;
        TipoDocumentoUniversalDtoRequest: {
            nombre: string;
            aplicableA: components["schemas"]["AplicableAEnum"];
            departamentoArea: components["schemas"]["DepartamentoAreaEnum"];
            especificidad: components["schemas"]["EspecificidadEnum"];
            /** Format: int32 */
            idPais: number;
            tipo?: components["schemas"]["TipoDocumentoPrlEnum"];
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
            codigoMetabuzon?: string;
            indefinido?: boolean;
            /** Format: int32 */
            diasPreaviso?: number;
            firmaRequerida?: boolean;
            adjuntoObligatorio?: boolean;
            criteriosValidacion?: number[];
            /** Format: int32 */
            idTipoDocumentoInformatizado?: number;
        };
        TipoDocumentoUniversalDtoResponse: {
            nombre?: string;
            aplicableA?: components["schemas"]["AplicableAEnum"];
            departamentoArea?: components["schemas"]["DepartamentoAreaEnum"];
            tipo?: components["schemas"]["TipoDocumentoPrlEnum"];
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
            especificidad?: components["schemas"]["EspecificidadEnum"];
            /** Format: int32 */
            idPais?: number;
            codigoMetabuzon?: string;
            indefinido?: boolean;
            /** Format: int32 */
            diasPreaviso?: number;
            firmaRequerida?: boolean;
            adjuntoObligatorio?: boolean;
            /** Format: int32 */
            idTipoDocumentoInformatizado?: number;
            /** Format: int32 */
            idTipoDocumentoUniversal?: number;
            criteriosValidacionUltimaVersion?: components["schemas"]["CriterioEstandarDtoResponse"][];
            versiones?: number[];
            fechaUltimaVersion?: components["schemas"]["ZonedDateTime"];
            usuarioUltimaVersion?: string;
            enUso?: boolean;
        };
        TipoDocumentoUniversalDtoResponseListado: {
            /** Format: int32 */
            idTipoDocumentoUniversal?: number;
            nombre?: string;
            aplicableA?: components["schemas"]["AplicableAEnum"];
            departamentoArea?: components["schemas"]["DepartamentoAreaEnum"];
            tipo?: components["schemas"]["TipoDocumentoPrlEnum"];
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
            especificidad?: components["schemas"]["EspecificidadEnum"];
            enUso?: boolean;
            /** Format: int32 */
            idPais?: number;
            indefinido?: boolean;
        };
        TipoRecursoMaterialDTO_GET: {
            nombre: string;
            observaciones: string;
            /** Format: int32 */
            idTipoRecursoMaterial: number;
        };
        /** @enum {string} */
        TipoSolicitudAltaEnum: TipoSolicitudAltaEnum;
        /** @enum {string} */
        UnidadTiempoValidezEnum: UnidadTiempoValidezEnum;
        VersionDtoResponse: {
            /** Format: int32 */
            idVersionCriterios?: number;
            /** Format: int32 */
            version?: number;
            criteriosValidacion?: components["schemas"]["CriterioEstandarDtoResponse"][];
            fechaEdicion?: string;
            usuarioEdicion?: string;
        };
        ZoneId: {
            id?: string;
            rules?: components["schemas"]["ZoneRules"];
        };
        ZoneOffset: {
            /** Format: int32 */
            totalSeconds?: number;
            rules?: components["schemas"]["ZoneRules"];
        };
        ZoneOffsetTransition: {
            /** Format: int64 */
            epochSecond?: number;
            transition?: components["schemas"]["LocalDateTime"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            offsetAfter?: components["schemas"]["ZoneOffset"];
            instant?: components["schemas"]["Instant"];
            dateTimeBefore?: components["schemas"]["LocalDateTime"];
            dateTimeAfter?: components["schemas"]["LocalDateTime"];
            duration?: components["schemas"]["Duration"];
            /** Format: int32 */
            durationSeconds?: number;
            gap?: boolean;
            overlap?: boolean;
            validOffsets?: components["schemas"]["ZoneOffset"][];
        };
        ZoneOffsetTransitionRule: {
            month?: components["schemas"]["Month"];
            /** Format: byte */
            dom?: string;
            dow?: components["schemas"]["DayOfWeek"];
            time?: components["schemas"]["LocalTime"];
            timeEndOfDay?: boolean;
            timeDefinition?: components["schemas"]["TimeDefinition"];
            standardOffset?: components["schemas"]["ZoneOffset"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            offsetAfter?: components["schemas"]["ZoneOffset"];
            /** Format: int32 */
            dayOfMonthIndicator?: number;
            dayOfWeek?: components["schemas"]["DayOfWeek"];
            localTime?: components["schemas"]["LocalTime"];
            midnightEndOfDay?: boolean;
        };
        ZoneRules: {
            standardTransitions?: number[];
            standardOffsets?: components["schemas"]["ZoneOffset"][];
            savingsInstantTransitions?: number[];
            savingsLocalTransitions?: components["schemas"]["LocalDateTime"][];
            wallOffsets?: components["schemas"]["ZoneOffset"][];
            lastRules?: components["schemas"]["ZoneOffsetTransitionRule"][];
            fixedOffset?: boolean;
            transitions?: components["schemas"]["ZoneOffsetTransition"][];
            transitionRules?: components["schemas"]["ZoneOffsetTransitionRule"][];
        };
        /**
         * Format: date-time
         * @example 2022-03-10T12:15:50-04:00
         */
        ZonedDateTime: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type SchemaAplicableAEnum = components['schemas']['AplicableAEnum'];
export type SchemaArchivoDtoGet = components['schemas']['ArchivoDTO_GET'];
export type SchemaArchivoDtoGetInfo = components['schemas']['ArchivoDTO_GET_INFO'];
export type SchemaAutonomoDtoRequestUpdate = components['schemas']['AutonomoDtoRequestUpdate'];
export type SchemaAutonomoDtoResponse = components['schemas']['AutonomoDtoResponse'];
export type SchemaCategoriaRecursoMaterialDtoGet = components['schemas']['CategoriaRecursoMaterialDTO_GET'];
export type SchemaCriterioEstandarDtoResponse = components['schemas']['CriterioEstandarDtoResponse'];
export type SchemaDayOfWeek = components['schemas']['DayOfWeek'];
export type SchemaDepartamentoAreaEnum = components['schemas']['DepartamentoAreaEnum'];
export type SchemaDuration = components['schemas']['Duration'];
export type SchemaEmpresaDtoRequestUpdate = components['schemas']['EmpresaDtoRequestUpdate'];
export type SchemaEmpresaDtoResponse = components['schemas']['EmpresaDtoResponse'];
export type SchemaEntornoDtoResponse = components['schemas']['EntornoDtoResponse'];
export type SchemaEntornoEstadoEnum = components['schemas']['EntornoEstadoEnum'];
export type SchemaEspecificidadEnum = components['schemas']['EspecificidadEnum'];
export type SchemaFormatoEnum = components['schemas']['FormatoEnum'];
export type SchemaIdiomaDtoResponse = components['schemas']['IdiomaDtoResponse'];
export type SchemaInstant = components['schemas']['Instant'];
export type SchemaLocalDateTime = components['schemas']['LocalDateTime'];
export type SchemaLocalTime = components['schemas']['LocalTime'];
export type SchemaModuloEnum = components['schemas']['ModuloEnum'];
export type SchemaMonth = components['schemas']['Month'];
export type SchemaPersonaDtoGet = components['schemas']['PersonaDTO_GET'];
export type SchemaPersonaDtoPostPut = components['schemas']['PersonaDTO_POST_PUT'];
export type SchemaTimeDefinition = components['schemas']['TimeDefinition'];
export type SchemaTipoDocumentoInformatizadoDtoResponse = components['schemas']['TipoDocumentoInformatizadoDtoResponse'];
export type SchemaTipoDocumentoPrlEnum = components['schemas']['TipoDocumentoPrlEnum'];
export type SchemaTipoDocumentoUniversalDtoRequest = components['schemas']['TipoDocumentoUniversalDtoRequest'];
export type SchemaTipoDocumentoUniversalDtoResponse = components['schemas']['TipoDocumentoUniversalDtoResponse'];
export type SchemaTipoDocumentoUniversalDtoResponseListado = components['schemas']['TipoDocumentoUniversalDtoResponseListado'];
export type SchemaTipoRecursoMaterialDtoGet = components['schemas']['TipoRecursoMaterialDTO_GET'];
export type SchemaTipoSolicitudAltaEnum = components['schemas']['TipoSolicitudAltaEnum'];
export type SchemaUnidadTiempoValidezEnum = components['schemas']['UnidadTiempoValidezEnum'];
export type SchemaVersionDtoResponse = components['schemas']['VersionDtoResponse'];
export type SchemaZoneId = components['schemas']['ZoneId'];
export type SchemaZoneOffset = components['schemas']['ZoneOffset'];
export type SchemaZoneOffsetTransition = components['schemas']['ZoneOffsetTransition'];
export type SchemaZoneOffsetTransitionRule = components['schemas']['ZoneOffsetTransitionRule'];
export type SchemaZoneRules = components['schemas']['ZoneRules'];
export type SchemaZonedDateTime = components['schemas']['ZonedDateTime'];
export type $defs = Record<string, never>;
export interface operations {
    getAutonomoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutonomoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putAutonomoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AutonomoDtoRequestUpdate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutonomoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - COM_0009 : No se puede modificar los datos de una empresa */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCategoriasRecursosMateriales: {
        parameters: {
            query?: {
                idPais?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCategoriaRecursoMaterialPorIdCategoria: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposRecursosMaterialesPorIdCategoria: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoRecursoMaterialPorIdTipoRecursoMaterialPorIdCategoria: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
                idTipoRecursoMaterial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getZonasHorariasConfiguraciones: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    getCriteriosEstandar: {
        parameters: {
            query?: {
                ids?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CriterioEstandarDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpresas: {
        parameters: {
            query?: {
                CIF?: string;
                filtro?: string;
                infoEntornos?: boolean;
                listaIds?: number[];
                listaIdsPais?: number[];
                listaModulos?: components["schemas"]["ModuloEnum"][];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse"][];
                };
            };
            /** @description Forbidden */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - COM_0005 : No puede filtrar solo por provincia */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContarEmpresas: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpresaPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putEmpresaPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmpresaDtoRequestUpdate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - COM_0008 : No se puede modificar los datos de un autónomo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteEmpresaPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postLogotipoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                    fileName: string;
                };
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["ArchivoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLogotipoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["ArchivoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformacionLogotipoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLogotipoPorIdEmpresaPorUuid: {
        parameters: {
            query?: {
                alto?: number;
                ancho?: number;
                modoMiniaturizacion?: components["schemas"]["FormatoEnum"];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string[];
                };
            };
            /** @description No autorizado */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIdiomas: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdiomaDtoResponse"][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIdiomasPorIdIdioma: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idIdioma: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdiomaDtoResponse"][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPersonas: {
        parameters: {
            query?: {
                dniPasaporte?: string;
                idPaisDni?: number;
                listaIdsPersonas?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPersona: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PersonaDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - COM_0004 : La persona ya existe (DNI/Pasaporte - País) pero el nombre introducido no es correcto */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContarPersonas: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPersonaPorIdPersona: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPersona: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putPersonaPorIdPersona: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPersona: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PersonaDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deletePersonaPorIdPersona: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPersona: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosInformatizados: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoInformatizadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoDocumentoInformatizadoPorIdTipoDocumentoInformatizado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumentoInformatizado: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int32 */
                        idDocInformatizado?: number;
                        nombre?: string;
                        codigo?: string;
                        observaciones?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoDocumentosUniversales: {
        parameters: {
            query?: {
                idPais?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoUniversalDtoResponseListado"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoDocumentoUniversal: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoDocumentoUniversalDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VersionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - COM_0010: Ha ocurrido un error al validar los valores de los enumerados
             *      - COM_0011: Actualmente no se permite crear un tipo de documento universal que no sea para España */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoDocumentoUniversalPorIdTipoDocumentoUniversal: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumentoUniversal: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoUniversalDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoDocumentoUniversalPorIdTipoDocumentoUniversal: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumentoUniversal: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoDocumentoUniversalDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoUniversalDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - COM_0010: Ha ocurrido un error al validar los valores de los enumerados
             *      - COM_0011: Actualmente no se permite crear un tipo de documento universal que no sea para España */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTipoDocumentoUniversalPorIdTipoDocumentoUniversal: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumentoUniversal: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoUniversalDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description COM_0016: No se puede eliminar un tipo de documento universal que está en uso */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAumentarUsosTipoDocumentoUniversalPorIdTipoDocumentoUniversal: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumentoUniversal: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        nombre?: string;
                        aplicableA?: components["schemas"]["AplicableAEnum"];
                        departamentoArea?: components["schemas"]["DepartamentoAreaEnum"];
                        tipo?: components["schemas"]["TipoDocumentoPrlEnum"];
                        /** Format: int32 */
                        validez?: number;
                        unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
                        especificidad?: components["schemas"]["EspecificidadEnum"];
                        /** Format: int32 */
                        idPais?: number;
                        codigoMetabuzon?: string;
                        indefinido?: boolean;
                        /** Format: int32 */
                        diasPreaviso?: number;
                        firmaRequerida?: boolean;
                        adjuntoObligatorio?: boolean;
                        /** Format: int32 */
                        idTipoDocumentoInformatizado?: number;
                        /** Format: int32 */
                        idTipoDocumentoUniversal?: number;
                        criteriosValidacionUltimaVersion?: components["schemas"]["CriterioEstandarDtoResponse"][];
                        versiones?: number[];
                        fechaUltimaVersion?: components["schemas"]["ZonedDateTime"];
                        usuarioUltimaVersion?: string;
                        enUso?: boolean;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDisminuirUsosTipoDocumentoUniversalPorIdTipoDocumentoUniversal: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumentoUniversal: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoUniversalDtoResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getVersionPorIdTipoDocumentoUniversalPorVersion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumentoUniversal: number;
                version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VersionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum AplicableAEnum {
    EMPRESA = "EMPRESA",
    EMPLEADO = "EMPLEADO",
    RECURSO = "RECURSO"
}
export enum DayOfWeek {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY"
}
export enum DepartamentoAreaEnum {
    PRL = "PRL",
    ADMINISTRACION = "ADMINISTRACION",
    OTROS = "OTROS"
}
export enum EntornoEstadoEnum {
    CREADO = "CREADO",
    PENDIENTE = "PENDIENTE",
    BORRANDO = "BORRANDO"
}
export enum EspecificidadEnum {
    GENERICO = "GENERICO",
    ESPECIFICO = "ESPECIFICO"
}
export enum FormatoEnum {
    CROP_CENTRADO = "CROP_CENTRADO",
    REESCALADO = "REESCALADO",
    REESCALADO_ALTO = "REESCALADO_ALTO",
    REESCALADO_ANCHO = "REESCALADO_ANCHO"
}
export enum ModuloEnum {
    ESTRUCTURA = "ESTRUCTURA",
    CAE = "CAE",
    CA = "CA",
    FORMULARIOS = "FORMULARIOS",
    METAMARKET = "METAMARKET",
    MQL = "MQL",
    TAREAS = "TAREAS",
    PROVEEDORES = "PROVEEDORES"
}
export enum Month {
    JANUARY = "JANUARY",
    FEBRUARY = "FEBRUARY",
    MARCH = "MARCH",
    APRIL = "APRIL",
    MAY = "MAY",
    JUNE = "JUNE",
    JULY = "JULY",
    AUGUST = "AUGUST",
    SEPTEMBER = "SEPTEMBER",
    OCTOBER = "OCTOBER",
    NOVEMBER = "NOVEMBER",
    DECEMBER = "DECEMBER"
}
export enum TimeDefinition {
    UTC = "UTC",
    WALL = "WALL",
    STANDARD = "STANDARD"
}
export enum TipoDocumentoPrlEnum {
    FORMACIONES = "FORMACIONES",
    INFORMACIONES = "INFORMACIONES",
    EPI = "EPI",
    RECONOCIMIENTO_MEDICO = "RECONOCIMIENTO_MEDICO",
    OTROS = "OTROS"
}
export enum TipoSolicitudAltaEnum {
    EMPRESA = "EMPRESA",
    AUTONOMO = "AUTONOMO"
}
export enum UnidadTiempoValidezEnum {
    ANOS = "ANOS",
    MESES = "MESES",
    DIAS = "DIAS"
}
