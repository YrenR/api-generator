/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/cae/v1/actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el listado de actividades */
        get: operations["getActividades"];
        put?: never;
        /** Crea una nueva actividad */
        post: operations["postActividad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades-con-evaluacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las actividades que tienen alguna evaluación */
        get: operations["getActividadesConEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/num-relacionados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la lista de actividades con el número de puestos, empleados  y tipos documentos relacionados */
        get: operations["getNumRelacionadosActividades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/{idActividad}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la entidad Actividad correspondiente al ID introducido */
        get: operations["getActividadPorIdActividad"];
        /** Actualiza una determinada actividad */
        put: operations["putActividadPorIdActividad"];
        post?: never;
        /** Elimina una determinada actividad */
        delete: operations["deleteActividadPorIdActividad"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/{idActividad}/evaluaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crea una evaluación a una actividad */
        post: operations["postEvaluacionPorIdActividad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/{idActividad}/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los tipos documentos asociados a una actividad */
        get: operations["getTiposDocumentosPorIdActividad"];
        put?: never;
        /** Relaciona una actividad con uno o varios tipos documentos */
        post: operations["postTiposDocumentosPorIdActividad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/{idActividad}/tipos-epis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Asocia actividades con tipos de EPI por sus IDs */
        post: operations["postTiposEpisPorIdActividad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/{idActividad}/ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las Ugs que están asociadas a una actividad */
        get: operations["getUgsPorIdActividad"];
        put?: never;
        /** Relaciona una actividad con una o varias ugs */
        post: operations["postUgsPorIdActividad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/{idActividad}/ultima-evaluacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la última evaluación de una actividad */
        get: operations["getUltimaRevisionPorIdActividad"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/actividades/{idActividad}/uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las Uts que están asociadas a una actividad */
        get: operations["getUtsPorIdActividad"];
        put?: never;
        /** Relaciona una actividad con una o varias uts */
        post: operations["postUtsPorIdActividad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/adjuntos/{idArchivo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Elimina un archivo buscando por su ID */
        delete: operations["deleteAdjuntoPorIdArchivo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/adjuntos/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el binario de un adjunto sin JWT */
        get: operations["getAdjuntoPorUuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/categorias-riesgos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todas las categorías de riesgos */
        get: operations["getCategoriasRiesgos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/criterios-validacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los Criterios de Validación */
        get: operations["getCriteriosValidacion"];
        put?: never;
        /** Crear Criterio de Validación */
        post: operations["postCriterioValidacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/criterios-validacion/{idCriterioValidacion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener Criterio de Validación por ID */
        get: operations["getCriterioValidacionPorIdCriterioValidacion"];
        /** Modifica un Criterio de Validación */
        put: operations["putCriterioValidacionPorIdCriterioValidacion"];
        post?: never;
        /** Borra un Criterio de Validación */
        delete: operations["deleteCriterioValidacionPorIdCriterioValidacion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/documentos-relevantes/recalcular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Envía por cada entorno un mensaje command para actualizar los documentos relevantes de cada entorno utilizando la fecha Actualización (aaaa-mm-dd) como referencia */
        post: operations["postRecalcularDocumentosRelevantes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/documentos/{idDocumento}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene un documento buscando por su ID */
        get: operations["getDocumentoPorIdDocumento"];
        put?: never;
        post?: never;
        /** Elimina un documento y su adjunto */
        delete: operations["deleteDocumentoPorIdDocumento"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/documentos/{idDocumento}/adjuntos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los binarios de los adjuntos de un documento comprimidos en un zip */
        get: operations["getAdjuntosPorIdDocumento"];
        put?: never;
        /** Inserta un adjunto de un documento */
        post: operations["postAdjuntoPorIdDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/documentos/{idDocumento}/adjuntos/informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la información de un adjunto de un documento */
        get: operations["getInformacionAdjuntosPorIdDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/documentos/{idDocumento}/adjuntos/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el binario de un adjunto de un documento */
        get: operations["getAdjuntoPorIdDocumentoPorUuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empleados-formaciones/{idEmpleadoFormacion}/cambiar-estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Editar el estado de un empleado Formación */
        put: operations["putCambiarEstadoPorIdEmpleadoFormacion"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera la lista de empresas con su estado general */
        get: operations["getEstado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta un documento */
        post: operations["postDocumentoPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/documentos/{idDocumento}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edita un documento */
        put: operations["putDocumentoPorIdEmpresaPorIdDocumento"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/documentos/{idDocumento}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Modifica las relaciones de un documento con los empleados */
        post: operations["postEmpleadosPorIdEmpresaPorIdDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/documentos/{idDocumento}/historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene todos los históricos de un documento */
        get: operations["getHistoricosPorIdEmpresaPorIdDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/documentos/{idDocumento}/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta y/o elimina relaciones de un documento con una lista de recursos materiales */
        post: operations["postRecursosMaterialesPorIdEmpresaPorIdDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las actividades que están asociadas a un empleado */
        get: operations["getActividadesPorIdEmpresaPorIdEmpleado"];
        put?: never;
        /** Relaciona un empleado con una o varias actividades */
        post: operations["postActividadesPorIdEmpresaPorIdEmpleado"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/actividades-ug-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las actividades requeridas por UGs y UTs para un empleado */
        get: operations["getActividadesUgUtPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/actividades/{idActividad}/fechas-historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener históricos de un empleado y las actividades relacionadas */
        get: operations["getFechasHistoricoPorIdEmpresaPorIdEmpleadoPorIdActividad"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/generar-pdf-temporal-entrega-epi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Genera un documento temporal para visualizar los EPIs de una entrega */
        post: operations["postGenerarPdfTemporalEntregaEpiPorIdEmpresaIdEmpleado"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/puestos-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las relaciones de puestos de trabajo actuales de un empleado */
        get: operations["getPuestosTrabajoPorIdEmpresaPorIdEmpleado"];
        put?: never;
        /** Relaciona un empleado con puestos de trabajo */
        post: operations["postPuestoTrabajoPorIdEmpresaPorIdEmpleado"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/puestos-trabajo-ug-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los puestos de trabajo requeridos por UGs y UTs para un empleado */
        get: operations["getPuestosTrabajoUgUtPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/puestos-trabajo/{idPuesto}/fechas-historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los históricos de un puesto de trabajo de un empleado */
        get: operations["getFechasHistoricosPorIdEmpresaPorIdEmpleadoPorIdPuesto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/reconocimientos/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el estado del reconocimiento actual y en gestión de un empleado */
        get: operations["getEstadoReconocimientoPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/reconocimientos/{idReconocimiento}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edita un reconocimiento médico de un empleado */
        put: operations["putReconocimientoPorIdEmpresaPorIdEmpleadoPorIdReconocimiento"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/actividades/{idActividad}/fechas-historico-ug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los históricos de la relación de contratación de un empleado con la Ug Actividad */
        get: operations["getFechasHistoricoUgPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdActividad"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/actividades/{idActividad}/fechas-historico-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene todos los históricos de las ut Actividad con la relación de contratación de un empleado */
        get: operations["getFechasHistoricoUtsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdActividad"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/puestos-trabajo/{idPuesto}/fechas-historico-ug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene todos los históricos de las ugPuesto de trabajo con la relación de contratación de un empleado */
        get: operations["getFechasHistoricoUgsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdPuesto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/puestos-trabajo/{idPuesto}/fechas-historico-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los históricos de uts puestos de trabajo con relación de contratación de un empleado */
        get: operations["getFechasHistoricoUtsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdPuesto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/situaciones-especiales/{idSituacion}/fechas-historico-ug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene todos los históricos de la relaciones un empleado y una situación especial con UG */
        get: operations["getFechasHistoricoUgPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdSituacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/situaciones-especiales/{idSituacion}/fechas-historico-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene todos los históricos de la relaciones un empleado y una situación especial con UT */
        get: operations["getFechasHistoricoUtsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdSituacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/ugs-actividad": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las ug-actividad asociadas a una relación de contratación empleado */
        get: operations["getUgsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        put?: never;
        /** Modifica relaciones entre una relación contratación empleado con una o varias relaciones ug-actividad */
        post: operations["postUgsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/ugs-puesto-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Consulta el histórico de las relaciones de contratación de un empleado con las ugs de puesto de trabajo */
        get: operations["getUgsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        put?: never;
        /** Relaciona una relación contratación empleado con uno o varias relaciones ug puesto trabajo */
        post: operations["postUgsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/ugs-situacion-especial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Consulta el histórico de las relaciones de contratación de un empleado con las ugs de las situaciones especiales */
        get: operations["getUgsSituacionesEspecialesPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        put?: never;
        /** Relaciona una relación contratación empleado con una o varias situaciones especiales */
        post: operations["postUgsSituacionEspecialPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/uts-actividad": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las ut-actividad asociadas a una relación de contratación empleado */
        get: operations["getUtsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        put?: never;
        /** Modifica relaciones entre una relación contratación empleado con una o varias relaciones ut-actividad */
        post: operations["postUtsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/uts-puesto-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Consulta el histórico de las relaciones de contratación de un empleado con las uts de puesto de trabajo */
        get: operations["getUtsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        put?: never;
        /** Relaciona una relación contratación empleado con uno o varias relaciones ut puesto trabajo */
        post: operations["postUtsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/uts-situacion-especial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Consulta el histórico de las relaciones de contratación de un empleado con las uts de las situaciones especiales */
        get: operations["getUtsSituacionEspecialPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        put?: never;
        /** Inserta, elimina o modifica una Relación de UT Situación Especial con Relación de contratación de empleado */
        post: operations["postUtSituacionEspecialPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/situaciones-especiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las situaciones especiales de un empleado */
        get: operations["getSituacionesEspecialesPorIdEmpresaPorIdEmpleado"];
        put?: never;
        /** Relacionar situaciones especiales a un empleado */
        post: operations["postSituacionesEspecialesPorIdEmpresaPorIdEmpleado"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-documentos-requeridos-especificos/{idTipoDocumento}/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el estado para cada empleado solicitante de un tipo de documento específico */
        get: operations["getEstadoPorIdEmpresaPorIdEmpleadoPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-documentos-requeridos/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el estado de los tipos de documentos requeridos de empleado, tanto de los genéricos, como el estado resumen de los específicos */
        get: operations["getEstadoPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-documentos-requeridos/{idTipoDocumento}/historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Consulta el histórico de un tipo de documento aplicable a empleado */
        get: operations["getHistoricosPorIdEmpresaPorIdEmpleadoPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-documentos-requeridos/{idTipoDocumento}/solicitantes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los solicitantes de empleado de un tipo documento */
        get: operations["getSolicitantesPorIdEmpresaPorIdEmpleadoPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-epis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el listado de tipos de epi de un empleado de una lista de ugs o uts, con actividades y puestos */
        get: operations["getTiposEpisPorIdEmpleadoPorIdEmpresa"];
        put?: never;
        /** Inserta entregas de epi a un empleado */
        post: operations["postTiposEpisPorIdEmpleadoPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-epis/informe-entregas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Manda un mensaje de Rabbit al rest de informes para generar el informe de entregas de epis del empleado */
        post: operations["postInformeEntregasTiposEpisPorIdEmpleadoPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-formaciones/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los tipos de formaciones requeridas y no requeridas de un empleado con sus estados */
        get: operations["getEstadoTiposFormacionesPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/tipos-informaciones/{idTipoInformacion}/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los tipos de informaciones requeridas de un empleado con sus estados */
        get: operations["getEstadoPorIdEmpresaPorIdEmpleadoPorIdTipoInformacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/ugs/{idUg}/actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recuperar todos las actividades, relacionados con un empleado y una ug */
        get: operations["getActividadesPorIdEmpresaPorIdEmpleadoPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/ugs/{idUg}/puestos-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recuperar todos los puestos de trabajo, relacionados con un empleado y una ug */
        get: operations["getPuestosTrabajoPorIdEmpresaPorIdEmpleadoPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/uts/{idUt}/actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recuperar todos las actividades, relacionados con un empleado y una ut */
        get: operations["getActividadesPorIdEmpresaPorIdEmpleadoPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/uts/{idUt}/puestos-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recuperar todos los puestos de trabajo, relacionados con un empleado y una ut */
        get: operations["getPuestosTrabajoPorIdEmpresaPorIdEmpleadoPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/estado-empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los empleados de una empresa con el estado general de los tipos de documentos que se le requieren */
        get: operations["getEstadoEmpleadosPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/estado-epis-empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener el estado de los epis de los empleados */
        get: operations["getEstadoEpisEmpleadosPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/estado-recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los recursos materiales de una empresa con su estado general en base a sus documentos */
        get: operations["getEstadoRecursosMaterialesPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/estado-tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera la lista de tipos de documentos requeridos para una empresa y sus estados */
        get: operations["getEstadosTiposDocumentosPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/evaluaciones-actividad": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las actividades con evaluaciones de una Ug o Ut */
        get: operations["getEvaluacionesActividadPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-documentales-ug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Modifica relaciones entre los packs ug y las relaciones de contratación pertenecientes a la empresa aportante de la documentación  */
        post: operations["postPacksDocumentalesUgPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-documentales-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Modifica relaciones entre los packs ut y las relaciones de contratación pertenecientes a la empresa aportante de la documentación */
        post: operations["postPacksDocumentalesUtPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-documentales/{idPackDocumental}/relaciones-contratacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las relaciones de contratación relacionadas con el pack documental */
        get: operations["getRelacionesContratacionPorIdEmpresaPorIdPackDocumental"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-documentales/{idPackDocumental}/relaciones-contratacion-disponibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las relaciones de contratación disponibles relacionadas con el pack documental */
        get: operations["getRelacionesContratacionDisponiblesPorIdEmpresaPorIdPackDocumental"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-ug-disponibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los packs documentales relacionados con las ugs de las relaciones de contratación que se pasan por parámetro */
        get: operations["getPacksUgDisponiblesPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-ug-relacionados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve los packs relacionados con una UG dadas unas relaciones de contratación */
        get: operations["getPacksUgRelacionadosPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-ut-disponibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los packs documentales relacionados con las uts de las relaciones de contratación que se pasan por parámetro */
        get: operations["getPacksUtDisponiblesPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/packs-ut-relacionados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve los packs relacionados con una UT dadas unas relaciones de contratación */
        get: operations["getPacksUtRelacionadosPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/reconocimientos/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera la lista de empleados que requieren reconocimientos y sus reconocimientos actual y en gestión */
        get: operations["getEstadoReconocimientosPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/reconocimientos/iniciar-reserva-cita": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Asignar evento a los reconocimientos de empleado */
        post: operations["postIniciarReservaCitaReconocimientosPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/recursos-materiales/{idRecursoMaterial}/estado-tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera la lista de tipos de documentos requeridos para un empleado y sus estados */
        get: operations["getEstadosTiposDocumentosPorIdEmpresaPorIdRecurso"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/recursos-materiales/{idRecursoMaterial}/tipos-documentos-requeridos/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el estado de un recurso material */
        get: operations["getEstadoTiposDocumentosRequeridosPorIdEmpresaPorIdRecursoMaterial"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/recursos-materiales/{idRecursoMaterial}/tipos-documentos-requeridos/{idTipoDocumento}/historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Consulta el histórico de un tipo de documento requerido aplicable a recurso material */
        get: operations["getHistoricoPorIdEmpresaPorIdRecursoPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/tipos-documentos-requeridos-especificos/{idTipoDocumento}/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el estado para cada solicitante de un tipo de documento específico */
        get: operations["getEstadoPorIdEmpresaPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/tipos-documentos-requeridos/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el estado de los tipos de documentos requeridos de empresa, tanto de los genéricos, como el estado resumen de los específicos */
        get: operations["getEstadoPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/tipos-documentos-requeridos/{idTipoDocumento}/historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Consulta el histórico de un tipo de documento requerido aplicable a empresa */
        get: operations["getHistoricoPorIdEmpresaPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/tipos-documentos-requeridos/{idTipoDocumento}/solicitantes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los solicitantes de empresa de un tipo documento */
        get: operations["getSolicitantesPorIdEmpresaPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs-con-evaluacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener las ugs con al menos una evaluación */
        get: operations["getUgsConEvaluacionPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las actividades que están asociadas a una Ug */
        get: operations["getActividadesPorIdEmpresaPorIdUg"];
        put?: never;
        /** Relaciona una Ug con una o varias actividades */
        post: operations["postActividadesPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/actividades/{idActividad}/relaciones-contratacion/{idRelacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener los empleados de una UgActividad-RelContratación */
        get: operations["getEmpleadosPorIdEmpresaPorIdUgPorIdActividadPorIdRelacion"];
        put?: never;
        /** Inserta/ Modifica / Elimina Relación Contratación de Empleados con una UgActividad */
        post: operations["postEmpleadosPorIdEmpresaPorIdUgPorIdActividadPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/empresas-aportantes/{idEmpresaAporta}/relaciones-contratacion/{idRelacion}/packs-ug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta/elimina relaciones de packs documentales de UG con una relación de contratación */
        post: operations["postPacksUgPorIdEmpresaPorIdUgPorIdEmpresaAportaPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/evaluaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las evaluaciones de una UG */
        get: operations["getEvaluacionesPorIdEmpresaPorIdUg"];
        put?: never;
        /** Crea una evaluación a una Ug */
        post: operations["postEvaluacionPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/packs-documentales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los Packs documentales por defecto de la empresa y ug seleccionada */
        get: operations["getPacksDocumentalesPorIdEmpresaPorIdUg"];
        put?: never;
        /** Inserta, elimina y edita los Packs documentales por defecto de la empresa y ug seleccionada */
        post: operations["postPacksDocumentalesPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/packs-documentales/{idPackDocumental}/relaciones-contratacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta/elimina relaciones de contratación con un pack documental de UG */
        post: operations["postRelacionesContratacionPorIdEmpresaPorIdUgPorIdPackDocumental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/puestos-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los puestos de trabajo de la empresa y ug seleccionada */
        get: operations["getPuestosTrabajoPorIdEmpresaPorIdUg"];
        put?: never;
        /** Inserta, edita y elimina los puestos de trabajo por defecto de la ug seleccionada */
        post: operations["postPuestosTrabajoPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/puestos-trabajo/{idPuesto}/relaciones-contratacion/{idRelacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener los empleados de una UgPuesto-RelContratación */
        get: operations["getEmpleadosPorIdEmpresaPorIdUgPorIdPuestoPorIdRelacion"];
        put?: never;
        /** Inserta, edita y elimina Empleados con un Ug puesto de trabajo */
        post: operations["postEmpleadosPorIdEmpresaPorIdUgPorIdPuestoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/situaciones-especiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las situaciones especiales relacionadas con una UG */
        get: operations["getSituacionesEspecialesPorIdEmpresaPorIdUg"];
        put?: never;
        /** Inserta/elimina las relaciones entre las situaciones especiales y las UGs */
        post: operations["postSituacionesEspecialesPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/situaciones-especiales/{idSituacion}/relaciones-contratacion/{idRelacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener los empleados de una UgSituación-RelContratación */
        get: operations["getEmpleadosPorIdEmpresaPorIdUgPorIdSituacionPorIdRelacion"];
        put?: never;
        /** Inserta/Edita/Elimina relaciones de contratación empleado con una UgSituación */
        post: operations["postEmpleadosPorIdEmpresaPorIdUgPorIdSituacionPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/tabla-riesgos-actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene toda la tabla de riesgos para actividades */
        get: operations["getTablaRiesgosActividadesPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/tabla-riesgos-puestos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene toda la tabla de riesgos para puestos */
        get: operations["getTablaRiesgosPuestosPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/tabla-riesgos-ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene toda la tabla de riesgos para ug */
        get: operations["getTablaRiesgosUgsPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/ugs/{idUg}/tipos-epis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener Tipos de Epis por su Ug */
        get: operations["getTiposEpisPorIdEmpresaPorIdUg"];
        put?: never;
        /** Modifica las relaciones entre una UG y tipos de EPIs */
        post: operations["postTiposEpisPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts-con-evaluacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve las UTs que tienen al menos una evaluación */
        get: operations["getUtsConEvaluacionPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las actividades que están asociadas a una Ut */
        get: operations["getActividadesPorIdEmpresaPorIdUt"];
        put?: never;
        /** Relaciona una Ut con una o varias actividades */
        post: operations["postActividadesPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/actividades/{idActividad}/relaciones-contratacion/{idRelacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener los empleados de una UtActividad-RelContratación */
        get: operations["getEmpleadosPorIdEmpresaPorIdUtPorIdActividadPorIdRelacion"];
        put?: never;
        /** Inserta/ Modifica / Elimina Relación Contratación de Empleados con una UtActividad */
        post: operations["postEmpleadosPorIdEmpresaPorIdUtPorIdActividadPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/empresas-aportantes/{idEmpresaAporta}/relaciones-contratacion/{idRelacion}/packs-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta/elimina relaciones de packs documentales de UT con una relación de contratación */
        post: operations["postPacksUtPorIdEmpresaPorIdUtPorIdEmpresaAportaPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/evaluaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las evaluaciones de una UT */
        get: operations["getEvaluacionesPorIdEmpresaPorIdUt"];
        put?: never;
        /** Crea una evaluación a una UT */
        post: operations["postEvaluacionPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/packs-documentales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los packs documentales por defecto de la empresa y ut seleccionada */
        get: operations["getPacksDocumentalesPorIdEmpresaPorIdUt"];
        put?: never;
        /** Inserta, elimina y edita los Packs documentales por defecto de la empresa y ut seleccionada */
        post: operations["postPacksDocumentalesPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/packs-documentales/{idPackDocumental}/relaciones-contratacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta/elimina relaciones de contratación con un pack documental de UT */
        post: operations["postRelacionesContratacionPorIdEmpresaPorIdUtPorIdPackDocumental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/puestos-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los puestos de trabajo de la empresa y ut seleccionada */
        get: operations["getPuestrosTrabajoPorIdEmpresaPorIdUt"];
        put?: never;
        /** Inserta, edita y elimina los puestos de trabajo por defecto de la ut seleccionada */
        post: operations["postPuestosTrabajoPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/puestos-trabajo/{idPuesto}/relaciones-contratacion/{idRelacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener los empleados de una UtPuesto-RelContratación */
        get: operations["getEmpleadosPorIdEmpresaPorIdUtPorIdPuestoPorIdRelacion"];
        put?: never;
        /** Inserta, edita y elimina Empleados con un Ut puesto de trabajo */
        post: operations["postEmpleadosPorIdEmpresaPorIdUtPorIdPuestoPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/situaciones-especiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las situaciones especiales relacionadas con una UT */
        get: operations["getSituacionesEspecialesPorIdEmpresaPorIdUt"];
        put?: never;
        /** Inserta/elimina las relaciones entre situaciones especiales y Ut */
        post: operations["postSituacionesEspecialesPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/situaciones-especiales/{idSituacion}/relaciones-contratacion/{idRelacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener los empleados de una UtSituación-RelContratación */
        get: operations["getEmpleadosPorIdEmpresaPorIdUtPorIdSituacionPorIdRelacion"];
        put?: never;
        /** Inserta/Edita/Elimina relaciones de contratación empleado con una UtSituación */
        post: operations["postEmpleadosPorIdEmpresaPorIdUtPorIdSituacionPorIdRelacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/tabla-riesgos-actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la tabla de riesgos para las actividades de una UT */
        get: operations["getTablaRiesgosActividadesPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/tabla-riesgos-puestos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene toda la tabla de riesgos para puestos */
        get: operations["getTablaRiesgosPuestosPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/tabla-riesgos-uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene toda la tabla de riesgos para UT */
        get: operations["getTablaRiesgosUtsPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/empresas/{idEmpresa}/uts/{idUt}/tipos-epis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Modifica las relaciones entre una UT y tipos de EPIs */
        post: operations["postTiposEpisPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/entrega-epi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene un listado de entregas de epi */
        get: operations["getEntregaEpi"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/entrega-epi/{idEntregaEpi}/descargar-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el pdf asociado a una entrega de EPI */
        get: operations["getPdfEntregaEpi"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/entrega-epi/{idEntregaEpi}/editar-observaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Edita las observaciones de la entrega del epi */
        post: operations["postEditarObservacionesPorIdEntregaEpi"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene una evaluación */
        get: operations["getEvaluacionPorIdEvaluacion"];
        put?: never;
        post?: never;
        /** Elimina una evaluación */
        delete: operations["deleteEvaluacionPorIdEvaluacion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/adjuntos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Subir un archivo a una evaluación */
        post: operations["postAdjuntoPorIdEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/adjuntos/informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener la información de los adjuntos de una evaluación */
        get: operations["getInformacionAdjuntoPorIdEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crear un riesgo a una evaluación, con su tipo de riesgo */
        post: operations["postRiesgoPorIdEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Editar un riesgo */
        put: operations["putRiesgoPorIdEvaluacionPorIdRiesgo"];
        post?: never;
        /** Eliminar un riesgo a una evaluación */
        delete: operations["deleteRiesgoPorIdEvaluacionPorIdRiesgo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crear una causa */
        post: operations["postCausaPorIdEvaluacionPorIdRiesgo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene una causa por su id */
        get: operations["getCausaPorIdEvaluacionPorIdRiesgoPorIdCausa"];
        /** Editar una causa  */
        put: operations["putCausaPorIdEvaluacionPorIdRiesgoPorIdCausa"];
        post?: never;
        /** Elimina una causa */
        delete: operations["deleteCausaPorIdEvaluacionPorIdRiesgoPorIdCausa"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/adjuntos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sube un archivo a una causa */
        post: operations["postAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/adjuntos/informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la información de los adjuntos de una causa */
        get: operations["getInformacionAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/adjuntos/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el binario de una causa por uuid */
        get: operations["getAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorUuid"];
        put?: never;
        post?: never;
        /** Elimina un archivo de una causa */
        delete: operations["deleteAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorUuid"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/medidas-preventivas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crear medida preventiva a una causa */
        post: operations["postMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/medidas-preventivas/{idMedida}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene una medida preventiva por su id */
        get: operations["getMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida"];
        /** Editar una medida preventiva */
        put: operations["putMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida"];
        post?: never;
        /** Elimina una medida preventiva */
        delete: operations["deleteMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/medidas-preventivas/{idMedida}/adjuntos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta un adjunto de un documento a una medida preventiva */
        post: operations["postAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/medidas-preventivas/{idMedida}/adjuntos/informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener la información de los adjuntos de una medida preventiva */
        get: operations["getInformacionAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/riesgos/{idRiesgo}/causas/{idCausa}/medidas-preventivas/{idMedida}/adjuntos/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener archivo adjunto de una medida preventiva por su Uuid */
        get: operations["getAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedidaPorUuid"];
        put?: never;
        post?: never;
        /** Eliminar archivo adjunto de una medida preventiva por su Uuid */
        delete: operations["deleteAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedidaPorUuid"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/evaluaciones-riesgos/{idEvaluacion}/tipo-entidad": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la entidad y el tipo de una evaluación */
        get: operations["getTipoEntidadPorIdEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/formaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las formaciones del sistema */
        get: operations["getFormaciones"];
        put?: never;
        /** Crea una formación */
        post: operations["postFormacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/formaciones/empresas/{idEmpresa}/estado-empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera una lista de empleados con su estado general de formaciones requeridas */
        get: operations["getEstadoEmpleadosFormacionesPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/formaciones/{idFormacion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene una formación por su id */
        get: operations["getFormacionPorIdFormacion"];
        /** Editar una formación */
        put: operations["putFormacionPorIdFormacion"];
        post?: never;
        /**
         * Borra una formación
         * @description Elimina una formación
         */
        delete: operations["deleteFormacionPorIdFormacion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/formaciones/{idFormacion}/cambiar-estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Cambia el estado de una formación */
        put: operations["putCambiarEstadoPorIdFormacion"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/formaciones/{idFormacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los empleados de una formación */
        get: operations["getEmpleadosPorIdFormacion"];
        put?: never;
        /** Inserta/Elimina relaciones entre una formación y una lista de empleados */
        post: operations["postEmpleadosPorIdFormacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/grupos-usuarios/sin-perfil": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los grupos de usuario que no tienen un perfil de acceso a documentos asociado */
        get: operations["getSinPerfilGruposUsuarios"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informaciones/estado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el estado de una información por el JWT público generado por su token */
        get: operations["getEstadoInformaciones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los informes del sistema */
        get: operations["getInformesEvaluacion"];
        put?: never;
        /** Crea un informe */
        post: operations["postInformeEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener un informe del sistema */
        get: operations["getInformeEvaluacionPorIdInformeEvaluacion"];
        /** Editar un informe */
        put: operations["putInformeEvaluacionPorIdInformeEvaluacion"];
        post?: never;
        /** Eliminar un informe del sistema */
        delete: operations["deleteInformeEvaluacionPorIdInformeEvaluacion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/evaluaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener las evaluaciones de un informe */
        get: operations["getEvaluacionesPorIdInformeEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/evaluaciones-puesto": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta y elimina relaciones entre evaluaciones de puestos y un informe */
        post: operations["postEvaluacionesPuestoPorIdInformeEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/evaluaciones-ug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta y elimina relaciones entre una evaluación de UG y un informe */
        post: operations["postEvaluacionesUgPorIdInformeEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/evaluaciones-ug-puesto": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta relaciones entre la evaluación de una UG y de sus puestos con un informe */
        post: operations["postEvaluacionesUgPuestoPorIdInformeEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/evaluaciones-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta y elimina relaciones entre una evaluación de UT y un informe */
        post: operations["postEvaluacionesUtPorIdInformeEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/evaluaciones-ut-puesto": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta relaciones entre la evaluación de una UT y de sus puestos con un informe */
        post: operations["postEvaluacionesUtPuestoPorIdInformeEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/generar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generar un informe de evaluación */
        post: operations["generarInformeEvaluacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/puestos-disponibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los puestos de trabajo evaluados */
        get: operations["getPuestosDisponiblesPorIdInformeEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/puestos-informe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los puestos de trabajo incluidos en un informe de evaluación */
        get: operations["getPuestosInformePorIdInformeEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/ugs-disponibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener ugs modo árbol, con ugs evaluadas y sin informes previos */
        get: operations["getUgsDisponiblesPorIdInformeEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/ugs-informe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener las UGs evaluadas incluidas en un informe de evaluación */
        get: operations["getUgsInformePorIdInformeEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/uts-disponibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener uts modo árbol, con uts evaluadas y sin informes previos */
        get: operations["getUtsDisponiblesPorIdInformeEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/informes-evaluacion/{idInformeEvaluacion}/uts-informe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener las UTs evaluadas incluidas en un informe de evaluación */
        get: operations["getUtsInformePorIdInformeEvaluacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/packs-documentales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve todos los packs documentales del sistema */
        get: operations["getPacksDocumentales"];
        put?: never;
        /** Crea un nuevo pack documental */
        post: operations["postPackDocumental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/packs-documentales/{idPackDocumental}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un pack documental por su id */
        get: operations["getPackDocumentalPorIdPackDocumental"];
        /** Actualiza un pack documental existente */
        put: operations["putPackDocumentalPorIdPackDocumental"];
        post?: never;
        /** Borra un pack documental */
        delete: operations["deletePackDocumentalPorIdPackDocumental"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/packs-documentales/{idPackDocumental}/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los documentos de un pack documental */
        get: operations["getTiposDocumentosPorIdPackDocumental"];
        put?: never;
        /** Actualiza los tipos de documentos de un pack documental */
        post: operations["postTiposDocumentosPorIdPackDocumental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/packs-documentales/{idPackDocumental}/ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las ugs asociadas a un pack documental */
        get: operations["getUgsPorIdPackDocumental"];
        put?: never;
        /** Inserta, edita y elimina los packs documentales por defecto de la ug seleccionada */
        post: operations["postUgsPorIdPackDocumental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/packs-documentales/{idPackDocumental}/uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las uts que están relacionadas con un pack documental */
        get: operations["getUtsPorIdPackDocumental"];
        put?: never;
        /** Inserta, edita y elimina los packs documentales por defecto de la ut seleccionada */
        post: operations["postUtsPorIdPackDocumental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/perfiles-accesos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene un listado de perfiles de acceso a documentos */
        get: operations["getPerfilesAccesoDocumentos"];
        put?: never;
        /** Inserta un PerfilAccesoDocumento en la DB */
        post: operations["postPerfilAccesoDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/perfiles-accesos-documentos/{idPerfilAccesoDocumento}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera la información básica de un perfil de acceso a documentos específico */
        get: operations["getPerfilAccesoDocumentoPorIdPerfilAccesoDocumento"];
        /** Actualiza un perfil Acceso Documento */
        put: operations["putPerfilAccesoDocumentoPorIdPerfilAccesoDocumento"];
        post?: never;
        /** Elimina perfiles de acceso a documentos */
        delete: operations["deletePerfilAccesoDocumentoPorIdPerfilAccesoDocumento"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/perfiles-accesos-documentos/{idPerfilAccesoDocumento}/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los tipos de documento de un perfil de acceso a documentos */
        get: operations["getTiposDocumentosPorIdPerfilAccesoDocumento"];
        put?: never;
        /** Editar las relaciones de un perfil respecto a permiso por defecto y tipo documento */
        post: operations["postTipoDocumentoPorIdPerfilAccesoDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/puestos-trabajo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el listado de puestos de trabajo */
        get: operations["getPuestosTrabajo"];
        put?: never;
        /** Crea un puesto de trabajo */
        post: operations["postPuestoTrabajo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/puestos-trabajo/num-relacionados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la lista de puestos de trabajo con el número de actividades y empleados relacionados */
        get: operations["getNumRelacionadosPuestosTrabajo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/puestos-trabajo/{idPuestoTrabajo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un puesto de trabajo por su id */
        get: operations["getPuestoTrabajoPorIdPuestoTrabajo"];
        /** Actualiza un puesto de trabajo por su id */
        put: operations["putPuestoTrabajoPorIdPuestoTrabajo"];
        post?: never;
        /** Borra un puesto de trabajo */
        delete: operations["deletePuestoTrabajoPorIdPuestoTrabajo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/puestos-trabajo/{idPuestoTrabajo}/actividades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las actividades relacionadas con un puesto de trabajo */
        get: operations["getActividadesPorIdPuestoTrabajo"];
        put?: never;
        /** Relaciona un puesto de trabajo con una o varias actividades */
        post: operations["postActividadesPorIdPuestoTrabajo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/puestos-trabajo/{idPuestoTrabajo}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los empleados que están asociados a un puesto de trabajo */
        get: operations["getEmpleadosPorIdPuestoTrabajo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/puestos-trabajo/{idPuesto}/ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las ugs de un puesto de trabajo */
        get: operations["getUgsPorIdPuesto"];
        put?: never;
        /** Inserta, edita y elimina las ugs por defecto del puesto de trabajo seleccionado */
        post: operations["postUgsPorIdPuesto"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/puestos-trabajo/{idPuesto}/uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las uts de un puesto de trabajo */
        get: operations["getUtsPorIdPuesto"];
        put?: never;
        /** Inserta, edita y elimina las uts por defecto del puesto de trabajo seleccionado */
        post: operations["postUtsPorIdPuesto"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/reconocimientos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un reconocimiento médico a partir del id que viene en el jwt */
        get: operations["getReconocimiento"];
        /** Renuncia/Acepta un reconocimiento médico a partir del id que viene en el jwt */
        put: operations["putReconocimiento"];
        /** Crea un nuevo reconocimiento médico a una lista de empleados */
        post: operations["postReconocimiento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/reconocimientos/{idReconocimiento}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene un reconocimiento médico por su id */
        get: operations["getReconocimientoPorIdReconocimiento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/situaciones-especiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el listado de situaciones especiales */
        get: operations["getSituacionesEspeciales"];
        put?: never;
        /** Crea una nueva situación especial */
        post: operations["postSituacionEspecial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/situaciones-especiales/num-relacionados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la lista de situaciones especiales con el número de tipos de documentoss y empleados relacionados */
        get: operations["getNumRelacionadosSituacionesEspeciales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/situaciones-especiales/{idSituacionEspecial}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la entidad Situación Especial correspondiente al ID introducido */
        get: operations["getSituacionEspecialPorIdSituacionEspecial"];
        /** Actualiza una determinada situación especial */
        put: operations["putSituacionEspecialPorIdSituacionEspecial"];
        post?: never;
        /** Elimina una determinada situación especial */
        delete: operations["deleteSituacionEspecialPorIdSituacionEspecial"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/situaciones-especiales/{idSituacionEspecial}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los empleados relacionados con una situación especial */
        get: operations["getEmpleadosPorIdSituacionEspecial"];
        put?: never;
        /** Relaciona empleados a una situación especial */
        post: operations["postEmpleadosPorIdSituacionEspecial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/situaciones-especiales/{idSituacionEspecial}/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los tipos de documentos relacionados con el id de una situación especial */
        get: operations["getTiposDocumentosPorIdSituacionEspecial"];
        put?: never;
        /** Relaciona, modifica y elimina una situación especial con uno o varios tipos de documentos, y si dicha relación exime o no */
        post: operations["postTiposDocumentosPorIdSituacionEspecial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/situaciones-especiales/{idSituacionEspecial}/ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las ugs relacionadas con una situacion especial */
        get: operations["getUgsPorIdSituacionEspecial"];
        put?: never;
        /**
         * Relaciona las ugs con una situación especial
         * @description Realización de relaciones entre las Ugs y las situaciones especiales rompiendo la relación de muchos a muchos
         */
        post: operations["postUgsPorIdSituacionEspecial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/situaciones-especiales/{idSituacionEspecial}/uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las uts relacionadas con una situacion especial */
        get: operations["getUtsPorIdSituacionEspecial"];
        put?: never;
        /**
         * Relaciona las uts con una situación especial
         * @description Realiza la relacion entre las Uts y las situaciones especiales
         */
        post: operations["postUtsPorIdSituacionEspecial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve todos los tipos de documentos del sistema en base a unos filtros */
        get: operations["getTiposDocumentos"];
        put?: never;
        /** Crea un nuevo tipo de documento */
        post: operations["postTipoDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos-universales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve todos los tipos de documentos universales del sistema en base a unos filtros */
        get: operations["getTiposDocumentosUniversales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/firmar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Firma un tipo documento */
        post: operations["postFirmarTipoDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un tipo de documento por su id */
        get: operations["getTipoDocumentoPorIdTipoDocumento"];
        /** Actualiza un tipo de documento existente */
        put: operations["putTipoDocumentoPorIdTipoDocumento"];
        post?: never;
        /** Borra un tipo de documento */
        delete: operations["deleteTipoDocumentoPorIdTipoDocumento"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/adjuntos/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el binario de una documentacion anexa. */
        get: operations["getAdjuntoPorIdTipoDocumentoPorUuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/criterios-validacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene una lista de criterios de validación relacionados con un tipo de documento */
        get: operations["getCriteriosValidacionPorIdTipoDocumento"];
        put?: never;
        /** Insertar, eliminar y modificar relaciones entre Tipo de Documento y Criterios de Validación */
        post: operations["postCriteriosValidacionPorIdTipoDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/nivel-permiso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve el nivel de permiso que tiene el usuario para un tipo de documento */
        get: operations["getPermisoPorDefectoPorIdTipoDocumento"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-adjuntos/{idTipoAdjunto}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crea adjuntos de un tipo de documento */
        post: operations["postAdjuntoPorIdTipoDocumentoPorIdTipoAdjunto"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-adjuntos/{idTipoAdjunto}/adjuntos/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Elimina la documentacion anexa de un tipo de documento */
        delete: operations["deleteAdjuntoPorIdTipoDocumentoPorIdTipoAdjuntoPorUuid"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-adjuntos/{idTipoAdjunto}/binarios-comprimidos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los archivos binarios de los adjuntos de un tipo documento comprimidos en un zip */
        get: operations["getBinariosComprimidosPorIdTipoDocumentoPorIdTipoAdjunto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-adjuntos/{idTipoAdjunto}/entidades-especificas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el adjunto de un solicitante de un tipo de adjunto */
        get: operations["getEntidadesEspecificasPorIdTipoDocumentoPorIdTipoAdjunto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-adjuntos/{idTipoAdjunto}/informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Comprueba si existe una determinada documentacion anexa de un tipo de documento, devuelve información. */
        get: operations["getInformacionPorIdTipoDocumentoPorIdTipoAdjunto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-adjuntos/{idTipoAdjunto}/observaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edita las observaciones de los adjuntos de un tipo documento */
        put: operations["putObservacionesPorIdTipoDocumentoPorIdTipoAdjunto"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-adjuntos/{idTipoAdjunto}/tipos-solicitantes/{idTipoSolicitante}/solicitantes/{idSolicitante}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Elimina el adjunto de un solicitante de un tipo de adjunto */
        delete: operations["deleteSolicitantePorIdTipoDocumentoPorIdTipoAdjuntoPorIdTipoSolicitantePorIdSolicitante"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta y elimina las relaciones entre tipos de documentos */
        post: operations["postTiposDocumentosPorIdTipoDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-documentos/{idTipoDocumento}/tipos-solicitantes/{idTipoSolicitante}/solicitantes/{idSolicitante}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el adjunto de un solicitante de un tipo de documento */
        get: operations["getSolicitantePorIdTipoDocumentoPorIdTipoSolicitantePorIdSolicitante"];
        put?: never;
        /** Inserta un adjunto a un solicitante de un tipo de documento */
        post: operations["postSolicitantePorIdTipoDocumentoPorIdTipoSolicitantePorIdSolicitante"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-epis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el listado de tipos de epi */
        get: operations["getTiposEpis"];
        put?: never;
        /** Crea un tipo de EPI */
        post: operations["postTipoEpi"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-epis/{idTipoEpi}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Actualiza un determinado tipo EPI */
        put: operations["putTipoEpiPorIdTipoEpi"];
        post?: never;
        /** Elimina un tipo de EPI en base a su ID */
        delete: operations["deleteTipoEpiPorIdTipoEpi"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-formaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todos los tipos formaciones */
        get: operations["getTiposFormaciones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-formaciones/{idTipoFormacion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edita un tipo formación */
        put: operations["putTipoFormacionPorIdTipoFormacion"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-formaciones/{idTipoFormacion}/empresas/{idEmpresa}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los empleados de una empresa a los que se les requiere el tipo formación indicado */
        get: operations["getEmpleadosPorIdTipoFormacionPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-informaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todos los tipos informaciones y sus solicitantes */
        get: operations["getTiposInformaciones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-informaciones/empresas/{idEmpresa}/estado-empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera una lista de empleados con su estado general de informaciones requeridas */
        get: operations["getEstadosEmpleadosPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-informaciones/{idTipoInformacion}/empresas-solicitantes/{idEmpresa}/actividades/{idActividad}/enviar-informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Envía un correo de información de una actividad a una lista de empleados */
        post: operations["postEnviarInformacionPorIdTipoFormacionPorIdEmpresaPorIdActividad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-informaciones/{idTipoInformacion}/empresas-solicitantes/{idEmpresa}/ugs/{idUg}/enviar-informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Envía un correo de información de una ug a una lista de empleados */
        post: operations["postEnviarInformacionPorIdTipoFormacionPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-informaciones/{idTipoInformacion}/empresas-solicitantes/{idEmpresa}/uts/{idUt}/enviar-informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Envía un correo de información de una ut a una lista de empleados */
        post: operations["postEnviarInformacionPorIdTipoFormacionPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-informaciones/{idTipoInformacion}/empresas/{idEmpresa}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera la lista de empleados a los que se le requiere un tipo de información */
        get: operations["getEmpresasPorIdTipoInformacionPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-medidas-preventivas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todos los tipos de medidas preventivas del sistema */
        get: operations["getTiposMedidasPreventivas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-reconocimientos-medicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el tipo de documento del reconocimiento médico */
        get: operations["getTipoReconocimientoMedico"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-recursos-materiales/{idTipoRecursoMaterial}/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los tipos de documentos asociados a un tipo de recurso */
        get: operations["getTiposDocumentosPorIdTipoRecursoMaterial"];
        put?: never;
        /** Actualiza los tipos de documentos de un tipo de recurso */
        post: operations["postTiposDocumentosPorIdTipoRecursoMaterial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/tipos-riesgos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todos los tipos de riesgo del sistema */
        get: operations["getTiposRiesgos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/usuarios/{idUsuario}/documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dado un listado de IDs, obtiene los documentos filtrados según si su tipo de documento está relacionado con el usuario */
        get: operations["getDocumentosPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/usuarios/{idUsuario}/empleados-formaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los empleados formaciones filtrados según si su tipo de formación y empleado están relacionados con el usuario */
        get: operations["getEmpleadosFormacionesPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/usuarios/{idUsuario}/empresas/{idEmpresa}/roles/{idRol}/perfiles-accesos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el listado de perfiles de acceso a documentos de un usuario */
        get: operations["getPerfilesAccesoDocumentoPorIdUsuarioPorIdEmpresaPorIdRol"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/usuarios/{idUsuario}/formaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dado un listado de IDs, obtiene las formaciones filtradas según si su tipo de formación está relacionado con el usuario */
        get: operations["getFormacionesPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/usuarios/{idUsuario}/perfiles-acceso-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los perfiles de acceso a documentos filtrados según sus ids relacionados con el usuario */
        get: operations["getPerfilesAccesoDocumentosPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/usuarios/{idUsuario}/tipos-documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el listado de tipos documentos que puede ver un usuario */
        get: operations["getTiposDocumentosPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/valoracion-riesgos/calcular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Calcula la valoración de riesgos dada una consecuencia y una probabilidad */
        get: operations["getCalcularValoracionRiesgos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/valoracion-riesgos/consecuencias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todas las posibles consecuencias del sistema */
        get: operations["getConsecuenciasValoracionRiesgos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cae/v1/valoracion-riesgos/probabilidades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todas las posibles probabilidades del sistema */
        get: operations["getProbabilidadesValoracionRiesgos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        AccionEntregaEpiEnum: AccionEntregaEpiEnum;
        AceptarRechazarReconocimientoDtoRequest: {
            aceptar?: boolean;
        };
        ActividadAdjuntosInfoDtoResponse: {
            /** Format: int32 */
            idActividad?: number;
            nombre?: string;
            adjuntos?: components["schemas"]["AdjuntoInfoDtoResponse"][];
        };
        ActividadDTO_GET: {
            nombre: string;
            aplicaSubcontrata: boolean;
            soloPuedeAsignar: boolean;
            preguntaAsignacion: boolean;
            pregunta: string;
            observaciones: string;
            /** Format: int32 */
            idActividad: number;
            puestosTrabajo?: components["schemas"]["PuestoTrabajoDTO_GET"][];
            asignadoAPuesto?: boolean;
            reconocimientoObligatorio?: boolean;
            porDefectoUg?: boolean;
            porDefectoEmpleadoEnUg?: boolean;
            porDefectoUt?: boolean;
            porDefectoEmpleadoEnUt?: boolean;
        };
        ActividadDTO_POST_PUT: {
            nombre: string;
            aplicaSubcontrata: boolean;
            soloPuedeAsignar: boolean;
            preguntaAsignacion: boolean;
            pregunta: string;
            observaciones: string;
            reconocimientoObligatorio?: boolean;
            porDefectoUg?: boolean;
            porDefectoEmpleadoEnUg?: boolean;
            porDefectoUt?: boolean;
            porDefectoEmpleadoEnUt?: boolean;
        };
        ActividadDtoResponseIdNombre: {
            /** Format: int32 */
            idActividad?: number;
            nombre?: string;
        };
        ActividadFechasDtoResponse: {
            actividad?: components["schemas"]["ActividadDTO_GET"];
            fechaDesde?: string;
            fechaHasta?: string;
        };
        ActividadIdFechasDtoRequest: {
            fechaDesde: string;
            fechaHasta: string;
            /** Format: int32 */
            idActividad: number;
        };
        ActividadNumRelacionadosDtoGet: {
            nombre: string;
            aplicaSubcontrata: boolean;
            soloPuedeAsignar: boolean;
            preguntaAsignacion: boolean;
            pregunta: string;
            observaciones: string;
            /** Format: int32 */
            idActividad: number;
            puestosTrabajo?: components["schemas"]["PuestoTrabajoDTO_GET"][];
            asignadoAPuesto?: boolean;
            reconocimientoObligatorio?: boolean;
            porDefectoUg?: boolean;
            porDefectoEmpleadoEnUg?: boolean;
            porDefectoUt?: boolean;
            porDefectoEmpleadoEnUt?: boolean;
            /** Format: int32 */
            numTipoDocumentos?: number;
            /** Format: int32 */
            numPuestos?: number;
            /** Format: int32 */
            numEmpleados?: number;
        };
        ActividadPorDefectoEmpleadoDtoResponse: {
            actividad?: components["schemas"]["ActividadDTO_GET"];
            porDefectoEmpleado?: boolean;
        };
        ActividadUtDTO_Rabbit: {
            /** Format: int32 */
            idActividad?: number;
            utsInsertar?: number[];
            utsEliminar?: number[];
        };
        ActividadesEmpleadoDtoResponse: {
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
            listadoEditados?: components["schemas"]["ActividadFechasDtoResponse"][];
            listadoEliminados?: number[];
            listadoInsertados?: components["schemas"]["ActividadFechasDtoResponse"][];
        };
        AdjuntoInfoDtoResponse: {
            /** Format: int32 */
            idArchivo?: number;
            nombre?: string;
            observaciones?: string;
        };
        /** @enum {string} */
        AplicableAEnum: AplicableAEnum;
        ArchivoDTO_GET: {
            /** Format: int32 */
            idTipoEntidad: number;
            /** Format: int32 */
            idEntidad: number;
            /** Format: int32 */
            idTipoEntidadSecundaria?: number;
            /** Format: int32 */
            idEntidadSecundaria?: number;
            observaciones: string;
            nombre: string;
            /** Format: binary */
            binario: string;
            esCreacion?: boolean;
            extension?: string;
            /** Format: int32 */
            numeroPaginas?: number;
            /** Format: int32 */
            idArchivo?: number;
            uuid?: string;
            /** Format: int32 */
            idEntorno?: number;
            fechaInsercion?: components["schemas"]["ZonedDateTime"];
            fechaModificacion?: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            tamano?: number;
        };
        ArchivoDTO_GET_INFO: {
            existe?: boolean;
            uuid?: string;
            fechaInsercion?: components["schemas"]["ZonedDateTime"];
            fechaModificacion?: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            tamano?: number;
            extension?: string;
            nombre?: string;
            observaciones?: string;
            /** Format: int32 */
            idArchivo?: number;
            /** Format: int32 */
            numeroPaginas?: number;
        };
        ArchivoObservacionesDtoRequest: {
            /** Format: int32 */
            idTipoEntidad: number;
            /** Format: int32 */
            idEntidad: number;
            /** Format: int32 */
            idTipoEntidadSecundaria?: number;
            /** Format: int32 */
            idEntidadSecundaria?: number;
            observaciones: string;
        };
        CategoriaRiesgoDtoResponse: {
            /** Format: int32 */
            idCategoria?: number;
            nombre?: string;
            tiposRiesgos?: components["schemas"]["TipoRiesgoDtoResponse"][];
        };
        /** @enum {string} */
        CausaConsecuenciaEnum: CausaConsecuenciaEnum;
        CausaDtoRequest: {
            consecuencia: components["schemas"]["CausaConsecuenciaEnum"];
            descripcion: string;
            nombre: string;
            probabilidad: components["schemas"]["CausaProbabilidadEnum"];
        };
        CausaDtoResponse: {
            consecuencia?: string;
            descripcion?: string;
            /** Format: int32 */
            idCausa?: number;
            nombre?: string;
            probabilidad?: string;
        };
        /** @enum {string} */
        CausaNivelRiesgoEnum: CausaNivelRiesgoEnum;
        /** @enum {string} */
        CausaProbabilidadEnum: CausaProbabilidadEnum;
        CausaTablaDtoResponse: {
            consecuencia?: string;
            /** Format: int32 */
            idCausa?: number;
            medidas?: components["schemas"]["MedidaPreventivaTablaDtoResponse"][];
            nombre?: string;
            probabilidad?: string;
            valoracion?: string;
            descripcion?: string;
        };
        CodigoValorDtoResponse: {
            codigo?: string;
            valor?: string;
        };
        ColumnaTablaRiesgoDtoResponse: {
            codigoTipoRiesgo?: string;
            /** Format: int32 */
            idEvaluacion?: number;
            valoracionRiesgo?: components["schemas"]["CausaNivelRiesgoEnum"];
        };
        CorreoInformacionDto: {
            fechaAviso: string;
            empleados: components["schemas"]["EmpleadoDTO_POST_PUT"][];
        };
        CriterioValidacionDtoRequest: {
            textoCriterioValidacion: string;
        };
        CriterioValidacionDtoResponse: {
            /** Format: int32 */
            idCriterioValidacion?: number;
            textoCriterioValidacion?: string;
        };
        /** @enum {string} */
        DayOfWeek: DayOfWeek;
        /** @enum {string} */
        DepartamentoAreaEnum: DepartamentoAreaEnum;
        /** @enum {string} */
        DocumEstadoEnum: DocumEstadoEnum;
        /** @enum {string} */
        DocumMetodoInsercionEnum: DocumMetodoInsercionEnum;
        DocumentoDTO_POST: {
            fechaDocumento: string;
            estado: components["schemas"]["DocumEstadoEnum"];
            observaciones: string;
            fechaCaducidad?: string;
            /** Format: int32 */
            idTipoDocumento: number;
            metodoInsercion: components["schemas"]["DocumMetodoInsercionEnum"];
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresaUg?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresaUt?: number;
            /** Format: int32 */
            idActividad?: number;
        };
        DocumentoDTO_PUT: {
            fechaDocumento: string;
            estado: components["schemas"]["DocumEstadoEnum"];
            observaciones: string;
            fechaCaducidad?: string;
        };
        DocumentoDtoResponse: {
            fechaDocumento: string;
            estado: components["schemas"]["DocumEstadoEnum"];
            observaciones: string;
            fechaCaducidad?: string;
            /** Format: int32 */
            idDocumento?: number;
            tipoDocumento?: components["schemas"]["TipoDocumentoDtoResponse"];
            empresa?: components["schemas"]["EmpresaDtoResponse"];
            archivoInfo?: components["schemas"]["ArchivoDTO_GET_INFO"];
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt?: number;
            informacionVigencia?: components["schemas"]["InformacionVigenciaEnum"];
            metodoInsercion?: components["schemas"]["DocumMetodoInsercionEnum"];
            fechaCaducidadManual?: boolean;
            fechaCaducidadDefecto?: string;
        };
        DocumentoDtoResponseDelete: {
            fechaDocumento: string;
            estado: components["schemas"]["DocumEstadoEnum"];
            observaciones: string;
            fechaCaducidad?: string;
            /** Format: int32 */
            idDocumento?: number;
            tipoDocumento?: components["schemas"]["TipoDocumentoDTO_GET"];
            empresa?: components["schemas"]["EmpresaDtoResponse1"];
            archivoInfo?: components["schemas"]["ArchivoDTO_GET_INFO"];
            nombreEmpresa?: string;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idActividad?: number;
            empleados?: components["schemas"]["EmpleadoDTO_POST_PUT"][];
            recursosMateriales?: components["schemas"]["RecursoMaterialDto"][];
            metodoInserccion?: string;
            informacionVigencia?: components["schemas"]["InformacionVigenciaEnum"];
            metodoInsercion?: string;
        };
        DocumentoHistoricoDTO_GET: {
            /** Format: int32 */
            idLog: number;
            /** Format: int32 */
            idDocumento: number;
            fecha: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            idUsuario: number;
            correoUsuario: string;
            fechaDocumento: string;
            fechaCaducidad?: string;
            observaciones: string;
            estado: string;
        };
        DocumentoRecursoMaterialDto: {
            /** Format: int32 */
            idDocumento?: number;
            /** Format: int32 */
            idRecursoMaterial?: number;
            /** Format: int32 */
            idEmpresa?: number;
        };
        DocumentoRecursoMaterialDtoResponse: {
            listadoEliminados?: components["schemas"]["DocumentoRecursoMaterialDto"][];
            listadoInsertados?: components["schemas"]["DocumentoRecursoMaterialDto"][];
        };
        DocumentoRelevanteDtoResponse: {
            /** Format: int32 */
            idDocumento?: number;
            validoDesde?: string;
            validoHasta?: string;
            estado?: components["schemas"]["DocumEstadoEnum"];
            /** Format: int32 */
            diasRestantes?: number;
            observaciones?: string;
            validoHastaPorDefecto?: string;
        };
        DocumentoRelevanteDtoResponseLista: {
            estado?: components["schemas"]["DocumEstadoEnum"];
            /** Format: int32 */
            idDocumento?: number;
            validoDesde?: string;
            validoHasta?: string;
            fechaCaducidadManual?: boolean;
            fechaCaducidadDefecto?: string;
        };
        DocumentoVigenciaDtoResponse: {
            /** Format: int32 */
            idDocumento?: number;
            validoDesde?: string;
            validoHasta?: string;
            validoHastaPorDefecto?: string;
            observaciones?: string;
            informacionVigencia?: components["schemas"]["InformacionVigenciaEnum"];
            /** Format: int32 */
            diasPreaviso?: number;
        };
        /**
         * Format: duration
         * @example P1D
         */
        Duration: string;
        EmpleadoDTO_GET: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idPersona?: number;
            nombre?: string;
            apellido1?: string;
            apellido2?: string;
            dni?: string;
            empresa?: components["schemas"]["EmpresaDtoResponse"];
            reconocimientosEmpleado?: components["schemas"]["ReconocimientoEmpleadoDtoResponse"][];
            actividades?: components["schemas"]["ActividadDTO_GET"][];
            permiteComunicacionesDigitales?: boolean;
            tieneReconocimientoObligatorio?: boolean;
        };
        EmpleadoDTO_POST_PUT: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        EmpleadoDtoRequestEntregaEpi: {
            /** Format: int32 */
            idTipoEpi: number;
            numeroSerie?: string;
            observaciones?: string;
            /** Format: int32 */
            cantidad: number;
            accion: components["schemas"]["AccionEntregaEpiEnum"];
        };
        EmpleadoDtoResponseListaEpis: {
            /** Format: int32 */
            idTipoEpi?: number;
            /** Format: int32 */
            idEmpleadoTipoEpi?: number;
            /** Format: int32 */
            idUltimaEntregaEpi?: number;
            nombre?: string;
            codigo?: string;
            /** Format: int32 */
            numeroEntrega?: number;
            requerido?: boolean;
            numeroSerie?: string;
            fechaEntrega?: string;
            fechaUltimaRevision?: string;
            fechaProximaRevision?: string;
            fechaValidez?: string;
            estado?: components["schemas"]["EstadoEpiEnum"];
            normas?: string[];
            observaciones?: string;
            sinRevision?: boolean;
            validezIndefinida?: boolean;
        };
        EmpleadoDtoResponseListaEstadoEpis: {
            nif?: string;
            nombre?: string;
            apellido1?: string;
            apellido2?: string;
            estadoEpis?: components["schemas"]["EstadoEpiEnum"];
            /** Format: int32 */
            totalEpisOk?: number;
            /** Format: int32 */
            totalEpisRequeridos?: number;
            /** Format: int32 */
            totalEpisNoValidos?: number;
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idEmpresa?: number;
        };
        EmpleadoEstadoDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpleado?: number;
            dni?: string;
            nombre?: string;
            apellido1?: string;
            apellido2?: string;
            estado?: components["schemas"]["DocumEstadoEnum"];
            permiteComunicacionesDigitales?: boolean;
        };
        EmpleadoEstadoGeneralDtoResponse: {
            empleado?: components["schemas"]["EmpleadoEstadoDtoResponse"];
            validez?: string;
            /** Format: int32 */
            totalRequeridos?: number;
            /** Format: int32 */
            totalDocumentosOk?: number;
            /** Format: int32 */
            totalDocumentosPendientes?: number;
            /** Format: int32 */
            totalDocumentosNoValidos?: number;
            /** Format: int32 */
            diasPreaviso?: number;
        };
        EmpleadoEstadoReconocimientoDtoResponse: {
            empleado?: components["schemas"]["EmpleadoEstadoDtoResponse"];
            documento?: components["schemas"]["DocumentoVigenciaDtoResponse"];
            reconocimientoEnGestion?: components["schemas"]["ReconocimientoMedicoGestionDtoResponse"];
            reconocimientoObligatorio?: boolean;
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        EmpleadoFechaDto: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
            fechaDesde: string;
            fechaHasta: string;
        };
        EmpleadoFormacionDocumentoDtoGet: {
            /** Format: int32 */
            idEmpleadoFormacion?: number;
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
            estadoGestion?: components["schemas"]["EstadoGestionFormacionEnum"];
            formacion?: components["schemas"]["FormacionDtoResponse"];
            documento?: components["schemas"]["DocumentoDtoResponse"];
        };
        EmpleadoFormacionDtoGet: {
            /** Format: int32 */
            idEmpleadoFormacion?: number;
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
            estadoGestion?: components["schemas"]["EstadoGestionFormacionEnum"];
            formacion?: components["schemas"]["FormacionDtoResponse"];
        };
        EmpleadoFormacionEstadoGeneralDtoResponse: {
            empleado?: components["schemas"]["EmpleadoEstadoDtoResponse"];
            /** Format: int32 */
            totalFormacionesRequeridas?: number;
            /** Format: int32 */
            totalFormacionesOk?: number;
        };
        EmpleadoIdDto: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        EmpleadoInformacionDtoResponse: {
            empleado?: components["schemas"]["EmpleadoEstadoDtoResponse"];
            informacion?: components["schemas"]["InformacionDtoResponse"];
        };
        EmpleadoInformacionEstadoGeneralDtoResponse: {
            empleado?: components["schemas"]["EmpleadoEstadoDtoResponse"];
            /** Format: int32 */
            totalInformacionesRequeridas?: number;
            /** Format: int32 */
            totalInformacionesOk?: number;
        };
        EmpleadoSituacionEspecialDTO_GET: {
            nombre: string;
            aplicaSubcontrata: boolean;
            soloPuedeAsignar: boolean;
            preguntaAsignacion: boolean;
            pregunta: string;
            observaciones: string;
            /** Format: int32 */
            idSituacion?: number;
            indefinida?: boolean;
            /** Format: int32 */
            validez?: number;
            tipoValidez?: components["schemas"]["TipoValidezEnum"];
            porDefectoUg?: boolean;
            porDefectoUt?: boolean;
            fechaFinAsignacion?: string;
        };
        EmpleadoTipoFormacionRequeridaDtoResponse: {
            empleado?: components["schemas"]["EmpleadoEstadoDtoResponse"];
            validoHasta?: string;
            estadoFormacionGestion?: components["schemas"]["EstadoGestionFormacionEnum"];
        };
        EmpresaDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            cif?: string;
            nombre?: string;
        };
        EmpresaDtoResponse1: {
            cif: string;
            nombre: string;
            /** Format: int32 */
            paisCif: number;
            observaciones: string;
            /** Format: int32 */
            idEmpresa?: number;
            nombreUsuario?: string;
            apellidosUsuario?: string;
            emailUsuario?: string;
            tipoEmpresa?: components["schemas"]["TipoSolicitudAltaEnum"];
            entornos?: components["schemas"]["EntornoDtoResponse"][];
            fechaCreacion?: components["schemas"]["ZonedDateTime"];
            fechaUltimoAcceso?: components["schemas"]["ZonedDateTime"];
            razonSocial?: string;
            zonaHoraria?: components["schemas"]["ZoneId"];
        };
        EmpresaEstadoDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            cif?: string;
            nombre?: string;
            estado?: components["schemas"]["DocumEstadoEnum"];
        };
        EmpresaEstadoGeneralDtoResponse: {
            empresa?: components["schemas"]["EmpresaEstadoDtoResponse"];
            validez?: string;
            /** Format: int32 */
            totalRequeridos?: number;
            /** Format: int32 */
            totalDocumentosOk?: number;
            /** Format: int32 */
            totalDocumentosPendientes?: number;
            /** Format: int32 */
            totalDocumentosNoValidos?: number;
            /** Format: int32 */
            diasPreaviso?: number;
        };
        EntornoDtoResponse: {
            /** Format: int32 */
            idEntorno?: number;
            /** Format: int32 */
            idModulo?: number;
            activo?: boolean;
            estado?: components["schemas"]["EntornoEstadoEnum"];
        };
        /** @enum {string} */
        EntornoEstadoEnum: EntornoEstadoEnum;
        EntregaEpiDtoObservacionesRequest: {
            observaciones?: string;
        };
        EntregaEpiDtoResponse: {
            numeroSerie?: string;
            observaciones?: string;
            /** Format: int32 */
            cantidad?: number;
            accion?: components["schemas"]["AccionEntregaEpiEnum"];
            fecha?: string;
            /** Format: int32 */
            idEntregaEpi?: number;
            responsable?: string;
        };
        /** @enum {string} */
        EspecificidadEnum: EspecificidadEnum;
        /** @enum {string} */
        EstadoEpiEnum: EstadoEpiEnum;
        /** @enum {string} */
        EstadoFormacionEnum: EstadoFormacionEnum;
        /** @enum {string} */
        EstadoGestionEnum: EstadoGestionEnum;
        EstadoGestionFormacionEmpleadoDto: {
            estadoGestion?: components["schemas"]["EstadoGestionFormacionEnum"];
        };
        /** @enum {string} */
        EstadoGestionFormacionEnum: EstadoGestionFormacionEnum;
        /** @enum {string} */
        EstadoGestionInformacionEnum: EstadoGestionInformacionEnum;
        EstadoInformacionDtoResponse: {
            estado?: components["schemas"]["EstadoGestionInformacionEnum"];
        };
        EvaluacionActividadDtoRequest: {
            fecha: string;
            /** Format: int32 */
            idActividadPadre?: number;
        };
        EvaluacionActividadDtoResponse: {
            evaluaciones?: components["schemas"]["EvaluacionDtoResponse"][];
            /** Format: int32 */
            idActividad?: number;
            nombreActividad?: string;
        };
        EvaluacionDtoResponse: {
            evaluador?: string;
            fecha?: string;
            /** Format: int32 */
            idEvaluacion?: number;
            /** Format: int32 */
            idUsuarioEvaluador?: number;
            /** Format: int32 */
            numeroRiesgos?: number;
            /** Format: int32 */
            revision?: number;
        };
        EvaluacionEntidadDtoResponse: {
            tipoEntidad?: components["schemas"]["TipoEvaluacionEnum"];
            /** Format: int32 */
            idEntidad?: number;
        };
        EvaluacionTablaDtoResponse: {
            evaluacion?: components["schemas"]["EvaluacionDtoResponse"];
            riesgos?: components["schemas"]["RiesgoTablaDtoResponse"][];
        };
        EvaluacionUgDtoRequest: {
            fecha: string;
            /** Format: int32 */
            idUgPadre?: number;
        };
        EvaluacionUtDtoRequest: {
            fecha: string;
            /** Format: int32 */
            idUtPadre?: number;
        };
        EvaluacionesDeInformeDtoResponse: {
            evaluaciones?: components["schemas"]["EvaluacionesDeInformeDtoResponse"][];
            /** Format: int32 */
            idEntidad?: number;
            /** Format: int32 */
            idEmpresa?: number;
            nombre?: string;
            /** Format: int32 */
            revision?: number;
            tipo?: components["schemas"]["TipoEvaluacionEnum"];
            /** Format: int32 */
            idEvaluacion?: number;
        };
        FilaTablaRiesgoDtoResponse: {
            columnas?: components["schemas"]["ColumnaTablaRiesgoDtoResponse"][];
            /** Format: int32 */
            idFila?: number;
            nombreFila?: string;
        };
        FirmaDtoRequest: {
            /** Format: binary */
            archivoFirma: string;
            nombreFirmante: string;
            dniFirmante: string;
            cargoFirmante?: string;
        };
        FormacionDtoRequest: {
            nombre: string;
            /** Format: float */
            duracion: number;
            unidadTiempo: components["schemas"]["UnidadTiempoEnum"];
            /** Format: int32 */
            idEvento: number;
            /** Format: int32 */
            idTipoFormacion: number;
        };
        FormacionDtoRequestCambiarEstado: {
            estado: components["schemas"]["EstadoFormacionEnum"];
        };
        FormacionDtoRequestUpdate: {
            nombre: string;
            /** Format: float */
            duracion: number;
            unidadTiempo: components["schemas"]["UnidadTiempoEnum"];
            /** Format: int32 */
            idTipoFormacion: number;
        };
        FormacionDtoResponse: {
            nombre: string;
            /** Format: float */
            duracion: number;
            unidadTiempo: components["schemas"]["UnidadTiempoEnum"];
            /** Format: int32 */
            idEvento: number;
            /** Format: int32 */
            idFormacion: number;
            tipoFormacion: components["schemas"]["TipoFormacionDTO_GET"];
            estado: components["schemas"]["EstadoFormacionEnum"];
        };
        FormacionDtoResponseConFechas: {
            /** Format: float */
            duracion: number;
            estado: components["schemas"]["EstadoFormacionEnum"];
            fechaDesde?: components["schemas"]["ZonedDateTime"];
            fechaHasta?: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            idEvento?: number;
            /** Format: int32 */
            idFormacion: number;
            nombre: string;
            tipoFormacion: components["schemas"]["TipoFormacionDTO_GET"];
            unidadTiempo: components["schemas"]["UnidadTiempoEnum"];
        };
        FormacionEmpleadoDtoRequest: {
            listadoInsertar: components["schemas"]["EmpleadoDTO_POST_PUT"][];
            listadoEliminar: components["schemas"]["EmpleadoDTO_POST_PUT"][];
        };
        FormacionEmpleadoDtoResponse: {
            /** Format: int32 */
            idFormacion?: number;
            listadoInsertados?: components["schemas"]["EmpleadoDTO_POST_PUT"][];
            listadoEliminados?: components["schemas"]["EmpleadoDTO_POST_PUT"][];
        };
        GrupoUsuarioDtoResponse: {
            /** Format: int32 */
            idGrupoUsuario: number;
            nombre: string;
        };
        HistoricoDtoResponse: {
            fechaDesde?: string;
            fechaHasta?: string;
            actual?: boolean;
        };
        InformacionDTO_GET: {
            estadoGestion: components["schemas"]["EstadoGestionInformacionEnum"];
            tipoInformacion: components["schemas"]["TipoInformacionDTO_GET"];
            fechaAviso: string;
            documento?: components["schemas"]["DocumentoDtoResponse"];
            ug?: components["schemas"]["UgDTO_GET"];
            ut?: components["schemas"]["UtDTO_GET"];
            actividad?: components["schemas"]["ActividadDTO_GET"];
            /** Format: int32 */
            idInformacion?: number;
        };
        InformacionDtoResponse: {
            documento?: components["schemas"]["DocumentoRelevanteDtoResponse"];
            estado?: components["schemas"]["EstadoGestionInformacionEnum"];
            /** Format: int32 */
            idInformacion?: number;
            /** Format: int32 */
            idTipoInformacion?: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idActividad?: number;
        };
        InformacionGestionDtoResponse: {
            /** Format: int32 */
            idInformacion?: number;
            estadoGestion?: components["schemas"]["EstadoGestionInformacionEnum"];
        };
        /** @enum {string} */
        InformacionVigenciaEnum: InformacionVigenciaEnum;
        InformeBaseDto: {
            dto?: unknown;
            /** Format: int32 */
            idEntorno?: number;
            /** Format: int32 */
            idUsuarioGenerador?: number;
            informe?: components["schemas"]["InformeEnum"];
            fechaSolicitud?: components["schemas"]["ZonedDateTime"];
            usuarioComunicacion?: components["schemas"]["UsuarioComunicacionDtoRequest"];
            nombre?: string;
            /** Format: int32 */
            idEmpresa?: number;
        };
        /** @enum {string} */
        InformeEnum: InformeEnum;
        InformeEvaluacionDtoRequest: {
            descripcion: string;
            fecha: string;
            nombre: string;
            incluyeEmpleados: boolean;
        };
        InformeEvaluacionDtoResponse: {
            descripcion?: string;
            fecha?: string;
            /** Format: int32 */
            idInformeEvaluacion?: number;
            nombre?: string;
            incluyeEmpleados?: boolean;
        };
        InformeEvaluacionesModificadasDtoResponse: {
            evaluacionesEliminadas?: number[];
            evaluacionesInsertadas?: number[];
            /** Format: int32 */
            idInformeEvaluacion?: number;
        };
        IniciarReconocimientoEmpleadoDto: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
            permiteComunicacionesDigitales?: boolean;
        };
        /**
         * Format: date-time
         * @example 2022-03-10T16:15:50Z
         */
        Instant: string;
        /**
         * Format: date-time
         * @example 2022-03-10T12:15:50
         */
        LocalDateTime: string;
        /**
         * Format: local-time
         * @example 13:45:30.123456789
         */
        LocalTime: string;
        MedidaPreventivaDtoRequest: {
            descripcion: string;
            nombre: string;
            tipoMedida: components["schemas"]["TipoMedidaEnum"];
            /** Format: int32 */
            idTipoDocumento?: number;
            planificada: boolean;
            /** Format: int32 */
            idProyectoTarea?: number;
            fechaInicioTarea?: string;
            fechaFinTarea?: string;
            observacionTarea?: string;
            /** Format: float */
            presupuestoTarea?: number;
        };
        MedidaPreventivaDtoResponse: {
            descripcion?: string;
            /** Format: int32 */
            idMedida?: number;
            nombre?: string;
            tipoMedida?: string;
            tipoDocumento?: components["schemas"]["TipoDocumentoBasicoDtoResponse"];
            planificada?: boolean;
        };
        MedidaPreventivaTablaDtoResponse: {
            /** Format: int32 */
            idMedida?: number;
            nombre?: string;
            tipo?: string;
            descripcion?: string;
        };
        /** @enum {string} */
        Month: Month;
        PackDocumentalDTO_GET: {
            nombre: string;
            /** Format: int32 */
            idPackDocumental?: number;
            tiposDocumentos?: components["schemas"]["TipoDocumentoDTO_GET"][];
        };
        PackDocumentalDtoRequest: {
            nombre: string;
            observaciones: string;
            aplicableA: components["schemas"]["AplicableAEnum"];
            porDefectoDisponibleNuevasUgs: boolean;
            porDefectoAsignadoNuevasUgs: boolean;
            porDefectoDisponibleNuevasUts: boolean;
            porDefectoAsignadoNuevasUts: boolean;
        };
        PackDocumentalDtoResponse: {
            nombre?: string;
            /** Format: int32 */
            idPackDocumental?: number;
            aplicableA?: components["schemas"]["AplicableAEnum"];
            observaciones?: string;
            porDefectoDisponibleNuevasUgs?: boolean;
            porDefectoAsignadoNuevasUgs?: boolean;
            porDefectoDisponibleNuevasUts?: boolean;
            porDefectoAsignadoNuevasUts?: boolean;
        };
        PackDocumentalDtoResponseList: {
            nombre: string;
            /** Format: int32 */
            idPackDocumental?: number;
            /** Format: int32 */
            totalTiposDocumentos?: number;
            /** Format: int32 */
            totalUgsDisponibles?: number;
            /** Format: int32 */
            totalUtsDisponibles?: number;
            aplicableA: components["schemas"]["AplicableAEnum"];
        };
        PackDocumentalListaPacksEmpresaDtoResponse: {
            /** Format: int32 */
            idPackDocumental?: number;
            nombre?: string;
            aplicableA?: components["schemas"]["AplicableAEnum"];
        };
        PackDocumentalPorDefectoUgDTO_GET: {
            /** Format: int32 */
            idPackDocumental: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUg: number;
            packDocumental?: components["schemas"]["PackDocumentalDTO_GET"];
            ug?: components["schemas"]["UgDtoResponse1"];
        };
        PackDocumentalPorDefectoUgDTO_POST: {
            /** Format: int32 */
            idPackDocumental: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUg: number;
        };
        PackDocumentalPorDefectoUtDTO_GET: {
            /** Format: int32 */
            idPackDocumental: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUt: number;
            packDocumental?: components["schemas"]["PackDocumentalDTO_GET"];
            ut?: components["schemas"]["UtDtoResponse1"];
        };
        PackDocumentalPorDefectoUtDTO_POST: {
            /** Format: int32 */
            idPackDocumental: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUt: number;
        };
        PackDocumentalUgDtoResponse: {
            packDocumental?: components["schemas"]["PackDocumentalListaPacksEmpresaDtoResponse"];
            ug?: components["schemas"]["UgIdDtoResponse"];
            porDefecto?: boolean;
        };
        PackDocumentalUtDtoResponse: {
            packDocumental?: components["schemas"]["PackDocumentalListaPacksEmpresaDtoResponse"];
            ut?: components["schemas"]["UtIdDtoResponse"];
            porDefecto?: boolean;
        };
        PackUgRelacionesContratacionDTO_Rabbit: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idPackDocumental?: number;
            insertados?: components["schemas"]["RelacionContratacionDtoResponse"][];
            eliminados?: components["schemas"]["RelacionContratacionDtoResponse"][];
        };
        PackUtRelacionesContratacionDTO_Rabbit: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idPackDocumental?: number;
            insertados?: components["schemas"]["RelacionContratacionDtoResponse"][];
            eliminados?: components["schemas"]["RelacionContratacionDtoResponse"][];
        };
        PdfGestionEpiTemporalDtoRequest: {
            fechaEntrega: string;
            entregas: components["schemas"]["EmpleadoDtoRequestEntregaEpi"][];
        };
        PerfilAccesoDocumentoDtoActualizacionRequest: {
            nombre: string;
            observaciones?: string;
        };
        PerfilAccesoDocumentoDtoCreacionRequest: {
            /** Format: int32 */
            idGrupoUsuario: number;
            /** Format: int32 */
            idPerfilBase?: number;
            nombre: string;
            observaciones?: string;
        };
        PerfilAccesoDocumentoDtoListadoResponse: {
            grupoUsuarios?: string;
            /** Format: int32 */
            idPerfilAccesoDocumento?: number;
            nombre?: string;
            /** Format: int32 */
            numDocsConsulta?: number;
            /** Format: int32 */
            numDocsDetalle?: number;
            /** Format: int32 */
            numDocsEdicion?: number;
            /** Format: int32 */
            numDocsValidacion?: number;
        };
        PerfilAccesoDocumentoDtoResponse: {
            /** Format: int32 */
            idPerfilAccesoDocumento?: number;
            nombre?: string;
            /** Format: int32 */
            idGrupoUsuario?: number;
            grupoUsuarios?: string;
            observaciones?: string;
        };
        PerfilAccesoDocumentoDtoResponseCreate: {
            /** Format: int32 */
            idPerfilAccesoDocumento?: number;
            nombre?: string;
            /** Format: int32 */
            idGrupoUsuario?: number;
            grupoUsuarios?: string;
            observaciones?: string;
            /** Format: int32 */
            idPerfilBase?: number;
        };
        PerfilAccesoDocumentoListadoTipoDocumentoDto: {
            asignarTipoDocPorDefecto?: boolean;
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
            tiposDocumento?: components["schemas"]["TipoDocumentoDtoPerfilResponse"][];
        };
        PerfilAccesoDocumentoTipoDocumentoDto: {
            /** Format: int32 */
            idPerfilAccesoDocumento: number;
            permisoPorDefecto: components["schemas"]["PermisoPorDefectoEnum"];
            /** Format: int32 */
            idTipoDocumento: number;
        };
        PerfilAccesoDocumentoTipoDocumentoDtoId: {
            /** Format: int32 */
            idPerfilAccesoDocumento: number;
            /** Format: int32 */
            idTipoDocumento: number;
        };
        PerfilAccesoDocumentoTipoDocumentoDtoRabbit: {
            asignarTipoDocPorDefecto?: boolean;
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
            /** Format: int32 */
            idPerfilAcceso?: number;
            tripleLista?: components["schemas"]["PerfilAccesoDocumentoTipoDocumentoDtoTripleLista"];
        };
        PerfilAccesoDocumentoTipoDocumentoDtoRequest: {
            asignarTipoDocPorDefecto: boolean;
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
            tripleLista?: components["schemas"]["PerfilAccesoDocumentoTipoDocumentoDtoTripleLista"];
        };
        PerfilAccesoDocumentoTipoDocumentoDtoTripleLista: {
            listadoInsertar: components["schemas"]["PerfilAccesoDocumentoTipoDocumentoDto"][];
            listadoModificar: components["schemas"]["PerfilAccesoDocumentoTipoDocumentoDto"][];
            listadoEliminar: components["schemas"]["PerfilAccesoDocumentoTipoDocumentoDtoId"][];
        };
        PermisoPorDefectoDtoResponse: {
            permiso?: components["schemas"]["PermisoPorDefectoEnum"];
            tienePermiso?: boolean;
        };
        /** @enum {string} */
        PermisoPorDefectoEnum: PermisoPorDefectoEnum;
        PuestoPorDefectoEmpleadoDtoResponse: {
            porDefectoEmpleado?: boolean;
            puesto?: components["schemas"]["PuestoTrabajoDTO_GET"];
        };
        PuestoTrabajoActividadDtoResponse: {
            /** Format: int32 */
            idPuesto?: number;
            actividadesInsertar?: number[];
            actividadesEliminar?: number[];
        };
        PuestoTrabajoDTO_GET: {
            nombre: string;
            observaciones: string;
            porDefectoUg: boolean;
            porDefectoEmpleadoEnUg: boolean;
            porDefectoUt: boolean;
            porDefectoEmpleadoEnUt: boolean;
            /** Format: int32 */
            idPuesto: number;
        };
        PuestoTrabajoDTO_POST_PUT: {
            nombre: string;
            observaciones: string;
            porDefectoUg: boolean;
            porDefectoEmpleadoEnUg: boolean;
            porDefectoUt: boolean;
            porDefectoEmpleadoEnUt: boolean;
        };
        PuestoTrabajoEmpleadoSinEmpleadoDtoPostPut: {
            fechaDesde?: string;
            fechaHasta?: string;
            /** Format: int32 */
            idPuesto: number;
        };
        PuestoTrabajoFechasDtoResponse: {
            puesto?: components["schemas"]["PuestoTrabajoDTO_GET"];
            fechaDesde?: string;
            fechaHasta?: string;
        };
        PuestoTrabajoNumRelacionadosDtoGet: {
            nombre: string;
            observaciones: string;
            porDefectoUg: boolean;
            porDefectoEmpleadoEnUg: boolean;
            porDefectoUt: boolean;
            porDefectoEmpleadoEnUt: boolean;
            /** Format: int32 */
            idPuesto: number;
            /** Format: int32 */
            numActividades: number;
            /** Format: int32 */
            numEmpleados: number;
        };
        PuestoTrabajoUgDtoRequest: {
            /** Format: int32 */
            idPuesto: number;
            porDefectoEmpleado?: boolean;
        };
        PuestoTrabajoUtDtoRequest: {
            /** Format: int32 */
            idPuesto: number;
            porDefectoEmpleado?: boolean;
        };
        PuestosTrabajoEmpleadoDtoResponse: {
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
            listadoInsertados?: components["schemas"]["PuestoTrabajoFechasDtoResponse"][];
            listadoEliminados?: number[];
            listadoEditados?: components["schemas"]["PuestoTrabajoFechasDtoResponse"][];
        };
        PuestosTrabajoUgFechasDtoRequest: {
            /** Format: int32 */
            idPuesto: number;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            fechaDesde: string;
            fechaHasta: string;
        };
        PuestosTrabajoUtFechasDtoRequest: {
            /** Format: int32 */
            idPuesto: number;
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            fechaDesde: string;
            fechaHasta: string;
        };
        ReconocimientoConEmpleadoDTO_GET: {
            observaciones?: string;
            /** Format: int32 */
            idReconocimiento: number;
            fechaCreacion: components["schemas"]["ZonedDateTime"];
            estadoGestion: components["schemas"]["EstadoGestionEnum"];
            /** Format: int32 */
            idCalendarioLibre?: number;
            /** Format: int32 */
            idDocumento?: number;
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
        };
        ReconocimientoEmpleadoDtoResponse: {
            observaciones?: string;
            /** Format: int32 */
            idReconocimiento: number;
            fechaCreacion: components["schemas"]["ZonedDateTime"];
            estadoGestion: components["schemas"]["EstadoGestionEnum"];
            /** Format: int32 */
            idCalendarioLibre?: number;
            /** Format: int32 */
            idDocumento?: number;
        };
        ReconocimientoEmpleadoDto_put: {
            observaciones?: string;
            estadoGestion: components["schemas"]["EstadoGestionEnum"];
        };
        ReconocimientoEmpleadoEstadoDtoResponse: {
            tipoDocumento?: components["schemas"]["TipoDocumentoRequeridosDtoResponse"];
            documento?: components["schemas"]["DocumentoRelevanteDtoResponse"];
            reconocimientoObligatorio?: boolean;
            reconocimientoEnGestion?: components["schemas"]["ReconocimientoMedicoGestionDtoResponse"];
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        ReconocimientoEmpleadoIdDtoRequest: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idReconocimiento?: number;
        };
        ReconocimientoEmpleadoIdDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idReconocimiento?: number;
        };
        ReconocimientoMedicoGestionDtoResponse: {
            /** Format: int32 */
            idReconocimiento?: number;
            estadoGestion?: components["schemas"]["EstadoGestionEnum"];
        };
        RecursoMaterialDto: {
            /** Format: int32 */
            idRecursoMaterial: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        RecursoMaterialEstadoDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idRecursoMaterial?: number;
            identificador?: string;
            nombre?: string;
            estado?: components["schemas"]["DocumEstadoEnum"];
        };
        RecursoMaterialEstadoGeneralDtoResponse: {
            recursoMaterial?: components["schemas"]["RecursoMaterialEstadoDtoResponse"];
            validez?: string;
            /** Format: int32 */
            totalRequeridos?: number;
            /** Format: int32 */
            totalDocumentosOk?: number;
            /** Format: int32 */
            totalDocumentosPendientes?: number;
            /** Format: int32 */
            totalDocumentosNoValidos?: number;
            /** Format: int32 */
            diasPreaviso?: number;
        };
        RelacionContratacionDtoResponse: {
            /** Format: int32 */
            idEmpresaAporta?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idRelacion?: number;
        };
        RelacionContratacionEmpresaUgPackDtoResponse: {
            insertados?: components["schemas"]["RelacionContratacionUgPackDocumentalDtoResponse"][];
            eliminados?: components["schemas"]["RelacionContratacionUgPackDocumentalDtoResponse"][];
        };
        RelacionContratacionEmpresaUtPackDtoResponse: {
            insertados?: components["schemas"]["RelacionContratacionUtPackDocumentalDtoResponse"][];
            eliminados?: components["schemas"]["RelacionContratacionUtPackDocumentalDtoResponse"][];
        };
        RelacionContratacionPacksUgDTO_Rabbit: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresaAporta?: number;
            /** Format: int32 */
            idRelacion?: number;
            insertados?: components["schemas"]["PackDocumentalPorDefectoUgDTO_GET"][];
            eliminados?: components["schemas"]["PackDocumentalPorDefectoUgDTO_GET"][];
        };
        RelacionContratacionPacksUtDTO_Rabbit: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresaAporta?: number;
            /** Format: int32 */
            idRelacion?: number;
            insertados?: components["schemas"]["PackDocumentalPorDefectoUtDTO_GET"][];
            eliminados?: components["schemas"]["PackDocumentalPorDefectoUtDTO_GET"][];
        };
        RelacionContratacionUgPackDocumentalDtoResponse: {
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpresaAportante?: number;
            /** Format: int32 */
            idPackDocumental?: number;
        };
        RelacionContratacionUtPackDocumentalDtoResponse: {
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpresaAportante?: number;
            /** Format: int32 */
            idPackDocumental?: number;
        };
        RelacionDocumentoEmpleadosDto_Rabbit: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idDocumento?: number;
            listadoInsertar?: components["schemas"]["EmpleadoDTO_POST_PUT"][];
            listadoEliminar?: components["schemas"]["EmpleadoDTO_POST_PUT"][];
        };
        RelacionUgSituacionEspecialDtoResponse: {
            listadoInsertados?: components["schemas"]["UgSituacionEspecialDto"][];
            listadoEliminados?: components["schemas"]["UgSituacionEspecialDto"][];
        };
        RequeridoEmpleadoEspecificoEstadoDtoResponse: {
            tipoDocumento?: components["schemas"]["TipoDocumentoRequeridosDtoResponse"];
            documento?: components["schemas"]["DocumentoRelevanteDtoResponse"];
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idActividad?: number;
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        RequeridoEmpleadoSolicitantesDtoResponse: {
            ugs?: components["schemas"]["UgDtoResponse"][];
            uts?: components["schemas"]["UtDtoResponse"][];
            actividades?: components["schemas"]["ActividadDtoResponseIdNombre"][];
        };
        RequeridoEmpresaEstadoDtoResponse: {
            tipoDocumento?: components["schemas"]["TipoDocumentoRequeridosDtoResponse"];
            documento?: components["schemas"]["DocumentoRelevanteDtoResponse"];
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt?: number;
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        RequeridoEmpresaSolicitantesDtoResponse: {
            ugs?: components["schemas"]["UgDtoResponse"][];
            uts?: components["schemas"]["UtDtoResponse"][];
        };
        RequeridoEstadoDtoResponse: {
            tipoDocumento?: components["schemas"]["TipoDocumentoRequeridosDtoResponse"];
            documento?: components["schemas"]["DocumentoRelevanteDtoResponse"];
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        RequestBodyDobleListaInteger: {
            listadoInsertar: number[];
            listadoEliminar: number[];
        };
        RequestBodyDobleListaObjetoEmpleadoDTO_POST_PUTEmpleadoDTO_POST_PUT: {
            listadoInsertar: components["schemas"]["EmpleadoDTO_POST_PUT"][];
            listadoEliminar: components["schemas"]["EmpleadoDTO_POST_PUT"][];
        };
        RequestBodyDobleListaObjetoPackDocumentalPorDefectoUgDTO_POSTPackDocumentalPorDefectoUgDTO_POST: {
            listadoInsertar: components["schemas"]["PackDocumentalPorDefectoUgDTO_POST"][];
            listadoEliminar: components["schemas"]["PackDocumentalPorDefectoUgDTO_POST"][];
        };
        RequestBodyDobleListaObjetoPackDocumentalPorDefectoUtDTO_POSTPackDocumentalPorDefectoUtDTO_POST: {
            listadoInsertar: components["schemas"]["PackDocumentalPorDefectoUtDTO_POST"][];
            listadoEliminar: components["schemas"]["PackDocumentalPorDefectoUtDTO_POST"][];
        };
        RequestBodyDobleListaObjetoRecursoMaterialDtoRecursoMaterialDto: {
            listadoInsertar: components["schemas"]["RecursoMaterialDto"][];
            listadoEliminar: components["schemas"]["RecursoMaterialDto"][];
        };
        RequestBodyDobleListaObjetoSituacionEspecialEmpleadoDTO_POSTEmpleadoDTO_POST_PUT: {
            listadoInsertar: components["schemas"]["SituacionEspecialEmpleadoDTO_POST"][];
            listadoEliminar: components["schemas"]["EmpleadoDTO_POST_PUT"][];
        };
        RequestBodyDobleListaObjetoUgDTO_POST_PUTUgDTO_POST_PUT: {
            listadoInsertar: components["schemas"]["UgDTO_POST_PUT"][];
            listadoEliminar: components["schemas"]["UgDTO_POST_PUT"][];
        };
        RequestBodyDobleListaObjetoUgSituacionEspecialDtoRequestUgSituacionEspecialDtoRequest: {
            listadoInsertar: components["schemas"]["UgSituacionEspecialDtoRequest"][];
            listadoEliminar: components["schemas"]["UgSituacionEspecialDtoRequest"][];
        };
        RequestBodyDobleListaObjetoUtDTO_POST_PUTUtDTO_POST_PUT: {
            listadoInsertar: components["schemas"]["UtDTO_POST_PUT"][];
            listadoEliminar: components["schemas"]["UtDTO_POST_PUT"][];
        };
        RequestBodyDobleListaObjetoUtSituacionEspecialDtoRequestUtSituacionEspecialDtoRequest: {
            listadoInsertar: components["schemas"]["UtSituacionEspecialDtoRequest"][];
            listadoEliminar: components["schemas"]["UtSituacionEspecialDtoRequest"][];
        };
        RequestBodyTripleListaActividadIdFechasDtoRequest: {
            listadoInsertar: components["schemas"]["ActividadIdFechasDtoRequest"][];
            listadoModificar: components["schemas"]["ActividadIdFechasDtoRequest"][];
            listadoEliminar: number[];
        };
        RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto: {
            listadoInsertar: components["schemas"]["EmpleadoFechaDto"][];
            listadoModificar: components["schemas"]["EmpleadoFechaDto"][];
            listadoEliminar: components["schemas"]["EmpleadoIdDto"][];
        };
        RequestBodyTripleListaObjetoPuestosTrabajoUgFechasDtoRequestUgPuestoTrabajoDtoRequestRelacionEmpleado: {
            listadoInsertar: components["schemas"]["PuestosTrabajoUgFechasDtoRequest"][];
            listadoModificar: components["schemas"]["PuestosTrabajoUgFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["UgPuestoTrabajoDtoRequestRelacionEmpleado"][];
        };
        RequestBodyTripleListaObjetoPuestosTrabajoUtFechasDtoRequestUtPuestoTrabajoDtoRequestRelacionEmpleado: {
            listadoInsertar: components["schemas"]["PuestosTrabajoUtFechasDtoRequest"][];
            listadoModificar: components["schemas"]["PuestosTrabajoUtFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["UtPuestoTrabajoDtoRequestRelacionEmpleado"][];
        };
        RequestBodyTripleListaObjetoSituacionEspecialUgFechasDtoRequestUgSituacionEspecialDto: {
            listadoInsertar: components["schemas"]["SituacionEspecialUgFechasDtoRequest"][];
            listadoModificar: components["schemas"]["SituacionEspecialUgFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["UgSituacionEspecialDto"][];
        };
        RequestBodyTripleListaObjetoUgActividadDtoRequestFechasRelacionEmpleadoUgActividadDtoRequestRelacionEmpleado: {
            listadoInsertar: components["schemas"]["UgActividadDtoRequestFechasRelacionEmpleado"][];
            listadoModificar: components["schemas"]["UgActividadDtoRequestFechasRelacionEmpleado"][];
            listadoEliminar: components["schemas"]["UgActividadDtoRequestRelacionEmpleado"][];
        };
        RequestBodyTripleListaObjetoUgActividadDtoRequestUgDTO: {
            listadoInsertar: components["schemas"]["UgActividadDtoRequest"][];
            listadoModificar: components["schemas"]["UgActividadDtoRequest"][];
            listadoEliminar: components["schemas"]["UgDTO"][];
        };
        RequestBodyTripleListaObjetoUgPorDefectoDtoRequestUgDtoRequest: {
            listadoInsertar: components["schemas"]["UgPorDefectoDtoRequest"][];
            listadoModificar: components["schemas"]["UgPorDefectoDtoRequest"][];
            listadoEliminar: components["schemas"]["UgDtoRequest"][];
        };
        RequestBodyTripleListaObjetoUgPuestoTrabajoDtoRequestUgPuestoTrabajoDtoRequestEliminar: {
            listadoInsertar: components["schemas"]["UgPuestoTrabajoDtoRequest"][];
            listadoModificar: components["schemas"]["UgPuestoTrabajoDtoRequest"][];
            listadoEliminar: components["schemas"]["UgPuestoTrabajoDtoRequestEliminar"][];
        };
        RequestBodyTripleListaObjetoUtActividadDtoRequestFechasRelacionEmpleadoUtActividadDtoRequestRelacionEmpleado: {
            listadoInsertar: components["schemas"]["UtActividadDtoRequestFechasRelacionEmpleado"][];
            listadoModificar: components["schemas"]["UtActividadDtoRequestFechasRelacionEmpleado"][];
            listadoEliminar: components["schemas"]["UtActividadDtoRequestRelacionEmpleado"][];
        };
        RequestBodyTripleListaObjetoUtActividadDtoRequestUtDto: {
            listadoInsertar: components["schemas"]["UtActividadDtoRequest"][];
            listadoModificar: components["schemas"]["UtActividadDtoRequest"][];
            listadoEliminar: components["schemas"]["UtDto"][];
        };
        RequestBodyTripleListaObjetoUtPorDefectoDtoRequestUtDto: {
            listadoInsertar: components["schemas"]["UtPorDefectoDtoRequest"][];
            listadoModificar: components["schemas"]["UtPorDefectoDtoRequest"][];
            listadoEliminar: components["schemas"]["UtDto"][];
        };
        RequestBodyTripleListaObjetoUtPuestoTrabajoDtoRequestUtPuestoTrabajoDtoRequestEliminar: {
            listadoInsertar: components["schemas"]["UtPuestoTrabajoDtoRequest"][];
            listadoModificar: components["schemas"]["UtPuestoTrabajoDtoRequest"][];
            listadoEliminar: components["schemas"]["UtPuestoTrabajoDtoRequestEliminar"][];
        };
        RequestBodyTripleListaObjetoUtSituacionEspecialIdFechasDtoRequestUtSituacionEspecialIdDtoRequest: {
            listadoInsertar: components["schemas"]["UtSituacionEspecialIdFechasDtoRequest"][];
            listadoModificar: components["schemas"]["UtSituacionEspecialIdFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["UtSituacionEspecialIdDtoRequest"][];
        };
        RequestBodyTripleListaPuestoTrabajoEmpleadoSinEmpleadoDtoPostPut: {
            listadoInsertar: components["schemas"]["PuestoTrabajoEmpleadoSinEmpleadoDtoPostPut"][];
            listadoModificar: components["schemas"]["PuestoTrabajoEmpleadoSinEmpleadoDtoPostPut"][];
            listadoEliminar: number[];
        };
        RequestBodyTripleListaPuestoTrabajoUgDtoRequest: {
            listadoInsertar: components["schemas"]["PuestoTrabajoUgDtoRequest"][];
            listadoModificar: components["schemas"]["PuestoTrabajoUgDtoRequest"][];
            listadoEliminar: number[];
        };
        RequestBodyTripleListaPuestoTrabajoUtDtoRequest: {
            listadoInsertar: components["schemas"]["PuestoTrabajoUtDtoRequest"][];
            listadoModificar: components["schemas"]["PuestoTrabajoUtDtoRequest"][];
            listadoEliminar: number[];
        };
        RequestBodyTripleListaSituacionEspecialTipoDocumentoDTO_POST: {
            listadoInsertar: components["schemas"]["SituacionEspecialTipoDocumentoDTO_POST"][];
            listadoModificar: components["schemas"]["SituacionEspecialTipoDocumentoDTO_POST"][];
            listadoEliminar: number[];
        };
        RequestBodyTripleListaUgOrUtActividadDtoRequest: {
            listadoInsertar: components["schemas"]["UgOrUtActividadDtoRequest"][];
            listadoModificar: components["schemas"]["UgOrUtActividadDtoRequest"][];
            listadoEliminar: number[];
        };
        RequestBodyTripleListaUgPackDocumentalPorDefectoDtoRequest: {
            listadoInsertar: components["schemas"]["UgPackDocumentalPorDefectoDtoRequest"][];
            listadoModificar: components["schemas"]["UgPackDocumentalPorDefectoDtoRequest"][];
            listadoEliminar: number[];
        };
        RequestBodyTripleListaUtPackDocumentalPorDefectoDtoRequest: {
            listadoInsertar: components["schemas"]["UtPackDocumentalPorDefectoDtoRequest"][];
            listadoModificar: components["schemas"]["UtPackDocumentalPorDefectoDtoRequest"][];
            listadoEliminar: number[];
        };
        ReservaCitaDtoRequest: {
            idReconocimientos?: components["schemas"]["ReconocimientoEmpleadoIdDtoRequest"][];
            /** Format: int32 */
            idEvento?: number;
        };
        ReservaCitaDtoResponse: {
            /** Format: int32 */
            idEvento?: number;
            /** Format: int32 */
            idEmpresa?: number;
            reconocimientos?: components["schemas"]["ReconocimientoEmpleadoIdDtoResponse"][];
        };
        ResumenActividadDtoResponse: {
            /** Format: int32 */
            idActividad?: number;
            nombre?: string;
        };
        ResumenPuestoTrabajoDtoResponse: {
            /** Format: int32 */
            idPuesto?: number;
            nombre?: string;
        };
        RiesgoDtoRequest: {
            /** Format: int32 */
            idTipoRiesgo: number;
        };
        RiesgoDtoResponse: {
            /** Format: int32 */
            idEvaluacion?: number;
            /** Format: int32 */
            idRiesgo?: number;
            /** Format: int32 */
            idTipoRiesgo?: number;
        };
        RiesgoTablaDtoResponse: {
            causas?: components["schemas"]["CausaTablaDtoResponse"][];
            codigo?: string;
            /** Format: int32 */
            idRiesgo?: number;
            nombre?: string;
        };
        SituacionEspecialDTO_GET: {
            nombre: string;
            aplicaSubcontrata: boolean;
            soloPuedeAsignar: boolean;
            preguntaAsignacion: boolean;
            pregunta: string;
            observaciones: string;
            /** Format: int32 */
            idSituacion?: number;
            indefinida?: boolean;
            /** Format: int32 */
            validez?: number;
            tipoValidez?: components["schemas"]["TipoValidezEnum"];
            porDefectoUg?: boolean;
            porDefectoUt?: boolean;
        };
        SituacionEspecialDTO_POST_PUT: {
            nombre: string;
            aplicaSubcontrata: boolean;
            soloPuedeAsignar: boolean;
            preguntaAsignacion: boolean;
            pregunta: string;
            observaciones: string;
            indefinida: boolean;
            porDefectoUg: boolean;
            porDefectoUt: boolean;
            /** Format: int32 */
            validez?: number;
            tipoValidez?: components["schemas"]["TipoValidezEnum"];
        };
        SituacionEspecialEmpleadoDTO_GET: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idPersona?: number;
            nombre?: string;
            apellido1?: string;
            apellido2?: string;
            dni?: string;
            empresa?: components["schemas"]["EmpresaDtoResponse"];
            reconocimientosEmpleado?: components["schemas"]["ReconocimientoEmpleadoDtoResponse"][];
            actividades?: components["schemas"]["ActividadDTO_GET"][];
            permiteComunicacionesDigitales?: boolean;
            tieneReconocimientoObligatorio?: boolean;
            fechaFinAsignacion?: string;
        };
        SituacionEspecialEmpleadoDTO_POST: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        SituacionEspecialEmpleadoDTO_Rabbit: {
            /** Format: int32 */
            idSituacion?: number;
            empleadosInsertar?: components["schemas"]["SituacionEspecialEmpleadoDTO_POST"][];
            empleadosEliminar?: components["schemas"]["EmpleadoDTO_POST_PUT"][];
        };
        SituacionEspecialNumRelacionadosDtoGet: {
            /** Format: int32 */
            idSituacion?: number;
            nombre?: string;
            observaciones?: string;
            indefinida?: boolean;
            /** Format: int32 */
            validez?: number;
            tipoValidez?: components["schemas"]["TipoValidezEnum"];
            porDefectoUg?: boolean;
            porDefectoUt?: boolean;
            /** Format: int32 */
            numTipoDocumentosAdicionales?: number;
            /** Format: int32 */
            numTipoDocumentosEximidos?: number;
            /** Format: int32 */
            numEmpleados?: number;
        };
        SituacionEspecialTipoDocumentoDTO_GET: {
            exime: boolean;
            /** Format: int32 */
            idTipoDocumento: number;
            nombre: string;
        };
        SituacionEspecialTipoDocumentoDTO_POST: {
            exime: boolean;
            /** Format: int32 */
            idTipoDocumento: number;
        };
        SituacionEspecialTipoDocumentoDTO_Rabbit: {
            entorno?: string;
            /** Format: int32 */
            idSituacion?: number;
            tiposDocumentosInsertar?: components["schemas"]["SituacionEspecialTipoDocumentoDTO_POST"][];
            tiposDocumentosModificar?: components["schemas"]["SituacionEspecialTipoDocumentoDTO_POST"][];
            tiposDocumentosEliminar?: number[];
        };
        SituacionEspecialUgFechasDtoRequest: {
            fechaDesde: string;
            fechaHasta: string;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idSituacion: number;
        };
        SituacionesEspecialesEmpleadoDtoResponse: {
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
            listaInsertados?: components["schemas"]["SituacionEspecialDTO_GET"][];
            listaEliminados?: number[];
        };
        SolicitudNombreInformeDtoRequest: {
            nombreInforme?: string;
        };
        /** @enum {string} */
        TimeDefinition: TimeDefinition;
        TipoDocPackDocumentalDTO_Rabbit: {
            /** Format: int32 */
            idPackDocumental?: number;
            tiposDocumentosInsertar?: components["schemas"]["TipoDocumentoDTO_GET"][];
            tiposDocumentosEliminar?: components["schemas"]["TipoDocumentoDTO_GET"][];
        };
        TipoDocumentoActividadDTO_Rabbit: {
            /** Format: int32 */
            idActividad?: number;
            tiposDocumentosInsertar?: number[];
            tiposDocumentosEliminar?: number[];
        };
        TipoDocumentoBasicoDtoResponse: {
            /** Format: int32 */
            idTipoDocumento: number;
            nombre: string;
        };
        TipoDocumentoCriterioDto: {
            /** Format: int32 */
            idTipoDocumentoCriterioValidacion: number;
            textoCriterioValidacion: string;
            visibleUsuarioInterno: boolean;
        };
        TipoDocumentoCriterioDtoPost: {
            textoCriterioValidacion: string;
            visibleUsuarioInterno: boolean;
        };
        TipoDocumentoCriterioDtoResponse: {
            /** Format: int32 */
            idTipoDocumentoCriterioValidacion?: number;
            textoCriterioValidacion?: string;
            visibleUsuarioInterno?: boolean;
        };
        TipoDocumentoCriterioRequest: {
            listadoInsertar: components["schemas"]["TipoDocumentoCriterioDtoPost"][];
            listadoEliminar: number[];
            listadoEditar: components["schemas"]["TipoDocumentoCriterioDto"][];
        };
        TipoDocumentoCriterioResponse: {
            listadoInsertar: components["schemas"]["TipoDocumentoCriterioDto"][];
            listadoModificar: components["schemas"]["TipoDocumentoCriterioDto"][];
            listadoEliminar: components["schemas"]["TipoDocumentoCriterioDto"][];
            /** Format: int32 */
            idTipoDocumento?: number;
        };
        TipoDocumentoDTO_GET: {
            nombre: string;
            tipoDocumentoUniversal?: components["schemas"]["TipoDocumentoUniversalDtoResponse"];
            /** Format: int32 */
            diasValidez: number;
            adjuntoObligatorio: boolean;
            /** Format: int32 */
            diasCarencia: number;
            /** Format: int32 */
            diasPreaviso: number;
            afectaAcceso: boolean;
            indefinido: boolean;
            aplicableA: components["schemas"]["AplicableAEnum"];
            codMetabuzon: string;
            especificidad: components["schemas"]["EspecificidadEnum"];
            tipo?: components["schemas"]["TipoEnum"];
            firmaRequerida?: boolean;
            /** Format: int32 */
            idTipoDocumento?: number;
        };
        TipoDocumentoDtoPerfilResponse: {
            /** Format: int32 */
            idTipoDocumento?: number;
            nombre?: string;
            permiso?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        TipoDocumentoDtoRequest: {
            adjuntoObligatorio: boolean;
            aplicableA: components["schemas"]["AplicableAEnum"];
            codMetabuzon?: string;
            /** Format: int32 */
            idTipoDocumentoUniversal?: number;
            indefinido: boolean;
            nombre: string;
            firmaRequerida: boolean;
            especificidad: components["schemas"]["EspecificidadEnum"];
            /** Format: int32 */
            validez?: number;
            /** Format: int32 */
            diasPreaviso?: number;
            obligatorio: boolean;
            departamentoArea?: components["schemas"]["DepartamentoAreaEnum"];
            tipo?: components["schemas"]["TipoEnum"];
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoEnum"];
            tipoDocumentoInformatizado?: components["schemas"]["TipoDocumentoInformatizadoEnum"];
        };
        TipoDocumentoDtoResponse: {
            /** Format: int32 */
            idTipoDocumento?: number;
            adjuntoObligatorio?: boolean;
            aplicableA?: components["schemas"]["AplicableAEnum"];
            codMetabuzon?: string;
            tipoDocumentoUniversal?: components["schemas"]["TipoDocumentoUniversalDtoResponse"];
            indefinido?: boolean;
            nombre?: string;
            firmaRequerida?: boolean;
            especificidad?: components["schemas"]["EspecificidadEnum"];
            /** Format: int32 */
            validez?: number;
            /** Format: int32 */
            diasPreaviso?: number;
            obligatorio?: boolean;
            departamentoArea?: components["schemas"]["DepartamentoAreaEnum"];
            tipo?: components["schemas"]["TipoEnum"];
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoEnum"];
            tipoDocumentoInformatizado?: components["schemas"]["TipoDocumentoInformatizadoEnum"];
            tiposDocumentoRelacionados?: number[];
            criteriosValidacion?: components["schemas"]["TipoDocumentoCriterioDto"][];
        };
        TipoDocumentoDtoResponseList: {
            /** Format: int32 */
            idTipoDocumento?: number;
            nombre?: string;
            departamentoArea?: components["schemas"]["DepartamentoAreaEnum"];
            tipo?: components["schemas"]["TipoEnum"];
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoEnum"];
            especificidad?: components["schemas"]["EspecificidadEnum"];
            obligatorio?: boolean;
            /** Format: int32 */
            diasPreaviso?: number;
            aplicableA?: components["schemas"]["AplicableAEnum"];
            tipoDocumentoInformatizado?: components["schemas"]["TipoDocumentoInformatizadoEnum"];
        };
        TipoDocumentoDtoResponseListaRequeridos: {
            /** Format: int32 */
            idTipoDocumento?: number;
            nombre?: string;
            obligatorio?: boolean;
            /** Format: int32 */
            diasPreaviso?: number;
            especificidad?: components["schemas"]["EspecificidadEnum"];
        };
        TipoDocumentoDtoResponseListaRequeridosEmpresa: {
            tipoDocumento?: components["schemas"]["TipoDocumentoDtoResponseListaRequeridos"];
            documentoRelevante?: components["schemas"]["DocumentoRelevanteDtoResponseLista"];
            ugs?: components["schemas"]["UgDtoResponseIdNombre"][];
            uts?: components["schemas"]["UtDtoResponseIdNombre"][];
        };
        TipoDocumentoDtoResponseListaRequeridosRecursoMaterial: {
            tipoDocumento?: components["schemas"]["TipoDocumentoDtoResponseListaRequeridos"];
            documentoRelevante?: components["schemas"]["DocumentoRelevanteDtoResponseLista"];
        };
        TipoDocumentoEntidadesEspecificasDtoResponse: {
            ugs?: components["schemas"]["UgAdjuntosInfoDtoResponse"][];
            uts?: components["schemas"]["UtAdjuntosInfoDtoResponse"][];
            actividades?: components["schemas"]["ActividadAdjuntosInfoDtoResponse"][];
        };
        /** @enum {string} */
        TipoDocumentoInformatizadoEnum: TipoDocumentoInformatizadoEnum;
        TipoDocumentoRelacionadoDtoResponse: {
            /** Format: int32 */
            idTipoDocumento?: number;
            listadoInsertados?: number[];
            listadoEliminados?: number[];
        };
        TipoDocumentoRequeridosDtoResponse: {
            /** Format: int32 */
            idTipoDocumento?: number;
            nombreTipoDocumento?: string;
            obligatorio?: boolean;
            /** Format: int32 */
            totalSolicitantes?: number;
            /** Format: int32 */
            diasPreaviso?: number;
            especificidad?: components["schemas"]["EspecificidadEnum"];
        };
        TipoDocumentoUniversalDtoResponse: {
            /** Format: int32 */
            idTipoDocumentoUniversal?: number;
            nombre?: string;
            aplicableA?: components["schemas"]["AplicableAEnum"];
        };
        /** @enum {string} */
        TipoEnum: TipoEnum;
        /** @enum {string} */
        TipoEpiCategoriaEnum: TipoEpiCategoriaEnum;
        TipoEpiDtoRequest: {
            codigo?: string;
            nombre: string;
            parteCuerpo: components["schemas"]["TipoEpiParteCuerpoEnum"];
            categoria: components["schemas"]["TipoEpiCategoriaEnum"];
            normas?: string[];
            requiereNumeroSerie: boolean;
            /** Format: int32 */
            periodicidadValor?: number;
            periodicidadUnidad: components["schemas"]["UnidadTiempoEnum"];
            /** Format: int32 */
            validezValor?: number;
            validezUnidad: components["schemas"]["UnidadTiempoEnum"];
        };
        TipoEpiDtoResponse: {
            /** Format: int32 */
            idTipoEpi?: number;
            codigo?: string;
            nombre?: string;
            parteCuerpo?: components["schemas"]["TipoEpiParteCuerpoEnum"];
            categoria?: components["schemas"]["TipoEpiCategoriaEnum"];
            normas?: string[];
            requiereNumeroSerie?: boolean;
            /** Format: int32 */
            periodicidadValor?: number;
            periodicidadUnidad?: components["schemas"]["UnidadTiempoEnum"];
            /** Format: int32 */
            validezValor?: number;
            validezUnidad?: components["schemas"]["UnidadTiempoEnum"];
            sinRevision?: boolean;
            validezIndefinida?: boolean;
        };
        /** @enum {string} */
        TipoEpiParteCuerpoEnum: TipoEpiParteCuerpoEnum;
        /** @enum {string} */
        TipoEvaluacionEnum: TipoEvaluacionEnum;
        TipoFormacionDTO_GET: {
            activo?: boolean;
            /** Format: int32 */
            idTipoFormacion: number;
            tipoDocumento: components["schemas"]["TipoDocumentoDTO_GET"];
        };
        TipoFormacionDTO_POST_PUT: {
            activo?: boolean;
        };
        TipoFormacionEstadoDtoResponse: {
            tipoDocumento?: components["schemas"]["TipoDocumentoRequeridosDtoResponse"];
            documento?: components["schemas"]["DocumentoRelevanteDtoResponse"];
            estadoFormacionGestion?: components["schemas"]["EstadoGestionFormacionEnum"];
            requerida?: boolean;
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        TipoInformacionDTO_GET: {
            tipoDocumento: components["schemas"]["TipoDocumentoDTO_GET"];
            /** Format: int32 */
            idTipoInformacion: number;
        };
        TipoInformacionEstadoDtoResponse: {
            tipoDocumento?: components["schemas"]["TipoDocumentoRequeridosDtoResponse"];
            documento?: components["schemas"]["DocumentoRelevanteDtoResponse"];
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idActividad?: number;
            informacionGestion?: components["schemas"]["InformacionGestionDtoResponse"];
            permisoPorDefecto?: components["schemas"]["PermisoPorDefectoEnum"];
        };
        TipoInformacionSolicitantesDTO_GET: {
            tipoDocumento: components["schemas"]["TipoDocumentoDTO_GET"];
            /** Format: int32 */
            idTipoInformacion: number;
            ugs?: components["schemas"]["UgDTO_GET"][];
            uts?: components["schemas"]["UtDTO_GET"][];
            actividades?: components["schemas"]["ActividadDTO_GET"][];
        };
        /** @enum {string} */
        TipoMedidaEnum: TipoMedidaEnum;
        TipoMedidaPreventivaDtoResponse: {
            codigo?: string;
            nombre?: string;
        };
        TipoReconocimientoMedicoDTO: {
            /** Format: int32 */
            idTipoDocumento: number;
        };
        TipoRecursoMaterialTipoDocumentoDTO_Rabbit: {
            /** Format: int32 */
            idTipoRecursoMaterial?: number;
            tiposDocumentosInsertar?: number[];
            tiposDocumentosEliminar?: number[];
        };
        TipoRiesgoDtoResponse: {
            codigo?: string;
            /** Format: int32 */
            idTipoRiesgo?: number;
            nombre?: string;
        };
        /** @enum {string} */
        TipoSolicitudAltaEnum: TipoSolicitudAltaEnum;
        /** @enum {string} */
        TipoValidezEnum: TipoValidezEnum;
        UgActividadDto: {
            /** Format: int32 */
            idActividad: number;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            porDefectoEmpleado?: boolean;
        };
        UgActividadDtoRabbitResponse: {
            listadoEliminados?: components["schemas"]["UgActividadDto"][];
            listadoInsertados?: components["schemas"]["UgActividadDto"][];
            listadoModificados?: components["schemas"]["UgActividadDto"][];
        };
        UgActividadDtoRequest: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            porDefectoEmpleado?: boolean;
        };
        UgActividadDtoRequestFechasRelacionEmpleado: {
            /** Format: int32 */
            idActividad: number;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            fechaDesde: string;
            fechaHasta: string;
        };
        UgActividadDtoRequestRelacionEmpleado: {
            /** Format: int32 */
            idActividad: number;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UgActividadDtoResponse: {
            ug?: components["schemas"]["UgDTO_GET"];
            actividad?: components["schemas"]["ActividadDTO_GET"];
            porDefectoEmpleado?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UgActividadRelContratacionEmpleadoDto: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idActividad?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
        };
        UgActividadRelContratacionEmpleadoDtoResponse: {
            listadoEliminados?: components["schemas"]["UgActividadRelContratacionEmpleadoDto"][];
            listadoInsertados?: components["schemas"]["UgActividadRelContratacionEmpleadoFechasDtoResponse"][];
            listadoModificados?: components["schemas"]["UgActividadRelContratacionEmpleadoFechasDtoResponse"][];
        };
        UgActividadRelContratacionEmpleadoFechasDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idActividad?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UgAdjuntosInfoDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            nombre?: string;
            /** Format: int32 */
            idEmpresa?: number;
            adjuntos?: components["schemas"]["AdjuntoInfoDtoResponse"][];
        };
        UgDTO: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UgDTO_GET: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            nombre: string;
        };
        UgDTO_POST_PUT: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UgDtoRequest: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UgDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            nombre?: string;
        };
        UgDtoResponse1: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            nivel?: number;
            /** Format: int32 */
            idTipoUg?: number;
            ugs?: components["schemas"]["UgDtoResponse1"][];
            nombre?: string;
            /** Format: int32 */
            idUgPadre?: number;
            observaciones?: string;
            porDefectoEmpleado?: boolean;
            porDefectoRecurso?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
            tieneUgsHijas?: boolean;
            porDefectoUsuario?: boolean;
            porDefectoEmpresa?: boolean;
            zonaHoraria?: components["schemas"]["ZoneId"];
            /** Format: int32 */
            idTipoEstructura?: number;
        };
        UgDtoResponseIdNombre: {
            /** Format: int32 */
            idUg?: number;
            nombre?: string;
            /** Format: int32 */
            idEmpresa?: number;
        };
        UgIdDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
        };
        UgIdNombreRecursivoDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            nombre?: string;
            /** Format: int32 */
            idEmpresa?: number;
            ugs?: components["schemas"]["UgIdNombreRecursivoDtoResponse"][];
        };
        UgOrUtActividadDtoRequest: {
            /** Format: int32 */
            idActividad: number;
            porDefecto?: boolean;
        };
        UgPackDocumentalPorDefectoDTO_Rabbit: {
            ugPacksDocumentalesInsertados?: components["schemas"]["UgPackDocumentalPorDefectoDtoResponse"][];
            ugPacksDocumentalesEliminados?: components["schemas"]["UgPackDocumentalPorDefectoDtoResponse"][];
            ugPacksDocumentalesEditados?: components["schemas"]["UgPackDocumentalPorDefectoDtoResponse"][];
        };
        UgPackDocumentalPorDefectoDtoRequest: {
            /** Format: int32 */
            idPack: number;
            porDefecto: boolean;
            aplicarEnRelacionesExistentes: boolean;
        };
        UgPackDocumentalPorDefectoDtoResponse: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idPack: number;
            porDefecto: boolean;
            aplicarEnRelacionesExistentes: boolean;
        };
        UgPorDefectoDtoRequest: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            porDefecto?: boolean;
            aplicarEnRelacionesExistentes?: boolean;
        };
        UgPorDefectoDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            nombre?: string;
            porDefecto?: boolean;
        };
        UgPorDefectoEmpleadoDtoResponse: {
            porDefectoEmpleado?: boolean;
            ug?: components["schemas"]["UgDTO_GET"];
        };
        UgPuestoDtoResponse: {
            ug?: components["schemas"]["UgDTO_GET"];
            puesto?: components["schemas"]["PuestoTrabajoDTO_GET"];
            porDefectoEmpleado?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UgPuestoTrabajoDtoRabbit: {
            listadoEliminados?: components["schemas"]["UgPuestoTrabajoDtoResponse"][];
            listadoInsertados?: components["schemas"]["UgPuestoTrabajoDtoResponse"][];
            listadoModificados?: components["schemas"]["UgPuestoTrabajoDtoResponse"][];
        };
        UgPuestoTrabajoDtoRequest: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
            porDefectoEmpleado?: boolean;
        };
        UgPuestoTrabajoDtoRequestEliminar: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UgPuestoTrabajoDtoRequestRelacionEmpleado: {
            /** Format: int32 */
            idPuesto: number;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UgPuestoTrabajoDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idPuesto?: number;
            porDefectoEmpleado?: boolean;
        };
        UgPuestoTrabajoRelContratacionEmpleadoDto: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idPuesto?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
        };
        UgPuestoTrabajoRelContratacionEmpleadoDtoResponse: {
            listadoEliminados?: components["schemas"]["UgPuestoTrabajoRelContratacionEmpleadoDto"][];
            listadoInsertados?: components["schemas"]["UgPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse"][];
            listadoModificados?: components["schemas"]["UgPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse"][];
        };
        UgPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idPuesto?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UgSituacionEspecialDto: {
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idSituacion: number;
        };
        UgSituacionEspecialDtoRequest: {
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUg: number;
        };
        UgSituacionEspecialDtoResponse: {
            ug?: components["schemas"]["UgDTO_GET"];
            situacionEspecial?: components["schemas"]["SituacionEspecialDTO_GET"];
            porDefectoEmpleado?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UgSituacionEspecialRelContratacionEmpleadoDto: {
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idSituacion?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idUg?: number;
        };
        UgSituacionEspecialRelContratacionEmpleadoDtoResponse: {
            listadoEliminados?: components["schemas"]["UgSituacionEspecialRelContratacionEmpleadoDto"][];
            listadoInsertados?: components["schemas"]["UgSituacionEspecialRelContratacionEmpleadoFechasDtoResponse"][];
            listadoModificados?: components["schemas"]["UgSituacionEspecialRelContratacionEmpleadoFechasDtoResponse"][];
        };
        UgSituacionEspecialRelContratacionEmpleadoFechasDtoResponse: {
            fechaDesde?: string;
            fechaHasta?: string;
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpresaEmpresa?: number;
            /** Format: int32 */
            idSituacion?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idUg?: number;
        };
        /** @enum {string} */
        UnidadTiempoEnum: UnidadTiempoEnum;
        UsuarioComunicacionDtoRequest: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idRol?: number;
            /** Format: int32 */
            idUsuario?: number;
        };
        UtActividadDto: {
            /** Format: int32 */
            idActividad?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            porDefectoEmpleado?: boolean;
        };
        UtActividadDtoRabbitResponse: {
            listadoEliminados?: components["schemas"]["UtActividadDto"][];
            listadoInsertados?: components["schemas"]["UtActividadDto"][];
            listadoModificados?: components["schemas"]["UtActividadDto"][];
        };
        UtActividadDtoRequest: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            porDefectoEmpleado?: boolean;
        };
        UtActividadDtoRequestFechasRelacionEmpleado: {
            /** Format: int32 */
            idActividad: number;
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            fechaDesde: string;
            fechaHasta: string;
        };
        UtActividadDtoRequestRelacionEmpleado: {
            /** Format: int32 */
            idActividad: number;
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UtActividadDtoResponse: {
            ut?: components["schemas"]["UtDTO_GET"];
            actividad?: components["schemas"]["ActividadDTO_GET"];
            porDefectoEmpleado?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UtActividadRelContratacionEmpleadoDto: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idActividad?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
        };
        UtActividadRelContratacionEmpleadoDtoResponse: {
            listadoEliminados?: components["schemas"]["UtActividadRelContratacionEmpleadoDto"][];
            listadoInsertados?: components["schemas"]["UtActividadRelContratacionEmpleadoFechasDtoResponse"][];
            listadoModificados?: components["schemas"]["UtActividadRelContratacionEmpleadoFechasDtoResponse"][];
        };
        UtActividadRelContratacionEmpleadoFechasDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idActividad?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UtAdjuntosInfoDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            nombre?: string;
            /** Format: int32 */
            idEmpresa?: number;
            adjuntos?: components["schemas"]["AdjuntoInfoDtoResponse"][];
        };
        UtDTO_GET: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            nombre: string;
        };
        UtDTO_POST_PUT: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UtDto: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UtDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            nombre?: string;
        };
        UtDtoResponse1: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            nivel?: number;
            /** Format: int32 */
            idTipoUt?: number;
            uts?: components["schemas"]["UtDtoResponse1"][];
            nombre?: string;
            /** Format: int32 */
            idUtPadre?: number;
            observaciones?: string;
            porDefectoEmpleado?: boolean;
            porDefectoRecurso?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
            tieneUtsHijas?: boolean;
            porDefectoUsuario?: boolean;
            porDefectoEmpresa?: boolean;
            /** Format: int32 */
            idTipoEstructura?: number;
        };
        UtDtoResponseIdNombre: {
            /** Format: int32 */
            idUt?: number;
            nombre?: string;
            /** Format: int32 */
            idEmpresa?: number;
        };
        UtIdDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
        };
        UtIdNombreRecursivoDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            nombre?: string;
            /** Format: int32 */
            idEmpresa?: number;
            uts?: components["schemas"]["UtIdNombreRecursivoDtoResponse"][];
        };
        UtPackDocumentalPorDefectoDtoGet: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idPack: number;
            porDefecto: boolean;
            aplicarEnRelacionesExistentes: boolean;
        };
        UtPackDocumentalPorDefectoDtoRequest: {
            /** Format: int32 */
            idPack: number;
            porDefecto: boolean;
            aplicarEnRelacionesExistentes: boolean;
        };
        UtPackDocumentalPorDefectoDtoResponse: {
            utPacksDocumentalesInsertados?: components["schemas"]["UtPackDocumentalPorDefectoDtoGet"][];
            utPacksDocumentalesEliminados?: components["schemas"]["UtPackDocumentalPorDefectoDtoGet"][];
            utPacksDocumentalesEditados?: components["schemas"]["UtPackDocumentalPorDefectoDtoGet"][];
        };
        UtPorDefectoDtoRequest: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            porDefecto?: boolean;
            aplicarEnRelacionesExistentes?: boolean;
        };
        UtPorDefectoDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            nombre?: string;
            porDefecto?: boolean;
        };
        UtPorDefectoEmpleadoDtoResponse: {
            porDefectoEmpleado?: boolean;
            ut?: components["schemas"]["UtDTO_GET"];
        };
        UtPuestoDtoResponse: {
            ut?: components["schemas"]["UtDTO_GET"];
            puesto?: components["schemas"]["PuestoTrabajoDTO_GET"];
            porDefectoEmpleado?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UtPuestoTrabajoDtoRabbit: {
            listadoEliminados?: components["schemas"]["UtPuestoTrabajoDtoResponse"][];
            listadoInsertados?: components["schemas"]["UtPuestoTrabajoDtoResponse"][];
            listadoModificados?: components["schemas"]["UtPuestoTrabajoDtoResponse"][];
        };
        UtPuestoTrabajoDtoRequest: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            porDefectoEmpleado?: boolean;
        };
        UtPuestoTrabajoDtoRequestEliminar: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UtPuestoTrabajoDtoRequestRelacionEmpleado: {
            /** Format: int32 */
            idPuesto: number;
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        UtPuestoTrabajoDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idPuesto?: number;
            porDefectoEmpleado?: boolean;
        };
        UtPuestoTrabajoRelContratacionEmpleadoDto: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idPuesto?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
        };
        UtPuestoTrabajoRelContratacionEmpleadoDtoResponse: {
            listadoEliminados?: components["schemas"]["UtPuestoTrabajoRelContratacionEmpleadoDto"][];
            listadoInsertados?: components["schemas"]["UtPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse"][];
            listadoEditados?: components["schemas"]["UtPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse"][];
        };
        UtPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idPuesto?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idEmpleado?: number;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UtSituacionEspecialDto: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idSituacion?: number;
        };
        UtSituacionEspecialDtoRabbitResponse: {
            listadoInsertados?: components["schemas"]["UtSituacionEspecialDto"][];
            listadoEliminados?: components["schemas"]["UtSituacionEspecialDto"][];
        };
        UtSituacionEspecialDtoRequest: {
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUt: number;
        };
        UtSituacionEspecialDtoResponse: {
            ut?: components["schemas"]["UtDTO_GET"];
            situacionEspecial?: components["schemas"]["SituacionEspecialDTO_GET"];
            porDefectoEmpleado?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        UtSituacionEspecialIdDtoRequest: {
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idSituacion: number;
            /** Format: int32 */
            idUt: number;
        };
        UtSituacionEspecialIdFechasDtoRequest: {
            fechaDesde: string;
            fechaHasta: string;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idSituacion: number;
            /** Format: int32 */
            idUt: number;
        };
        UtSituacionEspecialRelContratacionEmpleadoDto: {
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idSituacion?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idUt?: number;
        };
        UtSituacionEspecialRelContratacionEmpleadoDtoResponse: {
            listadoEliminados?: components["schemas"]["UtSituacionEspecialRelContratacionEmpleadoDto"][];
            listadoInsertados?: components["schemas"]["UtSituacionEspecialRelContratacionEmpleadoFechasDtoResponse"][];
            listadoModificados?: components["schemas"]["UtSituacionEspecialRelContratacionEmpleadoFechasDtoResponse"][];
        };
        UtSituacionEspecialRelContratacionEmpleadoFechasDtoResponse: {
            fechaDesde?: string;
            fechaHasta?: string;
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idEmpresaEmpleado?: number;
            /** Format: int32 */
            idSituacion?: number;
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idUt?: number;
        };
        UtTipoEpiDtoRabbit: {
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
            idsTipoEpiInsertados?: number[];
            idsTipoEpiEliminados?: number[];
        };
        ZoneId: {
            id?: string;
            rules?: components["schemas"]["ZoneRules"];
        };
        ZoneOffset: {
            /** Format: int32 */
            totalSeconds?: number;
            rules?: components["schemas"]["ZoneRules"];
        };
        ZoneOffsetTransition: {
            /** Format: int64 */
            epochSecond?: number;
            transition?: components["schemas"]["LocalDateTime"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            offsetAfter?: components["schemas"]["ZoneOffset"];
            instant?: components["schemas"]["Instant"];
            dateTimeBefore?: components["schemas"]["LocalDateTime"];
            dateTimeAfter?: components["schemas"]["LocalDateTime"];
            duration?: components["schemas"]["Duration"];
            /** Format: int32 */
            durationSeconds?: number;
            gap?: boolean;
            overlap?: boolean;
            validOffsets?: components["schemas"]["ZoneOffset"][];
        };
        ZoneOffsetTransitionRule: {
            month?: components["schemas"]["Month"];
            /** Format: byte */
            dom?: string;
            dow?: components["schemas"]["DayOfWeek"];
            time?: components["schemas"]["LocalTime"];
            timeEndOfDay?: boolean;
            timeDefinition?: components["schemas"]["TimeDefinition"];
            standardOffset?: components["schemas"]["ZoneOffset"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            offsetAfter?: components["schemas"]["ZoneOffset"];
            /** Format: int32 */
            dayOfMonthIndicator?: number;
            dayOfWeek?: components["schemas"]["DayOfWeek"];
            localTime?: components["schemas"]["LocalTime"];
            midnightEndOfDay?: boolean;
        };
        ZoneRules: {
            standardTransitions?: number[];
            standardOffsets?: components["schemas"]["ZoneOffset"][];
            savingsInstantTransitions?: number[];
            savingsLocalTransitions?: components["schemas"]["LocalDateTime"][];
            wallOffsets?: components["schemas"]["ZoneOffset"][];
            lastRules?: components["schemas"]["ZoneOffsetTransitionRule"][];
            fixedOffset?: boolean;
            transitions?: components["schemas"]["ZoneOffsetTransition"][];
            transitionRules?: components["schemas"]["ZoneOffsetTransitionRule"][];
        };
        /**
         * Format: date-time
         * @example 2022-03-10T12:15:50-04:00
         */
        ZonedDateTime: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaAccionEntregaEpiEnum = components['schemas']['AccionEntregaEpiEnum'];
export type SchemaAceptarRechazarReconocimientoDtoRequest = components['schemas']['AceptarRechazarReconocimientoDtoRequest'];
export type SchemaActividadAdjuntosInfoDtoResponse = components['schemas']['ActividadAdjuntosInfoDtoResponse'];
export type SchemaActividadDtoGet = components['schemas']['ActividadDTO_GET'];
export type SchemaActividadDtoPostPut = components['schemas']['ActividadDTO_POST_PUT'];
export type SchemaActividadDtoResponseIdNombre = components['schemas']['ActividadDtoResponseIdNombre'];
export type SchemaActividadFechasDtoResponse = components['schemas']['ActividadFechasDtoResponse'];
export type SchemaActividadIdFechasDtoRequest = components['schemas']['ActividadIdFechasDtoRequest'];
export type SchemaActividadNumRelacionadosDtoGet = components['schemas']['ActividadNumRelacionadosDtoGet'];
export type SchemaActividadPorDefectoEmpleadoDtoResponse = components['schemas']['ActividadPorDefectoEmpleadoDtoResponse'];
export type SchemaActividadUtDtoRabbit = components['schemas']['ActividadUtDTO_Rabbit'];
export type SchemaActividadesEmpleadoDtoResponse = components['schemas']['ActividadesEmpleadoDtoResponse'];
export type SchemaAdjuntoInfoDtoResponse = components['schemas']['AdjuntoInfoDtoResponse'];
export type SchemaAplicableAEnum = components['schemas']['AplicableAEnum'];
export type SchemaArchivoDtoGet = components['schemas']['ArchivoDTO_GET'];
export type SchemaArchivoDtoGetInfo = components['schemas']['ArchivoDTO_GET_INFO'];
export type SchemaArchivoObservacionesDtoRequest = components['schemas']['ArchivoObservacionesDtoRequest'];
export type SchemaCategoriaRiesgoDtoResponse = components['schemas']['CategoriaRiesgoDtoResponse'];
export type SchemaCausaConsecuenciaEnum = components['schemas']['CausaConsecuenciaEnum'];
export type SchemaCausaDtoRequest = components['schemas']['CausaDtoRequest'];
export type SchemaCausaDtoResponse = components['schemas']['CausaDtoResponse'];
export type SchemaCausaNivelRiesgoEnum = components['schemas']['CausaNivelRiesgoEnum'];
export type SchemaCausaProbabilidadEnum = components['schemas']['CausaProbabilidadEnum'];
export type SchemaCausaTablaDtoResponse = components['schemas']['CausaTablaDtoResponse'];
export type SchemaCodigoValorDtoResponse = components['schemas']['CodigoValorDtoResponse'];
export type SchemaColumnaTablaRiesgoDtoResponse = components['schemas']['ColumnaTablaRiesgoDtoResponse'];
export type SchemaCorreoInformacionDto = components['schemas']['CorreoInformacionDto'];
export type SchemaCriterioValidacionDtoRequest = components['schemas']['CriterioValidacionDtoRequest'];
export type SchemaCriterioValidacionDtoResponse = components['schemas']['CriterioValidacionDtoResponse'];
export type SchemaDayOfWeek = components['schemas']['DayOfWeek'];
export type SchemaDepartamentoAreaEnum = components['schemas']['DepartamentoAreaEnum'];
export type SchemaDocumEstadoEnum = components['schemas']['DocumEstadoEnum'];
export type SchemaDocumMetodoInsercionEnum = components['schemas']['DocumMetodoInsercionEnum'];
export type SchemaDocumentoDtoPost = components['schemas']['DocumentoDTO_POST'];
export type SchemaDocumentoDtoPut = components['schemas']['DocumentoDTO_PUT'];
export type SchemaDocumentoDtoResponse = components['schemas']['DocumentoDtoResponse'];
export type SchemaDocumentoDtoResponseDelete = components['schemas']['DocumentoDtoResponseDelete'];
export type SchemaDocumentoHistoricoDtoGet = components['schemas']['DocumentoHistoricoDTO_GET'];
export type SchemaDocumentoRecursoMaterialDto = components['schemas']['DocumentoRecursoMaterialDto'];
export type SchemaDocumentoRecursoMaterialDtoResponse = components['schemas']['DocumentoRecursoMaterialDtoResponse'];
export type SchemaDocumentoRelevanteDtoResponse = components['schemas']['DocumentoRelevanteDtoResponse'];
export type SchemaDocumentoRelevanteDtoResponseLista = components['schemas']['DocumentoRelevanteDtoResponseLista'];
export type SchemaDocumentoVigenciaDtoResponse = components['schemas']['DocumentoVigenciaDtoResponse'];
export type SchemaDuration = components['schemas']['Duration'];
export type SchemaEmpleadoDtoGet = components['schemas']['EmpleadoDTO_GET'];
export type SchemaEmpleadoDtoPostPut = components['schemas']['EmpleadoDTO_POST_PUT'];
export type SchemaEmpleadoDtoRequestEntregaEpi = components['schemas']['EmpleadoDtoRequestEntregaEpi'];
export type SchemaEmpleadoDtoResponseListaEpis = components['schemas']['EmpleadoDtoResponseListaEpis'];
export type SchemaEmpleadoDtoResponseListaEstadoEpis = components['schemas']['EmpleadoDtoResponseListaEstadoEpis'];
export type SchemaEmpleadoEstadoDtoResponse = components['schemas']['EmpleadoEstadoDtoResponse'];
export type SchemaEmpleadoEstadoGeneralDtoResponse = components['schemas']['EmpleadoEstadoGeneralDtoResponse'];
export type SchemaEmpleadoEstadoReconocimientoDtoResponse = components['schemas']['EmpleadoEstadoReconocimientoDtoResponse'];
export type SchemaEmpleadoFechaDto = components['schemas']['EmpleadoFechaDto'];
export type SchemaEmpleadoFormacionDocumentoDtoGet = components['schemas']['EmpleadoFormacionDocumentoDtoGet'];
export type SchemaEmpleadoFormacionDtoGet = components['schemas']['EmpleadoFormacionDtoGet'];
export type SchemaEmpleadoFormacionEstadoGeneralDtoResponse = components['schemas']['EmpleadoFormacionEstadoGeneralDtoResponse'];
export type SchemaEmpleadoIdDto = components['schemas']['EmpleadoIdDto'];
export type SchemaEmpleadoInformacionDtoResponse = components['schemas']['EmpleadoInformacionDtoResponse'];
export type SchemaEmpleadoInformacionEstadoGeneralDtoResponse = components['schemas']['EmpleadoInformacionEstadoGeneralDtoResponse'];
export type SchemaEmpleadoSituacionEspecialDtoGet = components['schemas']['EmpleadoSituacionEspecialDTO_GET'];
export type SchemaEmpleadoTipoFormacionRequeridaDtoResponse = components['schemas']['EmpleadoTipoFormacionRequeridaDtoResponse'];
export type SchemaEmpresaDtoResponse = components['schemas']['EmpresaDtoResponse'];
export type SchemaEmpresaDtoResponse1 = components['schemas']['EmpresaDtoResponse1'];
export type SchemaEmpresaEstadoDtoResponse = components['schemas']['EmpresaEstadoDtoResponse'];
export type SchemaEmpresaEstadoGeneralDtoResponse = components['schemas']['EmpresaEstadoGeneralDtoResponse'];
export type SchemaEntornoDtoResponse = components['schemas']['EntornoDtoResponse'];
export type SchemaEntornoEstadoEnum = components['schemas']['EntornoEstadoEnum'];
export type SchemaEntregaEpiDtoObservacionesRequest = components['schemas']['EntregaEpiDtoObservacionesRequest'];
export type SchemaEntregaEpiDtoResponse = components['schemas']['EntregaEpiDtoResponse'];
export type SchemaEspecificidadEnum = components['schemas']['EspecificidadEnum'];
export type SchemaEstadoEpiEnum = components['schemas']['EstadoEpiEnum'];
export type SchemaEstadoFormacionEnum = components['schemas']['EstadoFormacionEnum'];
export type SchemaEstadoGestionEnum = components['schemas']['EstadoGestionEnum'];
export type SchemaEstadoGestionFormacionEmpleadoDto = components['schemas']['EstadoGestionFormacionEmpleadoDto'];
export type SchemaEstadoGestionFormacionEnum = components['schemas']['EstadoGestionFormacionEnum'];
export type SchemaEstadoGestionInformacionEnum = components['schemas']['EstadoGestionInformacionEnum'];
export type SchemaEstadoInformacionDtoResponse = components['schemas']['EstadoInformacionDtoResponse'];
export type SchemaEvaluacionActividadDtoRequest = components['schemas']['EvaluacionActividadDtoRequest'];
export type SchemaEvaluacionActividadDtoResponse = components['schemas']['EvaluacionActividadDtoResponse'];
export type SchemaEvaluacionDtoResponse = components['schemas']['EvaluacionDtoResponse'];
export type SchemaEvaluacionEntidadDtoResponse = components['schemas']['EvaluacionEntidadDtoResponse'];
export type SchemaEvaluacionTablaDtoResponse = components['schemas']['EvaluacionTablaDtoResponse'];
export type SchemaEvaluacionUgDtoRequest = components['schemas']['EvaluacionUgDtoRequest'];
export type SchemaEvaluacionUtDtoRequest = components['schemas']['EvaluacionUtDtoRequest'];
export type SchemaEvaluacionesDeInformeDtoResponse = components['schemas']['EvaluacionesDeInformeDtoResponse'];
export type SchemaFilaTablaRiesgoDtoResponse = components['schemas']['FilaTablaRiesgoDtoResponse'];
export type SchemaFirmaDtoRequest = components['schemas']['FirmaDtoRequest'];
export type SchemaFormacionDtoRequest = components['schemas']['FormacionDtoRequest'];
export type SchemaFormacionDtoRequestCambiarEstado = components['schemas']['FormacionDtoRequestCambiarEstado'];
export type SchemaFormacionDtoRequestUpdate = components['schemas']['FormacionDtoRequestUpdate'];
export type SchemaFormacionDtoResponse = components['schemas']['FormacionDtoResponse'];
export type SchemaFormacionDtoResponseConFechas = components['schemas']['FormacionDtoResponseConFechas'];
export type SchemaFormacionEmpleadoDtoRequest = components['schemas']['FormacionEmpleadoDtoRequest'];
export type SchemaFormacionEmpleadoDtoResponse = components['schemas']['FormacionEmpleadoDtoResponse'];
export type SchemaGrupoUsuarioDtoResponse = components['schemas']['GrupoUsuarioDtoResponse'];
export type SchemaHistoricoDtoResponse = components['schemas']['HistoricoDtoResponse'];
export type SchemaInformacionDtoGet = components['schemas']['InformacionDTO_GET'];
export type SchemaInformacionDtoResponse = components['schemas']['InformacionDtoResponse'];
export type SchemaInformacionGestionDtoResponse = components['schemas']['InformacionGestionDtoResponse'];
export type SchemaInformacionVigenciaEnum = components['schemas']['InformacionVigenciaEnum'];
export type SchemaInformeBaseDto = components['schemas']['InformeBaseDto'];
export type SchemaInformeEnum = components['schemas']['InformeEnum'];
export type SchemaInformeEvaluacionDtoRequest = components['schemas']['InformeEvaluacionDtoRequest'];
export type SchemaInformeEvaluacionDtoResponse = components['schemas']['InformeEvaluacionDtoResponse'];
export type SchemaInformeEvaluacionesModificadasDtoResponse = components['schemas']['InformeEvaluacionesModificadasDtoResponse'];
export type SchemaIniciarReconocimientoEmpleadoDto = components['schemas']['IniciarReconocimientoEmpleadoDto'];
export type SchemaInstant = components['schemas']['Instant'];
export type SchemaLocalDateTime = components['schemas']['LocalDateTime'];
export type SchemaLocalTime = components['schemas']['LocalTime'];
export type SchemaMedidaPreventivaDtoRequest = components['schemas']['MedidaPreventivaDtoRequest'];
export type SchemaMedidaPreventivaDtoResponse = components['schemas']['MedidaPreventivaDtoResponse'];
export type SchemaMedidaPreventivaTablaDtoResponse = components['schemas']['MedidaPreventivaTablaDtoResponse'];
export type SchemaMonth = components['schemas']['Month'];
export type SchemaPackDocumentalDtoGet = components['schemas']['PackDocumentalDTO_GET'];
export type SchemaPackDocumentalDtoRequest = components['schemas']['PackDocumentalDtoRequest'];
export type SchemaPackDocumentalDtoResponse = components['schemas']['PackDocumentalDtoResponse'];
export type SchemaPackDocumentalDtoResponseList = components['schemas']['PackDocumentalDtoResponseList'];
export type SchemaPackDocumentalListaPacksEmpresaDtoResponse = components['schemas']['PackDocumentalListaPacksEmpresaDtoResponse'];
export type SchemaPackDocumentalPorDefectoUgDtoGet = components['schemas']['PackDocumentalPorDefectoUgDTO_GET'];
export type SchemaPackDocumentalPorDefectoUgDtoPost = components['schemas']['PackDocumentalPorDefectoUgDTO_POST'];
export type SchemaPackDocumentalPorDefectoUtDtoGet = components['schemas']['PackDocumentalPorDefectoUtDTO_GET'];
export type SchemaPackDocumentalPorDefectoUtDtoPost = components['schemas']['PackDocumentalPorDefectoUtDTO_POST'];
export type SchemaPackDocumentalUgDtoResponse = components['schemas']['PackDocumentalUgDtoResponse'];
export type SchemaPackDocumentalUtDtoResponse = components['schemas']['PackDocumentalUtDtoResponse'];
export type SchemaPackUgRelacionesContratacionDtoRabbit = components['schemas']['PackUgRelacionesContratacionDTO_Rabbit'];
export type SchemaPackUtRelacionesContratacionDtoRabbit = components['schemas']['PackUtRelacionesContratacionDTO_Rabbit'];
export type SchemaPdfGestionEpiTemporalDtoRequest = components['schemas']['PdfGestionEpiTemporalDtoRequest'];
export type SchemaPerfilAccesoDocumentoDtoActualizacionRequest = components['schemas']['PerfilAccesoDocumentoDtoActualizacionRequest'];
export type SchemaPerfilAccesoDocumentoDtoCreacionRequest = components['schemas']['PerfilAccesoDocumentoDtoCreacionRequest'];
export type SchemaPerfilAccesoDocumentoDtoListadoResponse = components['schemas']['PerfilAccesoDocumentoDtoListadoResponse'];
export type SchemaPerfilAccesoDocumentoDtoResponse = components['schemas']['PerfilAccesoDocumentoDtoResponse'];
export type SchemaPerfilAccesoDocumentoDtoResponseCreate = components['schemas']['PerfilAccesoDocumentoDtoResponseCreate'];
export type SchemaPerfilAccesoDocumentoListadoTipoDocumentoDto = components['schemas']['PerfilAccesoDocumentoListadoTipoDocumentoDto'];
export type SchemaPerfilAccesoDocumentoTipoDocumentoDto = components['schemas']['PerfilAccesoDocumentoTipoDocumentoDto'];
export type SchemaPerfilAccesoDocumentoTipoDocumentoDtoId = components['schemas']['PerfilAccesoDocumentoTipoDocumentoDtoId'];
export type SchemaPerfilAccesoDocumentoTipoDocumentoDtoRabbit = components['schemas']['PerfilAccesoDocumentoTipoDocumentoDtoRabbit'];
export type SchemaPerfilAccesoDocumentoTipoDocumentoDtoRequest = components['schemas']['PerfilAccesoDocumentoTipoDocumentoDtoRequest'];
export type SchemaPerfilAccesoDocumentoTipoDocumentoDtoTripleLista = components['schemas']['PerfilAccesoDocumentoTipoDocumentoDtoTripleLista'];
export type SchemaPermisoPorDefectoDtoResponse = components['schemas']['PermisoPorDefectoDtoResponse'];
export type SchemaPermisoPorDefectoEnum = components['schemas']['PermisoPorDefectoEnum'];
export type SchemaPuestoPorDefectoEmpleadoDtoResponse = components['schemas']['PuestoPorDefectoEmpleadoDtoResponse'];
export type SchemaPuestoTrabajoActividadDtoResponse = components['schemas']['PuestoTrabajoActividadDtoResponse'];
export type SchemaPuestoTrabajoDtoGet = components['schemas']['PuestoTrabajoDTO_GET'];
export type SchemaPuestoTrabajoDtoPostPut = components['schemas']['PuestoTrabajoDTO_POST_PUT'];
export type SchemaPuestoTrabajoEmpleadoSinEmpleadoDtoPostPut = components['schemas']['PuestoTrabajoEmpleadoSinEmpleadoDtoPostPut'];
export type SchemaPuestoTrabajoFechasDtoResponse = components['schemas']['PuestoTrabajoFechasDtoResponse'];
export type SchemaPuestoTrabajoNumRelacionadosDtoGet = components['schemas']['PuestoTrabajoNumRelacionadosDtoGet'];
export type SchemaPuestoTrabajoUgDtoRequest = components['schemas']['PuestoTrabajoUgDtoRequest'];
export type SchemaPuestoTrabajoUtDtoRequest = components['schemas']['PuestoTrabajoUtDtoRequest'];
export type SchemaPuestosTrabajoEmpleadoDtoResponse = components['schemas']['PuestosTrabajoEmpleadoDtoResponse'];
export type SchemaPuestosTrabajoUgFechasDtoRequest = components['schemas']['PuestosTrabajoUgFechasDtoRequest'];
export type SchemaPuestosTrabajoUtFechasDtoRequest = components['schemas']['PuestosTrabajoUtFechasDtoRequest'];
export type SchemaReconocimientoConEmpleadoDtoGet = components['schemas']['ReconocimientoConEmpleadoDTO_GET'];
export type SchemaReconocimientoEmpleadoDtoResponse = components['schemas']['ReconocimientoEmpleadoDtoResponse'];
export type SchemaReconocimientoEmpleadoDtoPut = components['schemas']['ReconocimientoEmpleadoDto_put'];
export type SchemaReconocimientoEmpleadoEstadoDtoResponse = components['schemas']['ReconocimientoEmpleadoEstadoDtoResponse'];
export type SchemaReconocimientoEmpleadoIdDtoRequest = components['schemas']['ReconocimientoEmpleadoIdDtoRequest'];
export type SchemaReconocimientoEmpleadoIdDtoResponse = components['schemas']['ReconocimientoEmpleadoIdDtoResponse'];
export type SchemaReconocimientoMedicoGestionDtoResponse = components['schemas']['ReconocimientoMedicoGestionDtoResponse'];
export type SchemaRecursoMaterialDto = components['schemas']['RecursoMaterialDto'];
export type SchemaRecursoMaterialEstadoDtoResponse = components['schemas']['RecursoMaterialEstadoDtoResponse'];
export type SchemaRecursoMaterialEstadoGeneralDtoResponse = components['schemas']['RecursoMaterialEstadoGeneralDtoResponse'];
export type SchemaRelacionContratacionDtoResponse = components['schemas']['RelacionContratacionDtoResponse'];
export type SchemaRelacionContratacionEmpresaUgPackDtoResponse = components['schemas']['RelacionContratacionEmpresaUgPackDtoResponse'];
export type SchemaRelacionContratacionEmpresaUtPackDtoResponse = components['schemas']['RelacionContratacionEmpresaUtPackDtoResponse'];
export type SchemaRelacionContratacionPacksUgDtoRabbit = components['schemas']['RelacionContratacionPacksUgDTO_Rabbit'];
export type SchemaRelacionContratacionPacksUtDtoRabbit = components['schemas']['RelacionContratacionPacksUtDTO_Rabbit'];
export type SchemaRelacionContratacionUgPackDocumentalDtoResponse = components['schemas']['RelacionContratacionUgPackDocumentalDtoResponse'];
export type SchemaRelacionContratacionUtPackDocumentalDtoResponse = components['schemas']['RelacionContratacionUtPackDocumentalDtoResponse'];
export type SchemaRelacionDocumentoEmpleadosDtoRabbit = components['schemas']['RelacionDocumentoEmpleadosDto_Rabbit'];
export type SchemaRelacionUgSituacionEspecialDtoResponse = components['schemas']['RelacionUgSituacionEspecialDtoResponse'];
export type SchemaRequeridoEmpleadoEspecificoEstadoDtoResponse = components['schemas']['RequeridoEmpleadoEspecificoEstadoDtoResponse'];
export type SchemaRequeridoEmpleadoSolicitantesDtoResponse = components['schemas']['RequeridoEmpleadoSolicitantesDtoResponse'];
export type SchemaRequeridoEmpresaEstadoDtoResponse = components['schemas']['RequeridoEmpresaEstadoDtoResponse'];
export type SchemaRequeridoEmpresaSolicitantesDtoResponse = components['schemas']['RequeridoEmpresaSolicitantesDtoResponse'];
export type SchemaRequeridoEstadoDtoResponse = components['schemas']['RequeridoEstadoDtoResponse'];
export type SchemaRequestBodyDobleListaInteger = components['schemas']['RequestBodyDobleListaInteger'];
export type SchemaRequestBodyDobleListaObjetoEmpleadoDtoPostPutEmpleadoDtoPostPut = components['schemas']['RequestBodyDobleListaObjetoEmpleadoDTO_POST_PUTEmpleadoDTO_POST_PUT'];
export type SchemaRequestBodyDobleListaObjetoPackDocumentalPorDefectoUgDtoPostPackDocumentalPorDefectoUgDtoPost = components['schemas']['RequestBodyDobleListaObjetoPackDocumentalPorDefectoUgDTO_POSTPackDocumentalPorDefectoUgDTO_POST'];
export type SchemaRequestBodyDobleListaObjetoPackDocumentalPorDefectoUtDtoPostPackDocumentalPorDefectoUtDtoPost = components['schemas']['RequestBodyDobleListaObjetoPackDocumentalPorDefectoUtDTO_POSTPackDocumentalPorDefectoUtDTO_POST'];
export type SchemaRequestBodyDobleListaObjetoRecursoMaterialDtoRecursoMaterialDto = components['schemas']['RequestBodyDobleListaObjetoRecursoMaterialDtoRecursoMaterialDto'];
export type SchemaRequestBodyDobleListaObjetoSituacionEspecialEmpleadoDtoPostEmpleadoDtoPostPut = components['schemas']['RequestBodyDobleListaObjetoSituacionEspecialEmpleadoDTO_POSTEmpleadoDTO_POST_PUT'];
export type SchemaRequestBodyDobleListaObjetoUgDtoPostPutUgDtoPostPut = components['schemas']['RequestBodyDobleListaObjetoUgDTO_POST_PUTUgDTO_POST_PUT'];
export type SchemaRequestBodyDobleListaObjetoUgSituacionEspecialDtoRequestUgSituacionEspecialDtoRequest = components['schemas']['RequestBodyDobleListaObjetoUgSituacionEspecialDtoRequestUgSituacionEspecialDtoRequest'];
export type SchemaRequestBodyDobleListaObjetoUtDtoPostPutUtDtoPostPut = components['schemas']['RequestBodyDobleListaObjetoUtDTO_POST_PUTUtDTO_POST_PUT'];
export type SchemaRequestBodyDobleListaObjetoUtSituacionEspecialDtoRequestUtSituacionEspecialDtoRequest = components['schemas']['RequestBodyDobleListaObjetoUtSituacionEspecialDtoRequestUtSituacionEspecialDtoRequest'];
export type SchemaRequestBodyTripleListaActividadIdFechasDtoRequest = components['schemas']['RequestBodyTripleListaActividadIdFechasDtoRequest'];
export type SchemaRequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto = components['schemas']['RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto'];
export type SchemaRequestBodyTripleListaObjetoPuestosTrabajoUgFechasDtoRequestUgPuestoTrabajoDtoRequestRelacionEmpleado = components['schemas']['RequestBodyTripleListaObjetoPuestosTrabajoUgFechasDtoRequestUgPuestoTrabajoDtoRequestRelacionEmpleado'];
export type SchemaRequestBodyTripleListaObjetoPuestosTrabajoUtFechasDtoRequestUtPuestoTrabajoDtoRequestRelacionEmpleado = components['schemas']['RequestBodyTripleListaObjetoPuestosTrabajoUtFechasDtoRequestUtPuestoTrabajoDtoRequestRelacionEmpleado'];
export type SchemaRequestBodyTripleListaObjetoSituacionEspecialUgFechasDtoRequestUgSituacionEspecialDto = components['schemas']['RequestBodyTripleListaObjetoSituacionEspecialUgFechasDtoRequestUgSituacionEspecialDto'];
export type SchemaRequestBodyTripleListaObjetoUgActividadDtoRequestFechasRelacionEmpleadoUgActividadDtoRequestRelacionEmpleado = components['schemas']['RequestBodyTripleListaObjetoUgActividadDtoRequestFechasRelacionEmpleadoUgActividadDtoRequestRelacionEmpleado'];
export type SchemaRequestBodyTripleListaObjetoUgActividadDtoRequestUgDto = components['schemas']['RequestBodyTripleListaObjetoUgActividadDtoRequestUgDTO'];
export type SchemaRequestBodyTripleListaObjetoUgPorDefectoDtoRequestUgDtoRequest = components['schemas']['RequestBodyTripleListaObjetoUgPorDefectoDtoRequestUgDtoRequest'];
export type SchemaRequestBodyTripleListaObjetoUgPuestoTrabajoDtoRequestUgPuestoTrabajoDtoRequestEliminar = components['schemas']['RequestBodyTripleListaObjetoUgPuestoTrabajoDtoRequestUgPuestoTrabajoDtoRequestEliminar'];
export type SchemaRequestBodyTripleListaObjetoUtActividadDtoRequestFechasRelacionEmpleadoUtActividadDtoRequestRelacionEmpleado = components['schemas']['RequestBodyTripleListaObjetoUtActividadDtoRequestFechasRelacionEmpleadoUtActividadDtoRequestRelacionEmpleado'];
export type SchemaRequestBodyTripleListaObjetoUtActividadDtoRequestUtDto = components['schemas']['RequestBodyTripleListaObjetoUtActividadDtoRequestUtDto'];
export type SchemaRequestBodyTripleListaObjetoUtPorDefectoDtoRequestUtDto = components['schemas']['RequestBodyTripleListaObjetoUtPorDefectoDtoRequestUtDto'];
export type SchemaRequestBodyTripleListaObjetoUtPuestoTrabajoDtoRequestUtPuestoTrabajoDtoRequestEliminar = components['schemas']['RequestBodyTripleListaObjetoUtPuestoTrabajoDtoRequestUtPuestoTrabajoDtoRequestEliminar'];
export type SchemaRequestBodyTripleListaObjetoUtSituacionEspecialIdFechasDtoRequestUtSituacionEspecialIdDtoRequest = components['schemas']['RequestBodyTripleListaObjetoUtSituacionEspecialIdFechasDtoRequestUtSituacionEspecialIdDtoRequest'];
export type SchemaRequestBodyTripleListaPuestoTrabajoEmpleadoSinEmpleadoDtoPostPut = components['schemas']['RequestBodyTripleListaPuestoTrabajoEmpleadoSinEmpleadoDtoPostPut'];
export type SchemaRequestBodyTripleListaPuestoTrabajoUgDtoRequest = components['schemas']['RequestBodyTripleListaPuestoTrabajoUgDtoRequest'];
export type SchemaRequestBodyTripleListaPuestoTrabajoUtDtoRequest = components['schemas']['RequestBodyTripleListaPuestoTrabajoUtDtoRequest'];
export type SchemaRequestBodyTripleListaSituacionEspecialTipoDocumentoDtoPost = components['schemas']['RequestBodyTripleListaSituacionEspecialTipoDocumentoDTO_POST'];
export type SchemaRequestBodyTripleListaUgOrUtActividadDtoRequest = components['schemas']['RequestBodyTripleListaUgOrUtActividadDtoRequest'];
export type SchemaRequestBodyTripleListaUgPackDocumentalPorDefectoDtoRequest = components['schemas']['RequestBodyTripleListaUgPackDocumentalPorDefectoDtoRequest'];
export type SchemaRequestBodyTripleListaUtPackDocumentalPorDefectoDtoRequest = components['schemas']['RequestBodyTripleListaUtPackDocumentalPorDefectoDtoRequest'];
export type SchemaReservaCitaDtoRequest = components['schemas']['ReservaCitaDtoRequest'];
export type SchemaReservaCitaDtoResponse = components['schemas']['ReservaCitaDtoResponse'];
export type SchemaResumenActividadDtoResponse = components['schemas']['ResumenActividadDtoResponse'];
export type SchemaResumenPuestoTrabajoDtoResponse = components['schemas']['ResumenPuestoTrabajoDtoResponse'];
export type SchemaRiesgoDtoRequest = components['schemas']['RiesgoDtoRequest'];
export type SchemaRiesgoDtoResponse = components['schemas']['RiesgoDtoResponse'];
export type SchemaRiesgoTablaDtoResponse = components['schemas']['RiesgoTablaDtoResponse'];
export type SchemaSituacionEspecialDtoGet = components['schemas']['SituacionEspecialDTO_GET'];
export type SchemaSituacionEspecialDtoPostPut = components['schemas']['SituacionEspecialDTO_POST_PUT'];
export type SchemaSituacionEspecialEmpleadoDtoGet = components['schemas']['SituacionEspecialEmpleadoDTO_GET'];
export type SchemaSituacionEspecialEmpleadoDtoPost = components['schemas']['SituacionEspecialEmpleadoDTO_POST'];
export type SchemaSituacionEspecialEmpleadoDtoRabbit = components['schemas']['SituacionEspecialEmpleadoDTO_Rabbit'];
export type SchemaSituacionEspecialNumRelacionadosDtoGet = components['schemas']['SituacionEspecialNumRelacionadosDtoGet'];
export type SchemaSituacionEspecialTipoDocumentoDtoGet = components['schemas']['SituacionEspecialTipoDocumentoDTO_GET'];
export type SchemaSituacionEspecialTipoDocumentoDtoPost = components['schemas']['SituacionEspecialTipoDocumentoDTO_POST'];
export type SchemaSituacionEspecialTipoDocumentoDtoRabbit = components['schemas']['SituacionEspecialTipoDocumentoDTO_Rabbit'];
export type SchemaSituacionEspecialUgFechasDtoRequest = components['schemas']['SituacionEspecialUgFechasDtoRequest'];
export type SchemaSituacionesEspecialesEmpleadoDtoResponse = components['schemas']['SituacionesEspecialesEmpleadoDtoResponse'];
export type SchemaSolicitudNombreInformeDtoRequest = components['schemas']['SolicitudNombreInformeDtoRequest'];
export type SchemaTimeDefinition = components['schemas']['TimeDefinition'];
export type SchemaTipoDocPackDocumentalDtoRabbit = components['schemas']['TipoDocPackDocumentalDTO_Rabbit'];
export type SchemaTipoDocumentoActividadDtoRabbit = components['schemas']['TipoDocumentoActividadDTO_Rabbit'];
export type SchemaTipoDocumentoBasicoDtoResponse = components['schemas']['TipoDocumentoBasicoDtoResponse'];
export type SchemaTipoDocumentoCriterioDto = components['schemas']['TipoDocumentoCriterioDto'];
export type SchemaTipoDocumentoCriterioDtoPost = components['schemas']['TipoDocumentoCriterioDtoPost'];
export type SchemaTipoDocumentoCriterioDtoResponse = components['schemas']['TipoDocumentoCriterioDtoResponse'];
export type SchemaTipoDocumentoCriterioRequest = components['schemas']['TipoDocumentoCriterioRequest'];
export type SchemaTipoDocumentoCriterioResponse = components['schemas']['TipoDocumentoCriterioResponse'];
export type SchemaTipoDocumentoDtoGet = components['schemas']['TipoDocumentoDTO_GET'];
export type SchemaTipoDocumentoDtoPerfilResponse = components['schemas']['TipoDocumentoDtoPerfilResponse'];
export type SchemaTipoDocumentoDtoRequest = components['schemas']['TipoDocumentoDtoRequest'];
export type SchemaTipoDocumentoDtoResponse = components['schemas']['TipoDocumentoDtoResponse'];
export type SchemaTipoDocumentoDtoResponseList = components['schemas']['TipoDocumentoDtoResponseList'];
export type SchemaTipoDocumentoDtoResponseListaRequeridos = components['schemas']['TipoDocumentoDtoResponseListaRequeridos'];
export type SchemaTipoDocumentoDtoResponseListaRequeridosEmpresa = components['schemas']['TipoDocumentoDtoResponseListaRequeridosEmpresa'];
export type SchemaTipoDocumentoDtoResponseListaRequeridosRecursoMaterial = components['schemas']['TipoDocumentoDtoResponseListaRequeridosRecursoMaterial'];
export type SchemaTipoDocumentoEntidadesEspecificasDtoResponse = components['schemas']['TipoDocumentoEntidadesEspecificasDtoResponse'];
export type SchemaTipoDocumentoInformatizadoEnum = components['schemas']['TipoDocumentoInformatizadoEnum'];
export type SchemaTipoDocumentoRelacionadoDtoResponse = components['schemas']['TipoDocumentoRelacionadoDtoResponse'];
export type SchemaTipoDocumentoRequeridosDtoResponse = components['schemas']['TipoDocumentoRequeridosDtoResponse'];
export type SchemaTipoDocumentoUniversalDtoResponse = components['schemas']['TipoDocumentoUniversalDtoResponse'];
export type SchemaTipoEnum = components['schemas']['TipoEnum'];
export type SchemaTipoEpiCategoriaEnum = components['schemas']['TipoEpiCategoriaEnum'];
export type SchemaTipoEpiDtoRequest = components['schemas']['TipoEpiDtoRequest'];
export type SchemaTipoEpiDtoResponse = components['schemas']['TipoEpiDtoResponse'];
export type SchemaTipoEpiParteCuerpoEnum = components['schemas']['TipoEpiParteCuerpoEnum'];
export type SchemaTipoEvaluacionEnum = components['schemas']['TipoEvaluacionEnum'];
export type SchemaTipoFormacionDtoGet = components['schemas']['TipoFormacionDTO_GET'];
export type SchemaTipoFormacionDtoPostPut = components['schemas']['TipoFormacionDTO_POST_PUT'];
export type SchemaTipoFormacionEstadoDtoResponse = components['schemas']['TipoFormacionEstadoDtoResponse'];
export type SchemaTipoInformacionDtoGet = components['schemas']['TipoInformacionDTO_GET'];
export type SchemaTipoInformacionEstadoDtoResponse = components['schemas']['TipoInformacionEstadoDtoResponse'];
export type SchemaTipoInformacionSolicitantesDtoGet = components['schemas']['TipoInformacionSolicitantesDTO_GET'];
export type SchemaTipoMedidaEnum = components['schemas']['TipoMedidaEnum'];
export type SchemaTipoMedidaPreventivaDtoResponse = components['schemas']['TipoMedidaPreventivaDtoResponse'];
export type SchemaTipoReconocimientoMedicoDto = components['schemas']['TipoReconocimientoMedicoDTO'];
export type SchemaTipoRecursoMaterialTipoDocumentoDtoRabbit = components['schemas']['TipoRecursoMaterialTipoDocumentoDTO_Rabbit'];
export type SchemaTipoRiesgoDtoResponse = components['schemas']['TipoRiesgoDtoResponse'];
export type SchemaTipoSolicitudAltaEnum = components['schemas']['TipoSolicitudAltaEnum'];
export type SchemaTipoValidezEnum = components['schemas']['TipoValidezEnum'];
export type SchemaUgActividadDto = components['schemas']['UgActividadDto'];
export type SchemaUgActividadDtoRabbitResponse = components['schemas']['UgActividadDtoRabbitResponse'];
export type SchemaUgActividadDtoRequest = components['schemas']['UgActividadDtoRequest'];
export type SchemaUgActividadDtoRequestFechasRelacionEmpleado = components['schemas']['UgActividadDtoRequestFechasRelacionEmpleado'];
export type SchemaUgActividadDtoRequestRelacionEmpleado = components['schemas']['UgActividadDtoRequestRelacionEmpleado'];
export type SchemaUgActividadDtoResponse = components['schemas']['UgActividadDtoResponse'];
export type SchemaUgActividadRelContratacionEmpleadoDto = components['schemas']['UgActividadRelContratacionEmpleadoDto'];
export type SchemaUgActividadRelContratacionEmpleadoDtoResponse = components['schemas']['UgActividadRelContratacionEmpleadoDtoResponse'];
export type SchemaUgActividadRelContratacionEmpleadoFechasDtoResponse = components['schemas']['UgActividadRelContratacionEmpleadoFechasDtoResponse'];
export type SchemaUgAdjuntosInfoDtoResponse = components['schemas']['UgAdjuntosInfoDtoResponse'];
export type SchemaUgDto = components['schemas']['UgDTO'];
export type SchemaUgDtoGet = components['schemas']['UgDTO_GET'];
export type SchemaUgDtoPostPut = components['schemas']['UgDTO_POST_PUT'];
export type SchemaUgDtoRequest = components['schemas']['UgDtoRequest'];
export type SchemaUgDtoResponse = components['schemas']['UgDtoResponse'];
export type SchemaUgDtoResponse1 = components['schemas']['UgDtoResponse1'];
export type SchemaUgDtoResponseIdNombre = components['schemas']['UgDtoResponseIdNombre'];
export type SchemaUgIdDtoResponse = components['schemas']['UgIdDtoResponse'];
export type SchemaUgIdNombreRecursivoDtoResponse = components['schemas']['UgIdNombreRecursivoDtoResponse'];
export type SchemaUgOrUtActividadDtoRequest = components['schemas']['UgOrUtActividadDtoRequest'];
export type SchemaUgPackDocumentalPorDefectoDtoRabbit = components['schemas']['UgPackDocumentalPorDefectoDTO_Rabbit'];
export type SchemaUgPackDocumentalPorDefectoDtoRequest = components['schemas']['UgPackDocumentalPorDefectoDtoRequest'];
export type SchemaUgPackDocumentalPorDefectoDtoResponse = components['schemas']['UgPackDocumentalPorDefectoDtoResponse'];
export type SchemaUgPorDefectoDtoRequest = components['schemas']['UgPorDefectoDtoRequest'];
export type SchemaUgPorDefectoDtoResponse = components['schemas']['UgPorDefectoDtoResponse'];
export type SchemaUgPorDefectoEmpleadoDtoResponse = components['schemas']['UgPorDefectoEmpleadoDtoResponse'];
export type SchemaUgPuestoDtoResponse = components['schemas']['UgPuestoDtoResponse'];
export type SchemaUgPuestoTrabajoDtoRabbit = components['schemas']['UgPuestoTrabajoDtoRabbit'];
export type SchemaUgPuestoTrabajoDtoRequest = components['schemas']['UgPuestoTrabajoDtoRequest'];
export type SchemaUgPuestoTrabajoDtoRequestEliminar = components['schemas']['UgPuestoTrabajoDtoRequestEliminar'];
export type SchemaUgPuestoTrabajoDtoRequestRelacionEmpleado = components['schemas']['UgPuestoTrabajoDtoRequestRelacionEmpleado'];
export type SchemaUgPuestoTrabajoDtoResponse = components['schemas']['UgPuestoTrabajoDtoResponse'];
export type SchemaUgPuestoTrabajoRelContratacionEmpleadoDto = components['schemas']['UgPuestoTrabajoRelContratacionEmpleadoDto'];
export type SchemaUgPuestoTrabajoRelContratacionEmpleadoDtoResponse = components['schemas']['UgPuestoTrabajoRelContratacionEmpleadoDtoResponse'];
export type SchemaUgPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse = components['schemas']['UgPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse'];
export type SchemaUgSituacionEspecialDto = components['schemas']['UgSituacionEspecialDto'];
export type SchemaUgSituacionEspecialDtoRequest = components['schemas']['UgSituacionEspecialDtoRequest'];
export type SchemaUgSituacionEspecialDtoResponse = components['schemas']['UgSituacionEspecialDtoResponse'];
export type SchemaUgSituacionEspecialRelContratacionEmpleadoDto = components['schemas']['UgSituacionEspecialRelContratacionEmpleadoDto'];
export type SchemaUgSituacionEspecialRelContratacionEmpleadoDtoResponse = components['schemas']['UgSituacionEspecialRelContratacionEmpleadoDtoResponse'];
export type SchemaUgSituacionEspecialRelContratacionEmpleadoFechasDtoResponse = components['schemas']['UgSituacionEspecialRelContratacionEmpleadoFechasDtoResponse'];
export type SchemaUnidadTiempoEnum = components['schemas']['UnidadTiempoEnum'];
export type SchemaUsuarioComunicacionDtoRequest = components['schemas']['UsuarioComunicacionDtoRequest'];
export type SchemaUtActividadDto = components['schemas']['UtActividadDto'];
export type SchemaUtActividadDtoRabbitResponse = components['schemas']['UtActividadDtoRabbitResponse'];
export type SchemaUtActividadDtoRequest = components['schemas']['UtActividadDtoRequest'];
export type SchemaUtActividadDtoRequestFechasRelacionEmpleado = components['schemas']['UtActividadDtoRequestFechasRelacionEmpleado'];
export type SchemaUtActividadDtoRequestRelacionEmpleado = components['schemas']['UtActividadDtoRequestRelacionEmpleado'];
export type SchemaUtActividadDtoResponse = components['schemas']['UtActividadDtoResponse'];
export type SchemaUtActividadRelContratacionEmpleadoDto = components['schemas']['UtActividadRelContratacionEmpleadoDto'];
export type SchemaUtActividadRelContratacionEmpleadoDtoResponse = components['schemas']['UtActividadRelContratacionEmpleadoDtoResponse'];
export type SchemaUtActividadRelContratacionEmpleadoFechasDtoResponse = components['schemas']['UtActividadRelContratacionEmpleadoFechasDtoResponse'];
export type SchemaUtAdjuntosInfoDtoResponse = components['schemas']['UtAdjuntosInfoDtoResponse'];
export type SchemaUtDtoGet = components['schemas']['UtDTO_GET'];
export type SchemaUtDtoPostPut = components['schemas']['UtDTO_POST_PUT'];
export type SchemaUtDto = components['schemas']['UtDto'];
export type SchemaUtDtoResponse = components['schemas']['UtDtoResponse'];
export type SchemaUtDtoResponse1 = components['schemas']['UtDtoResponse1'];
export type SchemaUtDtoResponseIdNombre = components['schemas']['UtDtoResponseIdNombre'];
export type SchemaUtIdDtoResponse = components['schemas']['UtIdDtoResponse'];
export type SchemaUtIdNombreRecursivoDtoResponse = components['schemas']['UtIdNombreRecursivoDtoResponse'];
export type SchemaUtPackDocumentalPorDefectoDtoGet = components['schemas']['UtPackDocumentalPorDefectoDtoGet'];
export type SchemaUtPackDocumentalPorDefectoDtoRequest = components['schemas']['UtPackDocumentalPorDefectoDtoRequest'];
export type SchemaUtPackDocumentalPorDefectoDtoResponse = components['schemas']['UtPackDocumentalPorDefectoDtoResponse'];
export type SchemaUtPorDefectoDtoRequest = components['schemas']['UtPorDefectoDtoRequest'];
export type SchemaUtPorDefectoDtoResponse = components['schemas']['UtPorDefectoDtoResponse'];
export type SchemaUtPorDefectoEmpleadoDtoResponse = components['schemas']['UtPorDefectoEmpleadoDtoResponse'];
export type SchemaUtPuestoDtoResponse = components['schemas']['UtPuestoDtoResponse'];
export type SchemaUtPuestoTrabajoDtoRabbit = components['schemas']['UtPuestoTrabajoDtoRabbit'];
export type SchemaUtPuestoTrabajoDtoRequest = components['schemas']['UtPuestoTrabajoDtoRequest'];
export type SchemaUtPuestoTrabajoDtoRequestEliminar = components['schemas']['UtPuestoTrabajoDtoRequestEliminar'];
export type SchemaUtPuestoTrabajoDtoRequestRelacionEmpleado = components['schemas']['UtPuestoTrabajoDtoRequestRelacionEmpleado'];
export type SchemaUtPuestoTrabajoDtoResponse = components['schemas']['UtPuestoTrabajoDtoResponse'];
export type SchemaUtPuestoTrabajoRelContratacionEmpleadoDto = components['schemas']['UtPuestoTrabajoRelContratacionEmpleadoDto'];
export type SchemaUtPuestoTrabajoRelContratacionEmpleadoDtoResponse = components['schemas']['UtPuestoTrabajoRelContratacionEmpleadoDtoResponse'];
export type SchemaUtPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse = components['schemas']['UtPuestoTrabajoRelContratacionEmpleadoFechasDtoResponse'];
export type SchemaUtSituacionEspecialDto = components['schemas']['UtSituacionEspecialDto'];
export type SchemaUtSituacionEspecialDtoRabbitResponse = components['schemas']['UtSituacionEspecialDtoRabbitResponse'];
export type SchemaUtSituacionEspecialDtoRequest = components['schemas']['UtSituacionEspecialDtoRequest'];
export type SchemaUtSituacionEspecialDtoResponse = components['schemas']['UtSituacionEspecialDtoResponse'];
export type SchemaUtSituacionEspecialIdDtoRequest = components['schemas']['UtSituacionEspecialIdDtoRequest'];
export type SchemaUtSituacionEspecialIdFechasDtoRequest = components['schemas']['UtSituacionEspecialIdFechasDtoRequest'];
export type SchemaUtSituacionEspecialRelContratacionEmpleadoDto = components['schemas']['UtSituacionEspecialRelContratacionEmpleadoDto'];
export type SchemaUtSituacionEspecialRelContratacionEmpleadoDtoResponse = components['schemas']['UtSituacionEspecialRelContratacionEmpleadoDtoResponse'];
export type SchemaUtSituacionEspecialRelContratacionEmpleadoFechasDtoResponse = components['schemas']['UtSituacionEspecialRelContratacionEmpleadoFechasDtoResponse'];
export type SchemaUtTipoEpiDtoRabbit = components['schemas']['UtTipoEpiDtoRabbit'];
export type SchemaZoneId = components['schemas']['ZoneId'];
export type SchemaZoneOffset = components['schemas']['ZoneOffset'];
export type SchemaZoneOffsetTransition = components['schemas']['ZoneOffsetTransition'];
export type SchemaZoneOffsetTransitionRule = components['schemas']['ZoneOffsetTransitionRule'];
export type SchemaZoneRules = components['schemas']['ZoneRules'];
export type SchemaZonedDateTime = components['schemas']['ZonedDateTime'];
export type $defs = Record<string, never>;
export interface operations {
    getActividades: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ActividadDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0006 : Solo se puede marcar el campo porDefectoEmpleadoEnUg si se marca previamente el campo porDefectoUg
             *      - CAE_0007 : Solo se puede marcar el campo porDefectoEmpleadoEnUt si se marca previamente el campo porDefectoUt */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesConEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadDtoResponseIdNombre"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNumRelacionadosActividades: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadNumRelacionadosDtoGet"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putActividadPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ActividadDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0006 : Solo se puede marcar el campo porDefectoEmpleadoEnUg si se marca previamente el campo porDefectoUg
             *      - CAE_0007 : Solo se puede marcar el campo porDefectoEmpleadoEnUt si se marca previamente el campo porDefectoUt */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteActividadPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EvaluacionActividadDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposDocumentosPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoActividadDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposEpisPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No autorizado */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUgActividadDtoRequestUgDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgActividadDtoRabbitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUltimaRevisionPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionTablaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPorDefectoEmpleadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUtActividadDtoRequestUtDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadUtDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAdjuntoPorIdArchivo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idArchivo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdjuntoPorUuid: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCategoriasRiesgos: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriaRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCriteriosValidacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CriterioValidacionDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCriterioValidacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CriterioValidacionDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CriterioValidacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCriterioValidacionPorIdCriterioValidacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCriterioValidacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CriterioValidacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putCriterioValidacionPorIdCriterioValidacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCriterioValidacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CriterioValidacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CriterioValidacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCriterioValidacionPorIdCriterioValidacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCriterioValidacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CriterioValidacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRecalcularDocumentosRelevantes: {
        parameters: {
            query?: {
                fechaActualizacion?: string;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDocumentoPorIdDocumento: {
        parameters: {
            query?: {
                obtenerInfo?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0022 : No tiene permiso para consultar este documento */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteDocumentoPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponseDelete"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0005 : No puede eliminar un documento que no está en estado 'Pendiente'- CAE_0147: No tienes el permiso por defecto %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdjuntosPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0147: No tienes el permiso por defecto %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdjuntoPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    fileName?: string;
                    /** Format: int32 */
                    idTipoSolicitante?: number;
                    /** Format: int32 */
                    idSolicitante?: number;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0147: No tienes el permiso por defecto %s
             *      - CAE_0124: Si el parámetro %s es nulo,  %s no puede ser distinto de nulo
             *      - CAE_0136: El tipo de entidad secundaria no es de UG, UT o Actividad. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformacionAdjuntosPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0147: No tienes el permiso por defecto %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdjuntoPorIdDocumentoPorUuid: {
        parameters: {
            query?: {
                numeroPaginas?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0147: No tienes el permiso por defecto %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putCambiarEstadoPorIdEmpleadoFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleadoFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EstadoGestionFormacionEmpleadoDto"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFormacionDtoGet"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstado: {
        parameters: {
            query?: {
                idEmpresa?: number;
                idEmpresaUgUt?: number;
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaEstadoGeneralDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postDocumentoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DocumentoDTO_POST"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0017 : Si el tipo de documento es específico debe insertar idUg, idUt o idActividad
             *      - CAE_0021 : Si el documento es genérico no se puede introducir ni el idUg ni el idUt
             *      - CAE_0055 : Si el documento es genérico no se puede introducir el idActividad
             *      - CAE_0069: Si el tipo de documento no es aplicable a empleado no puede insertar idActividad
             *      - CAE_0070: El tipo de documento no está relacionado con la actividad indicada
             *      - CAE_0114 : Campo idEmpresaUg/idEmpresaUt faltante al venir informado idUg/idUt
             *      - CAE_0147: No tienes el permiso por defecto %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putDocumentoPorIdEmpresaPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DocumentoDTO_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0004 : No puede editar el documento- CAE_0147: No tienes el permiso por defecto %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoEmpleadoDTO_POST_PUTEmpleadoDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionDocumentoEmpleadosDto_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0037 : El tipo de documento debe ser aplicable a empleado
             *      - CAE_0063 : El empleado con idEmpleado %idEmpleado%, idEmpresa %idEmpresa% no pertenece a la empresa %idEmpresaDoc% */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHistoricosPorIdEmpresaPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoHistoricoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRecursosMaterialesPorIdEmpresaPorIdDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idDocumento: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoRecursoMaterialDtoRecursoMaterialDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoRecursoMaterialDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0088: La empresa del documento %1d y la del recurso material (%2d,%3d) no coinciden
             *      - CAE_0089: El tipo del documento no es requerido para este recurso material: (%1d, %2d) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postActividadesPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaActividadIdFechasDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadesEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesUgUtPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumenActividadDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricoPorIdEmpresaPorIdEmpleadoPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postGenerarPdfTemporalEntregaEpiPorIdEmpresaIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PdfGestionEpiTemporalDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int32 */
                        idTipoEntidad: number;
                        /** Format: int32 */
                        idEntidad: number;
                        /** Format: int32 */
                        idTipoEntidadSecundaria?: number;
                        /** Format: int32 */
                        idEntidadSecundaria?: number;
                        observaciones: string;
                        nombre: string;
                        /** Format: binary */
                        binario: string;
                        esCreacion?: boolean;
                        extension?: string;
                        /** Format: int32 */
                        numeroPaginas?: number;
                        /** Format: int32 */
                        idArchivo?: number;
                        uuid?: string;
                        /** Format: int32 */
                        idEntorno?: number;
                        fechaInsercion?: components["schemas"]["ZonedDateTime"];
                        fechaModificacion?: components["schemas"]["ZonedDateTime"];
                        /** Format: int32 */
                        tamano?: number;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosTrabajoPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPuestoTrabajoPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaPuestoTrabajoEmpleadoSinEmpleadoDtoPostPut"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestosTrabajoEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosTrabajoUgUtPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumenPuestoTrabajoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricosPorIdEmpresaPorIdEmpleadoPorIdPuesto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idPuesto: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoReconocimientoPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconocimientoEmpleadoEstadoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putReconocimientoPorIdEmpresaPorIdEmpleadoPorIdReconocimiento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idReconocimiento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReconocimientoEmpleadoDto_put"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconocimientoEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0031 : No se puede editar un reconocimiento empleado con el estado gestión finalizado
             *      - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricoUgPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricoUtsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricoUgsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdPuesto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idPuesto: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricoUtsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdPuesto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idPuesto: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricoUgPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdSituacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
                idSituacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricoUtsPorIdEmpresaPorIdEmpleadoPorIdRelacionPorIdSituacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
                idSituacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgActividadDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUgActividadDtoRequestFechasRelacionEmpleadoUgActividadDtoRequestRelacionEmpleado"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgActividadRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0012 : No se puede relacionar la UgActividad %s, porque no coincide con la UG de la relación de contratación de empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPuestoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoPuestosTrabajoUgFechasDtoRequestUgPuestoTrabajoDtoRequestRelacionEmpleado"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPuestoTrabajoRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0013 : No se puede relacionar la UgPuestoTrabajo %s, porque no coincide con la UG de la relación de contratación de empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsSituacionesEspecialesPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgSituacionEspecialDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsSituacionEspecialPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoSituacionEspecialUgFechasDtoRequestUgSituacionEspecialDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgSituacionEspecialRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0072: No se puede relacionar la UgSituacionEspecial %1d, porque no coincide con la UG de la relación de contratación de empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtActividadDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsActividadPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUtActividadDtoRequestFechasRelacionEmpleadoUtActividadDtoRequestRelacionEmpleado"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtActividadRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0074 : No se puede relacionar la UtActividad %s, porque no coincide con la UT de la relación de contratación de empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPuestoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsPuestoTrabajoPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoPuestosTrabajoUtFechasDtoRequestUtPuestoTrabajoDtoRequestRelacionEmpleado"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPuestoTrabajoRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0075 : No se puede relacionar la UtPuestoTrabajo %s, porque no coincide con la UT de la relación de contratación de empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsSituacionEspecialPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtSituacionEspecialDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtSituacionEspecialPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUtSituacionEspecialIdFechasDtoRequestUtSituacionEspecialIdDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtSituacionEspecialRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0073: No se puede relacionar la UtSituacionEspecial %1d, porque no coincide con la UT de la relación de contratación de empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSituacionesEspecialesPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoSituacionEspecialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSituacionesEspecialesPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionesEspecialesEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoPorIdEmpresaPorIdEmpleadoPorIdTipoDocumento: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequeridoEmpleadoEspecificoEstadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
                tipoPrl?: components["schemas"]["TipoEnum"];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequeridoEstadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHistoricosPorIdEmpresaPorIdEmpleadoPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolicitantesPorIdEmpresaPorIdEmpleadoPorIdTipoDocumento: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequeridoEmpleadoSolicitantesDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposEpisPorIdEmpleadoPorIdEmpresa: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDtoResponseListaEpis"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposEpisPorIdEmpleadoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    firmaEmpleado?: string;
                    /** Format: binary */
                    firmaResponsable?: string;
                    cargoEmpleado?: string;
                    datosResponsable?: string;
                    entrega: string;
                    enviarEmail: boolean;
                    uuidPdf: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0117: No se ha especificado un número de serie pero el tipo de epi lo requiere
             *     - CAE_0116: No se puede añadir un número de serie a una entrega donde la cantidad no es 1 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CAE_0118: No se ha encontrado el epi con id %s */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInformeEntregasTiposEpisPorIdEmpleadoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SolicitudNombreInformeDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoTiposFormacionesPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
                incluirNoRequeridas?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoFormacionEstadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoPorIdEmpresaPorIdEmpleadoPorIdTipoInformacion: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idTipoInformacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoInformacionEstadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesPorIdEmpresaPorIdEmpleadoPorIdUg: {
        parameters: {
            query: {
                idEmpresaUgUt: number;
                uts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumenActividadDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0141: No se puede pasar una Ug que no es de último nivel con lista de uts
             *      - CAE_0142: No se puede pasar una Ug que es de último nivel sin lista de uts */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosTrabajoPorIdEmpresaPorIdEmpleadoPorIdUg: {
        parameters: {
            query: {
                idEmpresaUgUt: number;
                uts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumenPuestoTrabajoDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0141: No se puede pasar una Ug que no es de último nivel con lista de uts
             *      - CAE_0142: No se puede pasar una Ug que es de último nivel sin lista de uts */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesPorIdEmpresaPorIdEmpleadoPorIdUt: {
        parameters: {
            query: {
                idEmpresaUgUt: number;
                ugs?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumenActividadDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0143: No se puede pasar una Ut que no es de último nivel con lista de ugs
             *      - CAE_0144: No se puede pasar una Ut que es de último nivel sin lista de ugs */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosTrabajoPorIdEmpresaPorIdEmpleadoPorIdUt: {
        parameters: {
            query: {
                idEmpresaUgUt: number;
                ugs?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumenPuestoTrabajoDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0143: No se puede pasar una Ut que no es de último nivel con lista de ugs
             *      - CAE_0144: No se puede pasar una Ut que es de último nivel sin lista de ugs */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoEmpleadosPorIdEmpresa: {
        parameters: {
            query?: {
                idEmpleado?: number;
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoEstadoGeneralDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoEpisEmpleadosPorIdEmpresa: {
        parameters: {
            query?: {
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDtoResponseListaEstadoEpis"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoRecursosMaterialesPorIdEmpresa: {
        parameters: {
            query?: {
                idRecursoMaterial?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialEstadoGeneralDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadosTiposDocumentosPorIdEmpresa: {
        parameters: {
            query?: {
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponseListaRequeridosEmpresa"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvaluacionesActividadPorIdEmpresa: {
        parameters: {
            query?: {
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionActividadDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0001 : No se puede introducir idUg e idUt a la vez */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPacksDocumentalesUgPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoPackDocumentalPorDefectoUgDTO_POSTPackDocumentalPorDefectoUgDTO_POST"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionEmpresaUgPackDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPacksDocumentalesUtPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoPackDocumentalPorDefectoUtDTO_POSTPackDocumentalPorDefectoUtDTO_POST"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionEmpresaUtPackDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelacionesContratacionPorIdEmpresaPorIdPackDocumental: {
        parameters: {
            query?: {
                idEmpresaAportante?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelacionesContratacionDisponiblesPorIdEmpresaPorIdPackDocumental: {
        parameters: {
            query?: {
                idEmpresaAportante?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPacksUgDisponiblesPorIdEmpresa: {
        parameters: {
            query?: {
                idsRelacionesContratacion?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalUgDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0112: La empresa principal no coincide con la de la relación de contratación %1d */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPacksUgRelacionadosPorIdEmpresa: {
        parameters: {
            query?: {
                idsRelacionesContratacion?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalListaPacksEmpresaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0101: Una formación debe tener especificidad genérica. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPacksUtDisponiblesPorIdEmpresa: {
        parameters: {
            query?: {
                idsRelacionesContratacion?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalUtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0112: La empresa principal no coincide con la de la relación de contratación %1d */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPacksUtRelacionadosPorIdEmpresa: {
        parameters: {
            query?: {
                idsRelacionesContratacion?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalListaPacksEmpresaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0101: Una formación debe tener especificidad genérica. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoReconocimientosPorIdEmpresa: {
        parameters: {
            query?: {
                idEmpleado?: number;
                idEmpresaUgUt?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoEstadoReconocimientoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postIniciarReservaCitaReconocimientosPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReservaCitaDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReservaCitaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0094: El evento no es de reconocimientos médicos.
             *      - CAE_0095: No se puede cambiar el evento de un reconocimiento.
             *      - CAE_0096: El estado del reconocimiento no es PENDIENTE_ENVIAR_HORAS.
             *      - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadosTiposDocumentosPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: {
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecursoMaterial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponseListaRequeridosRecursoMaterial"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoTiposDocumentosRequeridosPorIdEmpresaPorIdRecursoMaterial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecursoMaterial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequeridoEstadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHistoricoPorIdEmpresaPorIdRecursoPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecursoMaterial: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoPorIdEmpresaPorIdTipoDocumento: {
        parameters: {
            query?: {
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequeridoEmpresaEstadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0122: Es obligatorio enviar un listado de idsUgs o idsUts
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoPorIdEmpresa: {
        parameters: {
            query?: {
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequeridoEstadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0122: Es obligatorio enviar un listado de idsUgs o idsUts
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHistoricoPorIdEmpresaPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolicitantesPorIdEmpresaPorIdTipoDocumento: {
        parameters: {
            query?: {
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequeridoEmpresaSolicitantesDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0122: Es obligatorio enviar un listado de idsUgs o idsUts
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsConEvaluacionPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponseIdNombre"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadPorDefectoEmpleadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postActividadesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaUgOrUtActividadDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgActividadDtoRabbitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUgPorIdActividadPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpresa: number;
                idRelacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFechaDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdUgPorIdActividadPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpresa: number;
                idRelacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgActividadRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPacksUgPorIdEmpresaPorIdUgPorIdEmpresaAportaPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idEmpresaAporta: number;
                idRelacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoPackDocumentalPorDefectoUgDTO_POSTPackDocumentalPorDefectoUgDTO_POST"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionPacksUgDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0014 : La UG ({idUgRelacion}, {idEmpresaRelacion}) de la relación de contratación no coincide con la UG ({idUgPack}, {idEmpresaPack}) del pack documental */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvaluacionesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EvaluacionUgDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPacksDocumentalesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalUgDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPacksDocumentalesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaUgPackDocumentalPorDefectoDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPackDocumentalPorDefectoDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRelacionesContratacionPorIdEmpresaPorIdUgPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPackDocumental: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackUgRelacionesContratacionDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0014 : La UG ({idUgRelacion}, {idEmpresaRelacion}) de la relación de contratación no coincide con la UG ({idUgPack}, {idEmpresaPack}) del pack documental */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosTrabajoPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoPorDefectoEmpleadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPuestosTrabajoPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaPuestoTrabajoUgDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPuestoTrabajoDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUgPorIdPuestoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPuesto: number;
                idRelacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFechaDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdUgPorIdPuestoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPuesto: number;
                idRelacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPuestoTrabajoRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSituacionesEspecialesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSituacionesEspecialesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionUgSituacionEspecialDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUgPorIdSituacionPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRelacion: number;
                idSituacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFechaDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdUgPorIdSituacionPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRelacion: number;
                idSituacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgSituacionEspecialRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTablaRiesgosActividadesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilaTablaRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0018 : No se puede obtener la tabla riesgo por no ser Ug de último nivel */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTablaRiesgosPuestosPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilaTablaRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0018 : No se puede obtener la tabla riesgo por no ser Ug de último nivel */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTablaRiesgosUgsPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilaTablaRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposEpisPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEpiDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposEpisPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsConEvaluacionPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponseIdNombre"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadPorDefectoEmpleadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postActividadesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaUgOrUtActividadDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtActividadDtoRabbitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUtPorIdActividadPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpresa: number;
                idRelacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFechaDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdUtPorIdActividadPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpresa: number;
                idRelacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtActividadRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPacksUtPorIdEmpresaPorIdUtPorIdEmpresaAportaPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idEmpresaAporta: number;
                idRelacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoPackDocumentalPorDefectoUtDTO_POSTPackDocumentalPorDefectoUtDTO_POST"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionPacksUtDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0015 : La UT ({idUtRelacion}, {idEmpresaRelacion}) de la relación de contratación no coincide con la UT ({idUtPack}, {idEmpresaPack}) del pack documental */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvaluacionesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EvaluacionUtDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0158 : No se puede crear una evaluación a una UT que no sea de último nivel */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPacksDocumentalesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalUtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPacksDocumentalesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaUtPackDocumentalPorDefectoDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPackDocumentalPorDefectoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRelacionesContratacionPorIdEmpresaPorIdUtPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPackDocumental: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackUtRelacionesContratacionDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0015 : La UT ({idUtRelacion}, {idEmpresaRelacion}) de la relación de contratación no coincide con la UT ({idUtPack}, {idEmpresaPack}) del pack documental */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestrosTrabajoPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoPorDefectoEmpleadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPuestosTrabajoPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaPuestoTrabajoUtDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPuestoTrabajoDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUtPorIdPuestoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPuesto: number;
                idRelacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFechaDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdUtPorIdPuestoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idPuesto: number;
                idRelacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPuestoTrabajoRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSituacionesEspecialesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSituacionesEspecialesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtSituacionEspecialDtoRabbitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUtPorIdSituacionPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRelacion: number;
                idSituacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFechaDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdUtPorIdSituacionPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRelacion: number;
                idSituacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoEmpleadoFechaDtoEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtSituacionEspecialRelContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTablaRiesgosActividadesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilaTablaRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTablaRiesgosPuestosPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilaTablaRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTablaRiesgosUtsPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilaTablaRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposEpisPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtTipoEpiDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEntregaEpi: {
        parameters: {
            query?: {
                idEmpleadoTipoEpi?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntregaEpiDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPdfEntregaEpi: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEntregaEpi: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEditarObservacionesPorIdEntregaEpi: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEntregaEpi: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EntregaEpiDtoObservacionesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvaluacionPorIdEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionTablaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteEvaluacionPorIdEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdjuntoPorIdEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                    fileName: string;
                };
            };
        };
        responses: {
            /** @description CREATE */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformacionAdjuntoPorIdEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRiesgoPorIdEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RiesgoDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiesgoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0111: El tipo de riesgo ya está relacionado con la evaluación. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putRiesgoPorIdEvaluacionPorIdRiesgo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RiesgoDtoRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiesgoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteRiesgoPorIdEvaluacionPorIdRiesgo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiesgoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCausaPorIdEvaluacionPorIdRiesgo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CausaDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CausaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCausaPorIdEvaluacionPorIdRiesgoPorIdCausa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CausaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putCausaPorIdEvaluacionPorIdRiesgoPorIdCausa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CausaDtoRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CausaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCausaPorIdEvaluacionPorIdRiesgoPorIdCausa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CausaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                    fileName: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["ArchivoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformacionAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorUuid: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string[];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorUuid: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int32 */
                        idTipoEntidad: number;
                        /** Format: int32 */
                        idEntidad: number;
                        /** Format: int32 */
                        idTipoEntidadSecundaria?: number;
                        /** Format: int32 */
                        idEntidadSecundaria?: number;
                        observaciones: string;
                        nombre: string;
                        /** Format: binary */
                        binario: string;
                        esCreacion?: boolean;
                        extension?: string;
                        /** Format: int32 */
                        numeroPaginas?: number;
                        /** Format: int32 */
                        idArchivo?: number;
                        uuid?: string;
                        /** Format: int32 */
                        idEntorno?: number;
                        fechaInsercion?: components["schemas"]["ZonedDateTime"];
                        fechaModificacion?: components["schemas"]["ZonedDateTime"];
                        /** Format: int32 */
                        tamano?: number;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MedidaPreventivaDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedidaPreventivaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0002 : El tipo de documento {idTipoDocumento} no es aplicable a {tipoMedida}.
             *      - CAE_0097: Al tipo de medida 'OTROS' no se le puede asignar un tipo de documento. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idMedida: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedidaPreventivaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idMedida: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MedidaPreventivaDtoRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedidaPreventivaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0123: No es posible desplanificar una medida preventiva que se encuentra planificada. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteMedidaPreventivaPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idMedida: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        descripcion?: string;
                        /** Format: int32 */
                        idMedida?: number;
                        nombre?: string;
                        tipoMedida?: string;
                        tipoDocumento?: components["schemas"]["TipoDocumentoBasicoDtoResponse"];
                        planificada?: boolean;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idMedida: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                    fileName: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0023 : No se puede crear un adjunto vacío para una medida preventiva */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformacionAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedida: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idMedida: number;
                idRiesgo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedidaPorUuid: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idMedida: number;
                idRiesgo: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string[];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAdjuntoPorIdEvaluacionPorIdRiesgoPorIdCausaPorIdMedidaPorUuid: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCausa: number;
                idEvaluacion: number;
                idMedida: number;
                idRiesgo: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoEntidadPorIdEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionEntidadDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFormaciones: {
        parameters: {
            query?: {
                activo?: boolean;
                idTipoFormacion?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionDtoResponseConFechas"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FormacionDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoEmpleadosFormacionesPorIdEmpresa: {
        parameters: {
            query?: {
                idEmpleado?: number;
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFormacionEstadoGeneralDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFormacionPorIdFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionDtoResponseConFechas"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putFormacionPorIdFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FormacionDtoRequestUpdate"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description  - CAE_0047 : No se puede editar una formación cuyo estado no sea 'Planificada'
             *       - CAE_0068 : No se puede cambiar el tipo de formación para una formación con empleados relacionados */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteFormacionPorIdFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0093: No se puede eliminar una formación que tenga empleados relacionados. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putCambiarEstadoPorIdFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FormacionDtoRequestCambiarEstado"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0092: No se puede cancelar una formación cuyo estado sea distinto de 'Planificada'.
             *       - CAE_0137: No se puede eliminar el curso porque ya está empezado y tiene asistentes. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFormacionDocumentoDtoGet"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FormacionEmpleadoDtoRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0054 : No puede añadir o eliminar empleados en una formación cuyo estado no sea 'Planificada' */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSinPerfilGruposUsuarios: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrupoUsuarioDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoInformaciones: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EstadoInformacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0067: Los atributos del JWT no incluyen los claims necesarios para obtener la Información */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformesEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InformeEvaluacionDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformeEvaluacionPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putInformeEvaluacionPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InformeEvaluacionDtoRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteInformeEvaluacionPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvaluacionesPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluacionesDeInformeDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionesPuestoPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionesModificadasDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionesUgPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoUgDTO_POST_PUTUgDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionesModificadasDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0016 : No se le puede añadir un informe a una UG que no ha sido evaluada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionesUgPuestoPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoUgDTO_POST_PUTUgDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionesModificadasDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0016 : No se le puede añadir un informe a una UG que no ha sido evaluada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionesUtPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoUtDTO_POST_PUTUtDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionesModificadasDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0157 : No se le puede añadir un informe a una UT que no ha sido evaluada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEvaluacionesUtPuestoPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoUtDTO_POST_PUTUtDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeEvaluacionesModificadasDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0157 : No se le puede añadir un informe a una UT que no ha sido evaluada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generarInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SolicitudNombreInformeDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformeBaseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosDisponiblesPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosInformePorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsDisponiblesPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgIdNombreRecursivoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsInformePorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponseIdNombre"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsDisponiblesPorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtIdNombreRecursivoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsInformePorIdInformeEvaluacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idInformeEvaluacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponseIdNombre"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPacksDocumentales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalDtoResponseList"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PackDocumentalDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0078: No se puede poner el pack documental asignable por defecto para nuevas UGs, sin ponerlo disponible
             *      - CAE_0079: No se puede poner el pack documental asignable por defecto para nuevas UTs, sin ponerlo disponible
             *      - CAE_0148: Un pack documental no puede ser aplicable a recursos materiales */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPackDocumentalPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putPackDocumentalPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PackDocumentalDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0084: No se puede modificar el campo “aplicable a“, ya que el pack tiene tipos de documentos relacionados
             *      -CAE_0078: No se puede poner el pack documental asignable por defecto para nuevas UGs, sin ponerlo disponible
             *      - CAE_0079: No se puede poner el pack documental asignable por defecto para nuevas UTs, sin ponerlo disponible
             *      - CAE_0148: Un pack documental no puede ser aplicable a recursos materiales */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deletePackDocumentalPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackDocumentalDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposDocumentosPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocPackDocumentalDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0120: Algunos de los tipos de documentos a relacionar no tienen la misma aplicabilidad que el pack documental */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPorDefectoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUgPorDefectoDtoRequestUgDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPackDocumentalPorDefectoDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPorDefectoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsPorIdPackDocumental: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPackDocumental: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUtPorDefectoDtoRequestUtDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPackDocumentalPorDefectoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPerfilesAccesoDocumentos: {
        parameters: {
            query?: {
                nombre?: string;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoDtoListadoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPerfilAccesoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PerfilAccesoDocumentoDtoCreacionRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoDtoResponseCreate"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0105: No se puede insertar ya que ya existe un perfil con el id especificado. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPerfilAccesoDocumentoPorIdPerfilAccesoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPerfilAccesoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putPerfilAccesoDocumentoPorIdPerfilAccesoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPerfilAccesoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PerfilAccesoDocumentoDtoActualizacionRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0103: No se puede actualizar ya que ya existe un perfil con el nombre %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deletePerfilAccesoDocumentoPorIdPerfilAccesoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPerfilAccesoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosPorIdPerfilAccesoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPerfilAccesoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoListadoTipoDocumentoDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoDocumentoPorIdPerfilAccesoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPerfilAccesoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PerfilAccesoDocumentoTipoDocumentoDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoTipoDocumentoDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0104: No se puede insertar un perfil accesos documento tipo documento con un Id de perfil acceso distinto al especificado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestosTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postPuestoTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PuestoTrabajoDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0006 : Solo se puede marcar el campo porDefectoEmpleadoEnUg si se marca previamente el campo porDefectoUg
             *      - CAE_0007 : Solo se puede marcar el campo porDefectoEmpleadoEnUt si se marca previamente el campo porDefectoUt */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNumRelacionadosPuestosTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoNumRelacionadosDtoGet"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPuestoTrabajoPorIdPuestoTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuestoTrabajo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putPuestoTrabajoPorIdPuestoTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuestoTrabajo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PuestoTrabajoDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0006 : Solo se puede marcar el campo porDefectoEmpleadoEnUg si se marca previamente el campo porDefectoUg
             *      - CAE_0007 : Solo se puede marcar el campo porDefectoEmpleadoEnUt si se marca previamente el campo porDefectoUt */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deletePuestoTrabajoPorIdPuestoTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuestoTrabajo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActividadesPorIdPuestoTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuestoTrabajo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActividadDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postActividadesPorIdPuestoTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuestoTrabajo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuestoTrabajoActividadDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdPuestoTrabajo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuestoTrabajo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPorIdPuesto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuesto: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPorDefectoEmpleadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsPorIdPuesto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuesto: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUgPuestoTrabajoDtoRequestUgPuestoTrabajoDtoRequestEliminar"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgPuestoTrabajoDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPorIdPuesto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuesto: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPorDefectoEmpleadoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsPorIdPuesto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idPuesto: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoUtPuestoTrabajoDtoRequestUtPuestoTrabajoDtoRequestEliminar"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtPuestoTrabajoDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getReconocimiento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconocimientoEmpleadoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0140: El jwt no contiene los atributos necesarios
             *      - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putReconocimiento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AceptarRechazarReconocimientoDtoRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconocimientoEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0065 : Un reconocimiento médico que no está en estado PENDIENTE_RESPUESTA_CONSULTA no puede aceptarse o rechazarse
             *     - CAE_0140: El jwt no contiene los atributos necesarios
             *      - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postReconocimiento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IniciarReconocimientoEmpleadoDto"][];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconocimientoConEmpleadoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getReconocimientoPorIdReconocimiento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idReconocimiento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconocimientoConEmpleadoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSituacionesEspeciales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SituacionEspecialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0086: No se puede especificar tiempo de validez y marcar indefinida a la vez
             *      - CAE_0087: No se puede omitir el tiempo de validez y marcar definida a la vez */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNumRelacionadosSituacionesEspeciales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialNumRelacionadosDtoGet"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSituacionEspecialPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putSituacionEspecialPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SituacionEspecialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0072: No se puede relacionar la UgSituacionEspecial %1d, porque no coincide con la UG de la relación de contratación de empleado
             *      - CAE_0073: No se puede relacionar la UtSituacionEspecial %1d, porque no coincide con la UT de la relación de contratación de empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSituacionEspecialPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialEmpleadoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoSituacionEspecialEmpleadoDTO_POSTEmpleadoDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialEmpleadoDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialTipoDocumentoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposDocumentosPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaSituacionEspecialTipoDocumentoDTO_POST"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SituacionEspecialTipoDocumentoDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoUgSituacionEspecialDtoRequestUgSituacionEspecialDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionUgSituacionEspecialDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsPorIdSituacionEspecial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSituacionEspecial: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoUtSituacionEspecialDtoRequestUtSituacionEspecialDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtSituacionEspecialDtoRabbitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentos: {
        parameters: {
            query?: {
                aplicableA?: components["schemas"]["AplicableAEnum"];
                tipo?: components["schemas"]["TipoEnum"];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponseList"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoDocumentoDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description  - CAE_0049 : Un tipo de documento con tipo PRL tiene que ser aplicable a empleado
             *      - CAE_0050 : Solo puede haber un tipo de documento marcado como reconocimiento médico
             *      - CAE_0059 : Un tipo de documento configurado con el tipo PRL a RECONOCIMIENTO MEDICO, tiene que ser GENERICO
             *      - CAE_0082: La unidad de tiempo de la validez debe ser días, meses o años.
             *      - CAE_0083: El código de Metabuzón ya existe.
             *      - CAE_0109: Un tipo de documento aplicable a recurso material debe ser genérico
             *      - CAE_0102: Una información debe tener especificidad específica.
             *      - CAE_0101: Una formación debe tener especificidad genérica.
             *      - CAE_0132 : La aplicabilidad del tipo de documento universal no coincide con la introducida */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosUniversales: {
        parameters: {
            query?: {
                aplicableA?: components["schemas"]["AplicableAEnum"];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoUniversalDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFirmarTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FirmaDtoRequest"][];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0139: Error al parsear los atributos del JWT.
             *      - CAE_0121 : El jwt no contiene alguno de los atributos
             *      - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoDocumentoPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoDocumentoPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoDocumentoDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description  - CAE_0049 : Un tipo de documento con tipo PRL tiene que ser aplicable a empleado
             *      - CAE_0050 : Solo puede haber un tipo de documento marcado como reconocimiento médico
             *      - CAE_0059 : Un tipo de documento configurado con el tipo PRL a RECONOCIMIENTO MEDICO, tiene que ser GENERICO
             *      - CAE_0082: La unidad de tiempo de la validez debe ser días, meses o años.
             *      - CAE_0083: El código de Metabuzón ya existe.
             *      - CAE_0080: No puede editar la entidad para la que es aplicable este tipo de documento, debido a que ya tiene relaciones creadas.
             *      - CAE_0081: No puede editar la especificidad de este tipo de documento, debido a que ya tiene relaciones creadas.
             *      - CAE_0109: Un tipo de documento aplicable a recurso material debe ser genérico
             *      - CAE_0102: Una información debe tener especificidad específica.
             *      - CAE_0101: Una formación debe tener especificidad genérica.
             *      - CAE_0132 : La aplicabilidad del tipo de documento universal no coincide con la introducida */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTipoDocumentoPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAdjuntoPorIdTipoDocumentoPorUuid: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCriteriosValidacionPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoCriterioDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCriteriosValidacionPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoDocumentoCriterioRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoCriterioResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0076: El criterio de validación a eliminar no está relacionado con este tipo de documento.
             *      - CAE_0077: El criterio de validación a editar no está relacionado con este tipo de documento. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPermisoPorDefectoPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermisoPorDefectoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postAdjuntoPorIdTipoDocumentoPorIdTipoAdjunto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoAdjunto: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: int32 */
                    idTipoEntidadSecundaria?: number;
                    /** Format: int32 */
                    idEntidadSecundaria?: number;
                    /** Format: binary */
                    file?: string;
                    fileName?: string;
                    observaciones: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["ArchivoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0130 : El tipo de adjunto solo puede ser una 'Plantilla' o un 'Documento de ejemplo'
             *      - CAE_0133 : No se puede insertar un adjunto a un tipo de documento específico sin especificar solicitante
             *      - CAE_0134 : No se puede insertar un adjunto a un tipo de documento genérico especificando solicitante
             *      - CAE_0091: Un tipo de documento que puede ser firmado no puede tener más de un archivo de documentación anexa
             *      - CAE_0003 : Un tipo de documento que puede ser firmado solo puede tener documentación anexa en formato PDF */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAdjuntoPorIdTipoDocumentoPorIdTipoAdjuntoPorUuid: {
        parameters: {
            query?: {
                idSolicitante?: number;
                idTipoSolicitante?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoAdjunto: number;
                idTipoDocumento: number;
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int32 */
                        idTipoEntidad: number;
                        /** Format: int32 */
                        idEntidad: number;
                        /** Format: int32 */
                        idTipoEntidadSecundaria?: number;
                        /** Format: int32 */
                        idEntidadSecundaria?: number;
                        observaciones: string;
                        nombre: string;
                        /** Format: binary */
                        binario: string;
                        esCreacion?: boolean;
                        extension?: string;
                        /** Format: int32 */
                        numeroPaginas?: number;
                        /** Format: int32 */
                        idArchivo?: number;
                        uuid?: string;
                        /** Format: int32 */
                        idEntorno?: number;
                        fechaInsercion?: components["schemas"]["ZonedDateTime"];
                        fechaModificacion?: components["schemas"]["ZonedDateTime"];
                        /** Format: int32 */
                        tamano?: number;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0130 : El tipo de adjunto solo puede ser una 'Plantilla' o un 'Documento de ejemplo'
             *      - CAE_0136: El tipo de entidad secundaria no es de UG, UT o Actividad.
             *      - CAE_0124: Si el parámetro %s es nulo,  %s no puede ser distinto de nulo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBinariosComprimidosPorIdTipoDocumentoPorIdTipoAdjunto: {
        parameters: {
            query: {
                idEntidadSecundaria?: number;
                idTipoEntidadSecundaria?: number;
                uuids: string[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoAdjunto: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0130 : El tipo de adjunto solo puede ser una 'Plantilla' o un 'Documento de ejemplo'
             *      - CAE_0136: El tipo de entidad secundaria no es de UG, UT o Actividad.
             *      - CAE_0124: Si el parámetro %s es nulo,  %s no puede ser distinto de nulo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEntidadesEspecificasPorIdTipoDocumentoPorIdTipoAdjunto: {
        parameters: {
            query?: {
                idActividad?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoAdjunto: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoEntidadesEspecificasDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0131 : El tipo de documento no es específico
             *      - CAE_0130 : El tipo de adjunto solo puede ser una 'Plantilla' o un 'Documento de ejemplo'
             *      - CAE_0100: Solo puede filtrar por actividad, UG o UT */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformacionPorIdTipoDocumentoPorIdTipoAdjunto: {
        parameters: {
            query?: {
                idEntidadSecundaria?: number;
                idTipoEntidadSecundaria?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoAdjunto: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0124: Si el parámetro %s es nulo,  %s no puede ser distinto de nulo
             *      - CAE_0130 : El tipo de adjunto solo puede ser una 'Plantilla' o un 'Documento de ejemplo'
             *      - CAE_0136: El tipo de entidad secundaria no es de UG, UT o Actividad. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putObservacionesPorIdTipoDocumentoPorIdTipoAdjunto: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoAdjunto: number;
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ArchivoObservacionesDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0130 : El tipo de adjunto solo puede ser una 'Plantilla' o un 'Documento de ejemplo'
             *      - CAE_0135: Los IDs del body no coinciden con los pasados por parámetro
             *      - CAE_0136: El tipo de entidad secundaria no es de UG, UT o Actividad.
             *      - CAE_0124: Si el parámetro %s es nulo,  %s no puede ser distinto de nulo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSolicitantePorIdTipoDocumentoPorIdTipoAdjuntoPorIdTipoSolicitantePorIdSolicitante: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSolicitante: number;
                idTipoAdjunto: number;
                idTipoDocumento: number;
                idTipoSolicitante: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0130 : El tipo de adjunto solo puede ser una 'Plantilla' o un 'Documento de ejemplo' */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposDocumentosPorIdTipoDocumento: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoDocumento: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoRelacionadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0090: No puede crear una relación con este tipo de documento. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSolicitantePorIdTipoDocumentoPorIdTipoSolicitantePorIdSolicitante: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSolicitante: number;
                idTipoDocumento: number;
                idTipoSolicitante: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSolicitantePorIdTipoDocumentoPorIdTipoSolicitantePorIdSolicitante: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idSolicitante: number;
                idTipoDocumento: number;
                idTipoSolicitante: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    fileName?: string;
                    /** Format: int32 */
                    idTipoSolicitante?: number;
                    /** Format: int32 */
                    idSolicitante?: number;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0066: Para este tipo de documento no se puede insertar un adjunto que no sea PDF
             *      - ARC_0002 : No se ha podido recuperar el tipo del archivo a insertar */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposEpis: {
        parameters: {
            query?: {
                idActividad?: number;
                idEmpresaUgUt?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEpiDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0153: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - CAE_0026: El parámetro idEmpresaUgUt no puede ser nulo si idUg/idUt no lo es */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoEpi: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoEpiDtoRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int32 */
                        idTipoEpi?: number;
                        codigo?: string;
                        nombre?: string;
                        parteCuerpo?: components["schemas"]["TipoEpiParteCuerpoEnum"];
                        categoria?: components["schemas"]["TipoEpiCategoriaEnum"];
                        normas?: string[];
                        requiereNumeroSerie?: boolean;
                        /** Format: int32 */
                        periodicidadValor?: number;
                        periodicidadUnidad?: components["schemas"]["UnidadTiempoEnum"];
                        /** Format: int32 */
                        validezValor?: number;
                        validezUnidad?: components["schemas"]["UnidadTiempoEnum"];
                        sinRevision?: boolean;
                        validezIndefinida?: boolean;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CAE_0119: No se puede especificar una unidad de tiempo que no sean “días”, “meses” o “años” */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoEpiPorIdTipoEpi: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEpi: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoEpiDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEpiDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CAE_0119: No se puede especificar una unidad de tiempo que no sean “días”, “meses” o “años” */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTipoEpiPorIdTipoEpi: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEpi: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CAE_0115: No se puede eliminar el tipo de epi ya que está siendo usado por un epi */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposFormaciones: {
        parameters: {
            query?: {
                activo?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoFormacionDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoFormacionPorIdTipoFormacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoFormacionDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoFormacionDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdTipoFormacionPorIdEmpresa: {
        parameters: {
            query?: {
                idFormacion?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idTipoFormacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoTipoFormacionRequeridaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposInformaciones: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoInformacionSolicitantesDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadosEmpleadosPorIdEmpresa: {
        parameters: {
            query?: {
                idEmpleado?: number;
                idEmpresaUgUt?: number;
                idsActividades?: number[];
                idsPuestos?: number[];
                idsUgs?: number[];
                idsUts?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoInformacionEstadoGeneralDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0025 : El parámetro idsUg/idsUt no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - CAE_0145: Alguna Ug no existe de la lista enviada
             *      - CAE_0146: Alguna Ut no existe de la lista enviada */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEnviarInformacionPorIdTipoFormacionPorIdEmpresaPorIdActividad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idActividad: number;
                idEmpresa: number;
                idTipoInformacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CorreoInformacionDto"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformacionDTO_GET"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEnviarInformacionPorIdTipoFormacionPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idTipoInformacion: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CorreoInformacionDto"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformacionDTO_GET"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEnviarInformacionPorIdTipoFormacionPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idTipoInformacion: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CorreoInformacionDto"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InformacionDTO_GET"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpresasPorIdTipoInformacionPorIdEmpresa: {
        parameters: {
            query?: {
                idActividad?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idTipoInformacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoInformacionDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0071: Es necesario especificar un solicitante */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposMedidasPreventivas: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoMedidaPreventivaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoReconocimientoMedico: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoReconocimientoMedicoDTO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - CAE_0138: El usuario no está asociado a un perfil de acceso a documentos con el tipo de documento Reconocimiento Médico */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosPorIdTipoRecursoMaterial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoRecursoMaterial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTiposDocumentosPorIdTipoRecursoMaterial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoRecursoMaterial: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialTipoDocumentoDTO_Rabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposRiesgos: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRiesgoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDocumentosPorIdUsuario: {
        parameters: {
            query: {
                idsDocumentos: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentoDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosFormacionesPorIdUsuario: {
        parameters: {
            query: {
                idsEmpleadosFormaciones: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFormacionDtoGet"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPerfilesAccesoDocumentoPorIdUsuarioPorIdEmpresaPorIdRol: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRol: number;
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoDtoListadoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFormacionesPorIdUsuario: {
        parameters: {
            query: {
                idsFormaciones: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormacionDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPerfilesAccesoDocumentosPorIdUsuario: {
        parameters: {
            query?: {
                idsPerfilesAcceso?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerfilAccesoDocumentoDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposDocumentosPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoDocumentoDtoResponseList"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCalcularValoracionRiesgos: {
        parameters: {
            query: {
                codigoConsecuencia: components["schemas"]["CausaConsecuenciaEnum"];
                codigoProbabilidad: components["schemas"]["CausaProbabilidadEnum"];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CodigoValorDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getConsecuenciasValoracionRiesgos: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CodigoValorDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProbabilidadesValoracionRiesgos: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CodigoValorDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum AccionEntregaEpiEnum {
    NUEVA_ENTREGA = "NUEVA_ENTREGA",
    REVISION_APROBADO = "REVISION_APROBADO",
    REVISION_DESCARTADO = "REVISION_DESCARTADO"
}
export enum AplicableAEnum {
    EMPRESA = "EMPRESA",
    EMPLEADO = "EMPLEADO",
    RECURSO = "RECURSO"
}
export enum CausaConsecuenciaEnum {
    DANINO = "DANINO",
    EXTREMADAMENTE_DANINO = "EXTREMADAMENTE_DANINO",
    LIGERAMENTE_DANINO = "LIGERAMENTE_DANINO"
}
export enum CausaNivelRiesgoEnum {
    RIESGO_INTOLERABLE = "RIESGO_INTOLERABLE",
    RIESGO_IMPORTANTE = "RIESGO_IMPORTANTE",
    RIESGO_MODERADO = "RIESGO_MODERADO",
    RIESGO_TOLERABLE = "RIESGO_TOLERABLE",
    RIESGO_TRIVIAL = "RIESGO_TRIVIAL"
}
export enum CausaProbabilidadEnum {
    ALTA = "ALTA",
    BAJA = "BAJA",
    MEDIA = "MEDIA"
}
export enum DayOfWeek {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY"
}
export enum DepartamentoAreaEnum {
    PRL = "PRL",
    ADMINISTRACION = "ADMINISTRACION"
}
export enum DocumEstadoEnum {
    PENDIENTE = "PENDIENTE",
    OK = "OK",
    ERROR = "ERROR",
    EXPIRADO = "EXPIRADO"
}
export enum DocumMetodoInsercionEnum {
    METABUZON = "METABUZON",
    MANUAL = "MANUAL",
    SITUACION_ESPECIAL = "SITUACION_ESPECIAL",
    APP = "APP",
    SEGURIDAD_SOCIAL = "SEGURIDAD_SOCIAL",
    SEGURIDAD_SOCIAL_METABUZON = "SEGURIDAD_SOCIAL_METABUZON"
}
export enum EntornoEstadoEnum {
    CREADO = "CREADO",
    PENDIENTE = "PENDIENTE",
    BORRANDO = "BORRANDO"
}
export enum EspecificidadEnum {
    GENERICO = "GENERICO",
    ESPECIFICO = "ESPECIFICO"
}
export enum EstadoEpiEnum {
    OK = "OK",
    ERROR = "ERROR"
}
export enum EstadoFormacionEnum {
    PLANIFICADA = "PLANIFICADA",
    EN_CURSO = "EN_CURSO",
    FINALIZADA = "FINALIZADA",
    CANCELADA = "CANCELADA"
}
export enum EstadoGestionEnum {
    PENDIENTE_RESPUESTA_CONSULTA = "PENDIENTE_RESPUESTA_CONSULTA",
    PENDIENTE_ENVIAR_HORAS = "PENDIENTE_ENVIAR_HORAS",
    PENDIENTE_ASIGNACION_HORAS = "PENDIENTE_ASIGNACION_HORAS",
    PENDIENTE_RENUNCIA = "PENDIENTE_RENUNCIA",
    CON_HORA = "CON_HORA",
    PENDIENTE_RESULTADO = "PENDIENTE_RESULTADO",
    FINALIZADA = "FINALIZADA"
}
export enum EstadoGestionFormacionEnum {
    PENDIENTE_CONFIRMACION = "PENDIENTE_CONFIRMACION",
    PROGRAMADA = "PROGRAMADA",
    EN_CURSO = "EN_CURSO",
    PENDIENTE_CERTIFICADO = "PENDIENTE_CERTIFICADO",
    RECHAZADA = "RECHAZADA",
    FINALIZADA = "FINALIZADA"
}
export enum EstadoGestionInformacionEnum {
    PENDIENTE_FIRMA = "PENDIENTE_FIRMA",
    REENVIADO_PENDIENTE_FIRMA = "REENVIADO_PENDIENTE_FIRMA",
    FINALIZADO = "FINALIZADO"
}
export enum InformacionVigenciaEnum {
    EN_VIGOR = "EN_VIGOR",
    EXPIRADO = "EXPIRADO",
    EN_CARENCIA = "EN_CARENCIA",
    FUTURO = "FUTURO",
    PROXIMO_CADUCAR = "PROXIMO_CADUCAR"
}
export enum InformeEnum {
    EVALUACIONES_RIESGO = "EVALUACIONES_RIESGO",
    ENTREGA_EPI = "ENTREGA_EPI"
}
export enum Month {
    JANUARY = "JANUARY",
    FEBRUARY = "FEBRUARY",
    MARCH = "MARCH",
    APRIL = "APRIL",
    MAY = "MAY",
    JUNE = "JUNE",
    JULY = "JULY",
    AUGUST = "AUGUST",
    SEPTEMBER = "SEPTEMBER",
    OCTOBER = "OCTOBER",
    NOVEMBER = "NOVEMBER",
    DECEMBER = "DECEMBER"
}
export enum PermisoPorDefectoEnum {
    CONSULTA_DE_DOCUMENTOS = "CONSULTA_DE_DOCUMENTOS",
    VER_DETALLE_DE_DOCUMENTOS = "VER_DETALLE_DE_DOCUMENTOS",
    EDICION_DE_DOCUMENTOS = "EDICION_DE_DOCUMENTOS",
    VALIDACION_DE_DOCUMENTOS = "VALIDACION_DE_DOCUMENTOS"
}
export enum TimeDefinition {
    UTC = "UTC",
    WALL = "WALL",
    STANDARD = "STANDARD"
}
export enum TipoDocumentoInformatizadoEnum {
    TC2_RNT_MULTIPLES = "TC2_RNT_MULTIPLES",
    TC2_RNT_UNICO = "TC2_RNT_UNICO",
    ITA = "ITA",
    TA2 = "TA2",
    AEAT = "AEAT",
    CIF_NIF = "CIF_NIF",
    CERTIFICADO_SS = "CERTIFICADO_SS",
    TC1_RLC = "TC1_RLC"
}
export enum TipoEnum {
    FORMACIONES = "FORMACIONES",
    INFORMACIONES = "INFORMACIONES",
    EPI = "EPI",
    RECONOCIMIENTO_MEDICO = "RECONOCIMIENTO_MEDICO"
}
export enum TipoEpiCategoriaEnum {
    I = "I",
    II = "II",
    III = "III",
    SANITARIOS = "SANITARIOS"
}
export enum TipoEpiParteCuerpoEnum {
    CABEZA = "CABEZA",
    OIDO = "OIDO",
    OJOS_Y_CARA = "OJOS_Y_CARA",
    VIAS_RESPIRATORIAS = "VIAS_RESPIRATORIAS",
    BRAZOS_Y_MANOS = "BRAZOS_Y_MANOS",
    PIES_Y_PIERNAS = "PIES_Y_PIERNAS",
    TRONCO_Y_ABDOMEN = "TRONCO_Y_ABDOMEN",
    PROTECTORES_DE_BARRERA = "PROTECTORES_DE_BARRERA",
    PROTECTORES_ANTI_CAIDAS = "PROTECTORES_ANTI_CAIDAS",
    ROPA_PROTECCION_ESPECIFICA = "ROPA_PROTECCION_ESPECIFICA"
}
export enum TipoEvaluacionEnum {
    UG = "UG",
    PUESTO_PRL = "PUESTO_PRL",
    ACTIVIDAD = "ACTIVIDAD",
    UT = "UT"
}
export enum TipoMedidaEnum {
    FORMACIONES = "FORMACIONES",
    INFORMACIONES = "INFORMACIONES",
    EPI = "EPI",
    RECONOCIMIENTO_MEDICO = "RECONOCIMIENTO_MEDICO",
    OTROS = "OTROS"
}
export enum TipoSolicitudAltaEnum {
    EMPRESA = "EMPRESA",
    AUTONOMO = "AUTONOMO"
}
export enum TipoValidezEnum {
    DIAS = "DIAS",
    MESES = "MESES",
    ANIOS = "ANIOS"
}
export enum UnidadTiempoEnum {
    HORAS = "HORAS",
    MINUTOS = "MINUTOS",
    DIAS = "DIAS",
    MESES = "MESES",
    ANOS = "ANOS"
}
