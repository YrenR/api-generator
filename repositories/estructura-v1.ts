/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/estructura/v1/categorias-recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve el listado de categorías */
        get: operations["getCategoriasRecursosMateriales"];
        put?: never;
        /** Crea una nueva categoría de recurso material */
        post: operations["postCategoriaRecursoMaterial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/categorias-recursos-materiales/{idCategoria}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        get?: never;
        /** Actualiza una categoría existente */
        put: operations["putCategoriaRecursoMaterialPorIdCategoria"];
        post?: never;
        /** Elimina una categoría de recurso material */
        delete: operations["deleteCategoriaRecursoMaterialPorIdCategoria"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/categorias-recursos-materiales/{idCategoria}/tipos-recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        /** Devuelve todos los tipos de recursos materiales del sistema */
        get: operations["getTiposRecursosMaterialesPorIdCategoria"];
        put?: never;
        /** Crea un nuevo tipo de recurso material */
        post: operations["postTipoRecursoMaterialPorIdCategoria"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/categorias-recursos-materiales/{idCategoria}/tipos-recursos-materiales/{idTipoRecursoMaterial}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        get?: never;
        /** Actualiza un tipo de recurso material existente */
        put: operations["putTipoRecursoMaterialPorIdCategoriaPorIdTipoRecursoMaterial"];
        post?: never;
        /** Borra un tipo de recurso material */
        delete: operations["deleteTipoRecursoMaterialPorIdCategoriaPorIdTipoRecursoMaterial"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca todos los empleados de una lista de empresas (lista IDs). Si no se especifica lista, obtiene todos los empleados del entorno */
        get: operations["getEmpleados"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca todas las empresas del sistema (Empresas de un esquema). Si se especifica una lista de ID's, busca sólo las empresas correspondientes a esos ID's */
        get: operations["getEmpresas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la empresa principal del entorno */
        get: operations["getEmpresaPrincipal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/arbol-ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el árbol de UGs relacionadas con una empresa principal */
        get: operations["getArbolUgsPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/arbol-uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el árbol de UTs relacionadas con una empresa principal */
        get: operations["getArbolUtsPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Busca las Ugs de una EmpresaPrincipal a partir de unos filtros
         * @description - En caso de venir 'modoÁrbol' a true, se devolverá una estructura de ugs con todos sus hijos y si ponemos el 'idUgPadre' la estructura vendrá a partir de los hijos de este
         *         - Si 'modoÁrbol' viene a false, se devolverán las ugs filtradas y si ponemos el 'idUgPadre' vendrán a partir de los hijos de este"
         *         - Si 'obtenerInterna' es 'True' devolverá la UG cuyo tipo sea interno, si es 'False' lo excluye
         */
        get: operations["getUgsPorIdEmpresa"];
        put?: never;
        /** Inserta una Ug en una EmpresaPrincipal */
        post: operations["postUgPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca una Ug de una EmpresaPrincipal */
        get: operations["getUgPorIdEmpresaPorIdUg"];
        /** Actualiza una Ug */
        put: operations["putUgPorIdEmpresaPorIdUg"];
        post?: never;
        /** Elimina una Ug de una EmpresaPrincipal */
        delete: operations["deleteUgPorIdEmpresaPorIdUg"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los empleados de una UG */
        get: operations["getEmpleadosPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}/existen-relaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Indica si la ug seleccionada tiene o no relaciones en este u otro módulo */
        get: operations["getExistenRelacionesPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}/hijos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca todos los hijos directos de una Ug */
        get: operations["getHijosPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los recursos materiales de una UG */
        get: operations["getRecursosMaterialesPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}/uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todas las Uts relacionadas con una Ug */
        get: operations["getUtsPorIdEmpresaPorIdUg"];
        put?: never;
        /** Modifica las relaciones de una Ug con una o varias Uts */
        post: operations["postUtsPorIdEmpresaPorIdUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}/uts-relacionadas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las uts relacionadas con una ug */
        get: operations["getUtsRelacionadasPorIdEmpresaPorIdUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/ugs/{idUg}/uts/{idUt}/relaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Inserta una relación contratación para una UgUt concreta
         * @description - Si uno de los campos idEmpresaQueSolicita o idRelacionPadre no viene a null, ambos deben tener valor
         *      - El valor de idEmpresaQueSolicita será el de idEmpresaQueAporta del idRelacionPadre
         */
        post: operations["postRelacionesPorIdEmpresaPorIdUgPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Busca las Uts de una EmpresaPrincipal a partir de unos filtros
         * @description - En caso de venir 'modoÁrbol' a true, se devolverá una estructura de uts con todos sus hijos y si ponemos el 'idUtPadre' la estructura vendrá a
         *       partir de los hijos de este
         *         - Si 'modoÁrbol' viene a false, se devolverán las uts filtradas y si ponemos el 'idUtPadre' vendrán a partir de los hijos de este
         *         - Si 'obtenerInterna' es 'True' devolverá la UT cuyo tipo sea interno, si es 'False' lo excluye
         */
        get: operations["getUtsPorIdEmpresa"];
        put?: never;
        /** Inserta una Ut en una EmpresaPrincipal */
        post: operations["postUtPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts/{idUt}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca una Ut de una EmpresaPrincipal */
        get: operations["getUtPorIdEmpresaPorIdUt"];
        /** Actualiza una Ut */
        put: operations["putUtPorIdEmpresaPorIdUt"];
        post?: never;
        /** Elimina una Ut de una EmpresaPrincipal */
        delete: operations["deleteUtPorIdEmpresaPorIdUt"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts/{idUt}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los empleados de una UT */
        get: operations["getEmpleadosPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts/{idUt}/existen-relaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Indica si la ut seleccionada tiene o no relaciones en este u otro módulo */
        get: operations["getExistenRelacionesPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts/{idUt}/hijos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca todos los hijos directos de una Ut */
        get: operations["getHijosPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts/{idUt}/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los recursos materiales de una UT */
        get: operations["getRecursosMaterialesPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts/{idUt}/ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera todas las Ugs relacionadas con una Ut */
        get: operations["getUgsPorIdEmpresaPorIdUt"];
        put?: never;
        /** Modifica las relaciones de una Ut con una o varias Ugs */
        post: operations["postUgPorIdEmpresaPorIdUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas-principales/{idEmpresa}/uts/{idUt}/ugs-relacionadas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las ugs relacionadas con una ut */
        get: operations["getUgsRelacionadasPorIdEmpresaPorIdUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la empresa correspondiente al ID */
        get: operations["getEmpresaPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Recupera todos los empleados de una empresa.
         *     El flag sinAsignar a TRUE filtra el listado para devolver solo los empleados de la empresa que no estén asignados a una relación de contratación. */
        get: operations["getEmpleadosPorIdEmpresa"];
        put?: never;
        /** Creación de un nuevo empleado para una empresa principal */
        post: operations["postEmpleadoPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados-con-usuario": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los empleados con un usuario asignado */
        get: operations["getEmpleadosConUsuarioPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un empleado buscando por su clave primaria */
        get: operations["getEmpleadoPorIdEmpresaPorIdEmpleado"];
        /** Actualiza un empleado existente */
        put: operations["putEmpleadoPorIdEmpresaPorIdEmpleado"];
        post?: never;
        /** Eliminación de un empleado de una empresa principal */
        delete: operations["deleteEmpleadoPorIdEmpresaPorIdEmpleado"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/arbol-ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el árbol de UGs relacionadas con un empleado */
        get: operations["getArbolUgsPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/arbol-uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el árbol de UTs relacionadas con un empleado */
        get: operations["getArbolUtsPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/estado-alta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Comprueba si un empleado está en alta según las fechas */
        get: operations["getEstadoAltaPorIdEmpresaPorIdEmpleado"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera recursos materiales de un usuario con fechas actual */
        get: operations["getRecursosMaterialesPorIdEmpresaPorIdEmpleado"];
        put?: never;
        /** Crear/Modificar/Eliminar recursos materiales de un Empleado con fechas actual */
        post: operations["postRecursosMaterialesPorIdEmpresaPorIdEmpleado"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/recursos-materiales/{idRecurso}/fechas-historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera recursos materiales de un Empleado con fechas y valor actual */
        get: operations["getFechasHistoricosPorIdEmpresaPorIdEmpleadoPorIdRecurso"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las relaciones de contratación de un empleado */
        get: operations["getRelacionesContratacionPorIdEmpresaPorIdEmpleado"];
        put?: never;
        /** Inserta/Elimina/Modifica las relaciones contratación en la relación con Empleado */
        post: operations["postRelacionesContratacionPorIdEmpresaPorIdEmpleado"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/relaciones-contratacion/{idRelacion}/fechas-historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Muestra los históricos de un empleado con una relación de contratación */
        get: operations["getFechasHistoricosPorIdEmpresaPorIdEmpleadoPorIdRelacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/empleados/{idEmpleado}/usuario": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el usuario que tiene asignado un empleado */
        get: operations["getUsuarioPorIdEmpresaPorIdEmpleado"];
        put?: never;
        /** Asigna un usuario a un empleado */
        post: operations["postUsuarioPorIdEmpresaPorIdEmpleado"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/estado-alta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Calcula el estado de alta de una empresa según sus fechas */
        get: operations["getEstadoAltaPorIdEmpresa"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los recursos materiales de una empresa permitiendo filtrar por categoría y por recurso material sin relación contratación */
        get: operations["getRecursosMaterialesPorIdEmpresa"];
        put?: never;
        /** Crea un nuevo recurso material para la empresa principal */
        post: operations["postRecursoMaterialPorIdEmpresa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales/{idRecurso}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera un recurso material a partir de su ID y del ID de la empresa a la que pertenece */
        get: operations["getRecursoMaterialPorIdEmpresaPorIdRecurso"];
        /** Modifica un recurso material de la empresa principal */
        put: operations["putRecursoMaterialPorIdEmpresaPorIdRecurso"];
        post?: never;
        /** Elimina un recurso material de la empresa principal */
        delete: operations["deleteRecursoMaterialPorIdEmpresaPorIdRecurso"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales/{idRecurso}/arbol-ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el árbol de UGs relacionadas con un recurso material */
        get: operations["getArbolUgsPorIdEmpresaPorIdRecurso"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales/{idRecurso}/arbol-uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el árbol de UTs relacionadas con un recurso material */
        get: operations["getArbolUtsPorIdEmpresaPorIdRecurso"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales/{idRecurso}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los empleados de un recurso material junto a las fechas del histórico actual para cada recurso material */
        get: operations["getEmpleadosPorIdEmpresaPorIdRecurso"];
        put?: never;
        /** Inserta/Modifica/Elimina relaciones entre un recurso material y varios empleados. */
        post: operations["postEmpleadosPorIdEmpresaPorIdRecurso"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales/{idRecurso}/estado-alta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Comprueba si un recurso material está en alta según las fechas */
        get: operations["getEstadoAltaPorIdEmpresaPorIdRecurso"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales/{idRecurso}/relaciones-contratacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener relacion Contratacion Recursos con las fechas del historico */
        get: operations["getRelacionContratacionPorIdEmpresaPorIdRecurso"];
        put?: never;
        /** Relacionar recursos materiales con relación de contratación */
        post: operations["postRelacionContratacionPorIdEmpresaPorIdRecurso"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/empresas/{idEmpresa}/recursos-materiales/{idRecurso}/relaciones-contratacion/{idRelacion}/fechas-historicos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene los históricos entre un recurso y las relaciones de contratación relacionadas */
        get: operations["getFechasHistoricosPorIdEmpresaPorIdRecursoPorIdRelacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/imagen/tipo-entidad/{idTipoEntidad}/entidad/{idEntidad}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Actualiza un logotipo a una entidad */
        put: operations["putEntidadPorIdTipoEntidadPorIdEntidad"];
        /** Inserta un logotipo a una entidad */
        post: operations["postEntidadPorIdTipoEntidadPorIdEntidad"];
        /** Elimina un logotipo de una entidad */
        delete: operations["deleteEntidadPorIdTipoEntidadPorIdEntidad"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/imagen/tipo-entidad/{idTipoEntidad}/entidad/{idEntidad}/informacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Comprueba que la entidad tiene logo, devuelve informacion */
        get: operations["getInformacionPorIdTipoEntidadPorIdEntidad"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/imagen/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera el logo de una entidad por su uuid */
        get: operations["getImagenPorUuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/empleados/confirmacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta los datos de los empleados pasados por el request en la BD */
        post: operations["postConfirmacionImportacionEmpleados"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/empleados/plantilla": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve el binario del la plantilla de importacion de empleados */
        get: operations["getPlantillaImportacionEmpleados"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/empleados/validacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ejecuta todas las validaciones pertinentes sobre el Excel de importación de empleados */
        post: operations["postValidacionImportacionEmpleados"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/recursos-materiales/confirmacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Importa los recursos materiales recibidos en el body según las opciones recibidas en la request */
        post: operations["postConfirmacionImportacionRecursosMateriales"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/recursos-materiales/plantilla": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve el binario de la plantilla de importacion de recursos materiales */
        get: operations["getPlantillaImportacionRecursosMateriales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/recursos-materiales/validacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ejecuta todas las validaciones pertinentes sobre el Excel de importación de recursos materiales */
        post: operations["postValidacionImportacionRecursosMateriales"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/ugs/confirmacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta los datos introducidos por el usuario en la plantilla de importación de ugs */
        post: operations["postConfirmacionImportacionUgs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/ugs/plantilla": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve el binario del la plantilla de importacion de ugs */
        get: operations["getPlantillaImportacionUgs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/ugs/validacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ejecuta todas las validaciones pertinentes sobre el Excel de importación de ugs */
        post: operations["postValidacionImportacionUgs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/uts/confirmacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inserta los datos introducidos por el usuario en la plantilla de importación de uts */
        post: operations["postConfirmacionImportacionUts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/uts/plantilla": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve el binario del la plantilla de importacion de uts */
        get: operations["getPlantillaImportacionUts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/importacion/uts/validacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ejecuta todas las validaciones pertinentes sobre el Excel de importación de uts */
        post: operations["postValidacionImportacionUts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/modulos/{idModulo}/tipos-estructuras": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca el tipo de estructura de un módulo concreto */
        get: operations["obtenerTipoEstructuraPorModulo"];
        put?: never;
        /** Crea la relación de un módulo con un tipo de estructura */
        post: operations["postTipoEstructuraPorIdModulo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca todos los recursos materiales de un entorno a partir de unos filtros */
        get: operations["getRecursosMateriales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/relaciones-contratacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las relaciones de contratación a partir de unos filtros */
        get: operations["getRelacionesContratacion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/relaciones-contratacion/{idRelacionContratacion}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene todos los empleados de una relación de contratación con fechas, buscando por el ID de la misma */
        get: operations["getEmpleadosPorIdRelacionContratacion"];
        put?: never;
        /** Inserta/Elimina/Modifica empleados en una relación de contratación */
        post: operations["postEmpleadosPorIdRelacionContratacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/relaciones-contratacion/{idRelacionContratacion}/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los recursos materiales relacionados con una relación contratación */
        get: operations["getRecursosMaterialesPorIdRelacionContratacion"];
        put?: never;
        /** Insertar/Modificar/Eliminar relaciones de recursos materiales con una relación de contratación */
        post: operations["postRecursosMaterialesPorIdRelacionContratacion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene un listado de los tipos de estructura */
        get: operations["getTiposEstructuras"];
        put?: never;
        /** Crea un nuevo tipo de estructura */
        post: operations["postTipoEstructura"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras/arbol": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene las jerarquías de TipoEstructuras y TiposUg/Ut */
        get: operations["getArbolTiposEstructuras"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras/tipos-usos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene un objeto con las flags correspondientes a los tipos de uso especificando si se usan o no */
        get: operations["getTiposUsos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras/{idTipoEstructura}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la entidad correspondiente al parámetro */
        get: operations["getTipoEstructuraPorIdTipoEstructura"];
        /** Actualiza la entidad en BD */
        put: operations["putTipoEstructuraPorIdTipoEstructura"];
        post?: never;
        /** Elimina la entidad en BD */
        delete: operations["deleteTipoEstructuraPorIdTipoEstructura"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras/{idTipoEstructura}/arbol-ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el árbol de ugs asociada al tipo de estructura */
        get: operations["getArbolUgsPorIdTipoEstructura"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras/{idTipoEstructura}/arbol-uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene el árbol de uts asociada al tipo de estructura */
        get: operations["getArbolUtsPorIdTipoEstructura"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras/{idTipoEstructura}/ug-interna": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la ug interna asociada tipo de estructura */
        get: operations["getUgInternaPorIdTipoEstructura"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-estructuras/{idTipoEstructura}/ut-interna": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene la utInterna asociada al tipo de estructura */
        get: operations["getUtInternaPorIdTipoEstructura"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtiene todos los tipos de recursos materiales */
        get: operations["getTiposRecursosMateriales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-ug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtiene los tipos de Ug a partir de unos filtros como 'listadIds' y idTipoUgPadre'
         * @description - En caso de venir 'modoÁrbol' a true, se devolverá una estructura de tipos de ugs con todos sus hijos y si ponemos el 'idTipoUgPadre' la "
         *     estructura vendrá a partir de los hijos de este"
         *     - Si 'modoÁrbol' viene a false, se devolverán las ugs filtradas y si ponemos el 'idTipoUgPadre' vendrán a partir de los hijos de este"
         *     - Si idTipoUgPadre tiene valor, entonces se tiene en cuenta el parámetro soloHijosDirectos. Este parámetro es falso por defecto y "
         *     filtra los tipos para mostrar solo los del siguiente nivel"
         *     - Si 'obtenerInterna' es 'True' devolverá el Tipo UG interna, si es 'False' los que no lo son"
         *     - Si viene idTipoEstructura se busca por tipos que tengan ese idTipoEstructura"
         *     - Si viene nivel se busca por tipos que tengan ese nivel"
         *     - Si viene nombreSingular o nombrePlural se busca por ese nombre exacto
         */
        get: operations["getTiposUg"];
        put?: never;
        /** Crea una nueva entidad tipo Ug en BD */
        post: operations["postTipoUg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-ug/{idTipoUg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la entidad tipo Ug correspondiente al parámetro */
        get: operations["getTipoUgPorIdTipoUg"];
        /** Actualiza la entidad tipo Ug en BD */
        put: operations["putTipoUgPorIdTipoUg"];
        post?: never;
        /** Elimina la entidad tipo Ug en BD */
        delete: operations["deleteTipoUgPorIdTipoUg"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-ug/{idTipoUg}/usado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Comprueba si el tipo Ug está en uso */
        get: operations["getUsadoPorIdTipoUg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-ut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtiene los tipos de Ut a partir de unos filtros como 'listadIds' y idTipoUtPadre'
         * @description - En caso de venir 'modoArbol' a true, se devolverá una estructura de tipos de uts con todos sus hijos y si ponemos el 'idTipoUtPadre' la
         *             estructura vendrá a partir de los hijos de este
         *              - Si 'modoArbol' viene a false, se devolverán las ugs filtradas y si ponemos el 'idTipoUtPadre' vendrán a partir de los hijos de este
         *              - Si idTipoUtPadre tiene valor, entonces se tiene en cuenta el parámetro soloHijosDirectos. Este parámetro es falso por defecto y
         *                 filtra los tipos para mostrar solo los del siguiente nivel
         *              - Si 'obtenerInterna' es 'True' devolverá el Tipo UT interna, si es 'False' los que no lo son
         *              - Si viene idTipoEstructura se busca por tipos que tengan ese idTipoEstructura
         *              - Si viene nivel se busca por tipos que tengan ese nivel
         *              - Si viene nombreSingular o nombrePlural se busca por ese nombre exacto
         */
        get: operations["getTiposUts"];
        put?: never;
        /** Crea una nueva entidad tipo Ut en BD */
        post: operations["postTipoUt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-ut/{idTipoUt}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca la entidad correspondiente al parámetro */
        get: operations["getTipoUtPorIdTipoUt"];
        /** Actualiza la entidad tipo Ut en BD */
        put: operations["putTipoUtPorIdTipoUt"];
        post?: never;
        /** Elimina la entidad tipo Ut en BD */
        delete: operations["deleteTipoUtPorIdTipoUt"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/tipos-ut/{idTipoUt}/usado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Comprueba si el tipo Ut está en uso */
        get: operations["getUsadoPorIdTipoUt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/uguts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca todas las relaciones Ugs y Uts de una EmpresaPrincipal */
        get: operations["getUgsUts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios-ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca las relaciones de usuarios con ugs a partir de unos filtros */
        get: operations["getUsuariosUgs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios-uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Busca las relaciones de usuarios con uts a partir de unos filtros */
        get: operations["getUsuariosUts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/empleado": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las empleados relacionadas con un usuario */
        get: operations["getEmpleadoPorIdUsuario"];
        /** Asigna un empleado a un usuario */
        put: operations["putEmpleadoPorIdUsuario"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/empleados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los empleados asociados con un usuario y relación de contratación */
        get: operations["getEmpleadosPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/empresas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las empresas que puede ver un usuario */
        get: operations["getEmpresasPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/favoritos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Devuelve el listado de favoritos de un usuario en el árbol de navegación */
        get: operations["getFavoritosPorIdUsuario"];
        put?: never;
        /** Inserta/Elimina favoritos para el árbol de navegación de un usuario */
        post: operations["postFavoritosPorIdUsuario"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/recursos-materiales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera los recursos materiales que puede ver un usuario */
        get: operations["getRecursosMaterialesPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/relaciones-contratacion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las relaciones de contratación que puede ver un usuario */
        get: operations["getRelacinesContratacionPorIdUsuario"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/ugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las UGs relacionadas con un usuario */
        get: operations["getUgsPorIdUsuario"];
        put?: never;
        /** Añade y elimina UGs a un usuario */
        post: operations["postUgsPorIdUsuario"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/estructura/v1/usuarios/{idUsuario}/uts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recupera las UTs relacionadas con un usuario */
        get: operations["getUtsPorIdUsuarios"];
        put?: never;
        /** Añade y elimina UTs a un usuario */
        post: operations["postUtsPorIdUsuario"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ArchivoDTO_GET: {
            /** Format: int32 */
            idTipoEntidad: number;
            /** Format: int32 */
            idEntidad: number;
            /** Format: int32 */
            idTipoEntidadSecundaria?: number;
            /** Format: int32 */
            idEntidadSecundaria?: number;
            observaciones: string;
            nombre: string;
            /** Format: binary */
            binario: string;
            esCreacion?: boolean;
            extension?: string;
            /** Format: int32 */
            numeroPaginas?: number;
            /** Format: int32 */
            idArchivo?: number;
            uuid?: string;
            /** Format: int32 */
            idEntorno?: number;
            fechaInsercion?: components["schemas"]["ZonedDateTime"];
            fechaModificacion?: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            tamano?: number;
        };
        ArchivoDTO_GET_INFO: {
            existe?: boolean;
            uuid?: string;
            fechaInsercion?: components["schemas"]["ZonedDateTime"];
            fechaModificacion?: components["schemas"]["ZonedDateTime"];
            /** Format: int32 */
            tamano?: number;
            extension?: string;
            nombre?: string;
            observaciones?: string;
            /** Format: int32 */
            idArchivo?: number;
            /** Format: int32 */
            numeroPaginas?: number;
        };
        CategoriaRecursoMaterialDTO_GET: {
            icono: string;
            nombre: string;
            observaciones: string;
            /** Format: int32 */
            idCategoriaUniversal?: number;
            /** Format: int32 */
            idCategoria?: number;
        };
        CategoriaRecursoMaterialDTO_GET1: {
            nombre: string;
            observaciones: string;
            /** Format: int32 */
            idPais: number;
            /** Format: int32 */
            idCategoria: number;
        };
        CategoriaRecursoMaterialDTO_POST_PUT: {
            icono: string;
            nombre: string;
            observaciones: string;
            /** Format: int32 */
            idCategoriaUniversal?: number;
        };
        ConfirmacionPlantillaImportacionDtoRequest: {
            json?: string;
            asignarTodos?: boolean;
            /** Format: int32 */
            idUg?: number;
            idsUt?: number[];
            /** Format: int32 */
            idUt?: number;
            idsUg?: number[];
        };
        /** @enum {string} */
        DayOfWeek: DayOfWeek;
        /**
         * Format: duration
         * @example P1D
         */
        Duration: string;
        EmpleadoDTO_GET: {
            dni: string;
            nombre: string;
            apellido1: string;
            apellido2: string;
            tipoDocId: string;
            /** Format: int32 */
            idPaisDni: number;
            /** Format: int32 */
            idEmpleado?: number;
            /** Format: int32 */
            idUsuario?: number;
            /** Format: int32 */
            idPersona?: number;
            observaciones: string;
            empresa?: components["schemas"]["EmpresaDtoResponse"];
            idUltimoMensajeRabbit?: string;
            permiteComunicacionesDigitales?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
            categoriaPuesto?: string;
        };
        EmpleadoDTO_POST: {
            dni: string;
            nombre: string;
            apellido1: string;
            apellido2: string;
            tipoDocId: string;
            /** Format: int32 */
            idPaisDni: number;
            fechaDesde?: string;
            fechaHasta?: string;
            observaciones: string;
            categoriaPuesto: string;
        };
        EmpleadoDtoPut: {
            permiteComunicacionesDigitales: boolean;
            fechaDesde: string;
            fechaHasta: string;
            observaciones: string;
            categoriaPuesto: string;
        };
        EmpleadoFechasDtoResponse: {
            fechaDesde?: string;
            fechaHasta?: string;
            actual?: boolean;
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
        };
        EmpleadoIdDto: {
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        EmpleadoIdFechasDtoRequest: {
            fechaDesde: string;
            fechaHasta: string;
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idEmpleado: number;
        };
        EmpleadoUsuarioDTO_PUT: {
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idEmpleado: number;
        };
        EmpleadosRecursoMaterialDtoRabbit: {
            listadoInsertados?: components["schemas"]["EmpleadoFechasDtoResponse"][];
            listadoEditados?: components["schemas"]["EmpleadoFechasDtoResponse"][];
            listadoEliminados?: components["schemas"]["EmpleadoIdDto"][];
            recursoMaterial?: components["schemas"]["RecursoMaterialDto"];
        };
        EmpresaDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            cif?: string;
            nombre?: string;
        };
        EmpresaDtoResponse1: {
            /** Format: int32 */
            idEmpresa?: number;
            cif?: string;
            nombre?: string;
        };
        EstadoAltaDtoResponse: {
            estado: boolean;
        };
        ExistenRelacionesDtoResponse: {
            existen?: boolean;
        };
        /** @enum {string} */
        FormatoEnum: FormatoEnum;
        HistoricoEmpleadoRecursoMaterialResponse: {
            recurso?: components["schemas"]["RecursoMaterialDto"];
            fechaDesde?: string;
            fechaHasta?: string;
        };
        HistoricoFechasDtoResponse: {
            fechaDesde: string;
            fechaHasta: string;
            actual?: boolean;
        };
        /**
         * Format: date-time
         * @example 2022-03-10T16:15:50Z
         */
        Instant: string;
        /**
         * Format: date-time
         * @example 2022-03-10T12:15:50
         */
        LocalDateTime: string;
        /**
         * Format: local-time
         * @example 13:45:30.123456789
         */
        LocalTime: string;
        /** @enum {string} */
        ModuloEnum: ModuloEnum;
        /** @enum {string} */
        Month: Month;
        /** @enum {string} */
        PriorizarUgUtEnum: PriorizarUgUtEnum;
        RecursoMaterialDTO_GET: {
            identificador1: string;
            identificador2: string;
            nombre: string;
            observaciones: string;
            fechaDesde?: string;
            fechaHasta?: string;
            /** Format: int32 */
            idRecurso?: number;
            empresa?: components["schemas"]["EmpresaDtoResponse"];
            categoria: components["schemas"]["CategoriaRecursoMaterialDTO_GET"];
            tipoRecursoMaterial: components["schemas"]["TipoRecursoMaterialDTO_GET"];
        };
        RecursoMaterialDTO_PK: {
            /** Format: int32 */
            idRecurso: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        RecursoMaterialDTO_POST_PUT: {
            identificador1: string;
            identificador2: string;
            nombre: string;
            observaciones: string;
            fechaDesde?: string;
            fechaHasta?: string;
            /** Format: int32 */
            idCategoria: number;
            /** Format: int32 */
            idTipoRecursoMaterial: number;
        };
        RecursoMaterialDto: {
            identificador1?: string;
            identificador2?: string;
            nombre?: string;
            observaciones?: string;
            fechaDesde?: string;
            fechaHasta?: string;
            /** Format: int32 */
            idRecurso?: number;
            empresa?: components["schemas"]["EmpresaDtoResponse"];
            tipoRecursoMaterial?: components["schemas"]["TipoRecursoMaterialBasicoDto"];
            categoria?: components["schemas"]["CategoriaRecursoMaterialDTO_GET"];
        };
        RecursoMaterialFechasDtoResponse: {
            fechaDesde?: string;
            fechaHasta?: string;
            recursos?: components["schemas"]["RecursoMaterialDTO_GET"];
        };
        RecursoMaterialIdFechasDtoRequest: {
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idRecurso: number;
            fechaDesde: string;
            fechaHasta: string;
        };
        RecursosMaterialEmpleadoDtoResponse: {
            listadoEliminados?: components["schemas"]["RecursoMaterialDTO_PK"][];
            listadoInsertados?: components["schemas"]["RecursoMaterialFechasDtoResponse"][];
            listadoModificados?: components["schemas"]["RecursoMaterialFechasDtoResponse"][];
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
        };
        RelacionContratacionDTO_GET: {
            /** Format: int32 */
            idRelacion?: number;
            empresaQueAporta?: components["schemas"]["EmpresaDtoResponse"];
            empresaQueSolicita?: components["schemas"]["EmpresaDtoResponse"];
            empresa?: components["schemas"]["EmpresaDtoResponse"];
            ugUt?: components["schemas"]["UgUtDTO_GET"];
            nombre?: string;
            /** Format: int32 */
            nivel?: number;
            /** Format: int32 */
            idRelacionPadre?: number;
            relacionesContratacion?: components["schemas"]["RelacionContratacionDTO_GET"][];
        };
        RelacionContratacionDTO_POST: {
            /** Format: int32 */
            idEmpresaQueAporta: number;
            /** Format: int32 */
            idEmpresaQueSolicita?: number;
            /** Format: int32 */
            idRelacionPadre?: number;
            nombre: string;
        };
        RelacionContratacionEliminarDtoRequest: {
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        RelacionContratacionEmpleadoFechasDtoResponse: {
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
            relacion?: components["schemas"]["RelacionContratacionDTO_GET"];
            fechaDesde?: string;
            fechaHasta?: string;
            actual?: boolean;
        };
        RelacionContratacionEmpleadoIdFechasDtoRequest: {
            fechaDesde: string;
            fechaHasta: string;
            /** Format: int32 */
            idEmpleado: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        RelacionContratacionFechasDtoResponse: {
            actual?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
            relacionContratacion?: components["schemas"]["RelacionContratacionDTO_GET"];
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
        };
        RelacionContratacionIdFechasDtoRequest: {
            fechaDesde: string;
            fechaHasta: string;
            /** Format: int32 */
            idUg: number;
            /** Format: int32 */
            idUt: number;
            /** Format: int32 */
            idEmpresa: number;
        };
        RelacionContratacionRecursoFechasDtoResponse: {
            recurso?: components["schemas"]["RecursoMaterialDTO_GET"];
            relacion?: components["schemas"]["RelacionContratacionDTO_GET"];
            actual?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
        };
        RelacionContratacionRecursoMaterialDTO_RABBIT: {
            /** Format: int32 */
            idRelacion?: number;
            recursosMaterialesInsertar?: components["schemas"]["RecursoMaterialDTO_PK"][];
            recursosMaterialesModificado?: components["schemas"]["RecursoMaterialDTO_PK"][];
            recursosMaterialesEliminar?: components["schemas"]["RecursoMaterialDTO_PK"][];
        };
        RelacionContratacionUsuarioDtoResponse: {
            /** Format: int32 */
            idRelacion?: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt?: number;
        };
        RelacionUsuarioNodoFavoritoDto: {
            /** Format: int32 */
            idUsuario: number;
            listadoInsertados?: components["schemas"]["UsuarioNodoFavoritoDto"][];
            listadoEliminados?: components["schemas"]["UsuarioNodoFavoritoDto"][];
        };
        RelacionesContratacionEmpleadoDtoResponse: {
            listadoInsertados?: components["schemas"]["RelacionContratacionFechasDtoResponse"][];
            listadoEditados?: components["schemas"]["RelacionContratacionFechasDtoResponse"][];
            listadoEliminados?: components["schemas"]["RelacionContratacionFechasDtoResponse"][];
        };
        RelacionesContratacionRecursoMaterialDtoRabbit: {
            recursoMaterial?: components["schemas"]["RecursoMaterialDTO_GET"];
            listadoEditados?: components["schemas"]["RelacionContratacionFechasDtoResponse"][];
            listadoInsertados?: components["schemas"]["RelacionContratacionFechasDtoResponse"][];
            listadoEliminados?: number[];
        };
        RequestBodyDobleListaInteger: {
            listadoInsertar: number[];
            listadoEliminar: number[];
        };
        RequestBodyDobleListaObjetoUsuarioNodoFavoritoDtoUsuarioNodoFavoritoDto: {
            listadoInsertar: components["schemas"]["UsuarioNodoFavoritoDto"][];
            listadoEliminar: components["schemas"]["UsuarioNodoFavoritoDto"][];
        };
        RequestBodyTripleListaObjetoEmpleadoIdFechasDtoRequestEmpleadoIdDto: {
            listadoInsertar: components["schemas"]["EmpleadoIdFechasDtoRequest"][];
            listadoModificar: components["schemas"]["EmpleadoIdFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["EmpleadoIdDto"][];
        };
        RequestBodyTripleListaObjetoRecursoMaterialIdFechasDtoRequestRecursoMaterialDTO_PK: {
            listadoInsertar: components["schemas"]["RecursoMaterialIdFechasDtoRequest"][];
            listadoModificar: components["schemas"]["RecursoMaterialIdFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["RecursoMaterialDTO_PK"][];
        };
        RequestBodyTripleListaObjetoRelacionContratacionEmpleadoIdFechasDtoRequestEmpleadoIdDto: {
            listadoInsertar: components["schemas"]["RelacionContratacionEmpleadoIdFechasDtoRequest"][];
            listadoModificar: components["schemas"]["RelacionContratacionEmpleadoIdFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["EmpleadoIdDto"][];
        };
        RequestBodyTripleListaObjetoRelacionContratacionIdFechasDtoRequestRelacionContratacionEliminarDtoRequest: {
            listadoInsertar: components["schemas"]["RelacionContratacionIdFechasDtoRequest"][];
            listadoModificar: components["schemas"]["RelacionContratacionIdFechasDtoRequest"][];
            listadoEliminar: components["schemas"]["RelacionContratacionEliminarDtoRequest"][];
        };
        ResultadoImportacionEmpleadosDtoResponse: {
            dni?: string;
            nombre?: string;
            apellido1?: string;
            apellido2?: string;
            pais?: string;
            fechaInicio?: string;
            fechaFin?: string;
            puesto?: string;
            informacionAdicional?: string;
            error?: boolean;
            mensajesError?: {
                [key: string]: string;
            };
        };
        ResultadoImportacionRecursosMaterialesDtoResponse: {
            nombre?: string;
            fechaInicio?: string;
            fechaFin?: string;
            informacionAdicional?: string;
            error?: boolean;
            mensajesError?: {
                [key: string]: string;
            };
            identificador1?: string;
            identificador2?: string;
            categoria?: string;
            tipo?: string;
        };
        ResultadoImportacionUgsUtsDtoResponse: {
            nombre?: string;
            fechaInicio?: string;
            fechaFin?: string;
            tipo?: string;
            informacionAdicional?: string;
            porDefectoNuevosEmpleados?: boolean;
            porDefectoNuevosRecursosMateriales?: boolean;
            porDefectoNuevosUsuarios?: boolean;
            porDefectoNuevasEmpresasExternas?: boolean;
            error?: boolean;
            mensajesError?: {
                [key: string]: string;
            };
        };
        /** @enum {string} */
        TimeDefinition: TimeDefinition;
        /** @enum {string} */
        TipoEntidadNodoEnum: TipoEntidadNodoEnum;
        TipoEstructuraDtoActualizacionRequest: {
            nombre: string;
            usaUg: boolean;
            usaUt: boolean;
            priorizarUgUt?: components["schemas"]["PriorizarUgUtEnum"];
            tipoUg?: components["schemas"]["TipoUgDtoActualizacionRequest"];
            tipoUt?: components["schemas"]["TipoUtDtoActualizacionRequest"];
            gestionRecursos?: boolean;
            gestionAdministrativa?: boolean;
        };
        TipoEstructuraDtoArbolResponse: {
            /** Format: int32 */
            idTipoEstructura?: number;
            nombre?: string;
            icono?: string;
            tipoEntidad?: string;
            priorizarUgUt?: components["schemas"]["PriorizarUgUtEnum"];
            tipoUgs?: components["schemas"]["TipoUgDtoArbolEstructuraResponse"][];
            tipoUts?: components["schemas"]["TipoUtDtoArbolEstructuraResponse"][];
        };
        TipoEstructuraDtoCreacionRequest: {
            nombre: string;
            priorizarUgUt?: components["schemas"]["PriorizarUgUtEnum"];
            tipoUg?: components["schemas"]["TipoUgDtoCreacionPrimerNivelRequest"];
            tipoUt?: components["schemas"]["TipoUtDtoCreacionPrimerNivelRequest"];
            gestionRecursos?: boolean;
            gestionAdministrativa?: boolean;
        };
        TipoEstructuraDtoListadoResponse: {
            /** Format: int32 */
            idTipoEstructura?: number;
            nombre?: string;
            nombreUgs?: string;
            nombreUts?: string;
            usaUg?: boolean;
            usaUt?: boolean;
            modulos?: components["schemas"]["ModuloEnum"][];
            gestionRecursos?: boolean;
            gestionAdministrativa?: boolean;
            usadaPorModulo?: boolean;
        };
        TipoEstructuraDtoResponse: {
            /** Format: int32 */
            idTipoEstructura?: number;
            nombre?: string;
            usaUg?: boolean;
            usaUt?: boolean;
            priorizarUgUt?: components["schemas"]["PriorizarUgUtEnum"];
            tipoUg?: components["schemas"]["TipoUgDtoResponse"];
            tipoUt?: components["schemas"]["TipoUtDtoResponse"];
            gestionRecursos?: boolean;
            gestionAdministrativa?: boolean;
            usadaPorModulo?: boolean;
        };
        TipoEstructuraModuloDtoRequest: {
            /** Format: int32 */
            idTipoEstructura: number;
        };
        TipoEstructuraModuloDtoResponse: {
            /** Format: int32 */
            idTipoEstructura?: number;
            usaUg?: boolean;
            usaUt?: boolean;
            priorizarUgUt?: components["schemas"]["PriorizarUgUtEnum"];
            /** Format: int32 */
            idTipoUgInterna?: number;
            /** Format: int32 */
            idUgInterna?: number;
            nombreSingularUg?: string;
            nombrePluralUg?: string;
            iconoUg?: string;
            /** Format: int32 */
            idTipoUtInterna?: number;
            /** Format: int32 */
            idUtInterna?: number;
            nombreSingularUt?: string;
            nombrePluralUt?: string;
            modulo?: components["schemas"]["ModuloEnum"];
            iconoUt?: string;
            gestionRecursos?: boolean;
            gestionAdministrativa?: boolean;
        };
        TipoEstructuraTipoDeUsoDtoResponse: {
            gestionRecursos?: boolean;
            gestionAdministrativa?: boolean;
        };
        TipoRecursoMaterialBasicoDto: {
            /** Format: int32 */
            idTipoRecursoMaterial?: number;
            nombre?: string;
            categoria?: components["schemas"]["CategoriaRecursoMaterialDTO_GET1"];
            identificador1: string;
            identificador2?: string;
            tieneIdentificador2: boolean;
            descripcion?: string;
        };
        TipoRecursoMaterialDTO_GET: {
            nombre: string;
            /** Format: int32 */
            idTipoRecursoUniversal?: number;
            identificador1: string;
            identificador2: string;
            tieneIdentificador2: boolean;
            descripcion: string;
            /** Format: int32 */
            idTipoRecursoMaterial?: number;
            /** Format: int32 */
            idCategoria?: number;
        };
        TipoRecursoMaterialDTO_POST_PUT: {
            nombre: string;
            /** Format: int32 */
            idTipoRecursoUniversal?: number;
            identificador1: string;
            identificador2: string;
            tieneIdentificador2: boolean;
            descripcion: string;
        };
        TipoUgDtoActualizacionRequest: {
            /** Format: int32 */
            idTipoUg?: number;
            /** Format: int32 */
            idTipoEstructura?: number;
            nombreSingular: string;
            nombrePlural: string;
            icono?: string;
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
        };
        TipoUgDtoArbolEstructuraResponse: {
            /** Format: int32 */
            idTipoUg?: number;
            nombre?: string;
            icono?: string;
            tipoEntidad?: string;
            tipoUgs?: components["schemas"]["TipoUgDtoArbolEstructuraResponse"][];
        };
        TipoUgDtoCreacionPrimerNivelRequest: {
            nombreSingular: string;
            nombrePlural: string;
            icono?: string;
        };
        TipoUgDtoCreacionRequest: {
            /** Format: int32 */
            idTipoEstructura: number;
            /** Format: int32 */
            idTipoUgPadre: number;
            nombreSingular: string;
            nombrePlural: string;
            icono?: string;
            /** Format: int32 */
            validez: number;
            unidadTiempoValidez: components["schemas"]["UnidadTiempoValidezEnum"];
        };
        TipoUgDtoResponse: {
            /** Format: int32 */
            idTipoUg?: number;
            /** Format: int32 */
            idTipoEstructura?: number;
            /** Format: int32 */
            idTipoUgPadre?: number;
            /** Format: int32 */
            nivel?: number;
            nombreSingular?: string;
            nombrePlural?: string;
            icono?: string;
            interna?: boolean;
            tipoUgs?: components["schemas"]["TipoUgDtoResponse"][];
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
        };
        TipoUgIdInternaDtoResponse: {
            /** Format: int32 */
            idTipoUg?: number;
            interna?: boolean;
        };
        TipoUtDtoActualizacionRequest: {
            /** Format: int32 */
            idTipoUt?: number;
            /** Format: int32 */
            idTipoEstructura?: number;
            nombreSingular: string;
            nombrePlural: string;
            icono?: string;
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
        };
        TipoUtDtoArbolEstructuraResponse: {
            /** Format: int32 */
            idTipoUt?: number;
            nombre?: string;
            icono?: string;
            tipoEntidad?: string;
            tipoUts?: components["schemas"]["TipoUtDtoArbolEstructuraResponse"][];
        };
        TipoUtDtoCreacionPrimerNivelRequest: {
            nombreSingular: string;
            nombrePlural: string;
            icono?: string;
        };
        TipoUtDtoCreacionRequest: {
            /** Format: int32 */
            idTipoEstructura: number;
            /** Format: int32 */
            idTipoUtPadre: number;
            nombreSingular: string;
            nombrePlural: string;
            icono?: string;
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
        };
        TipoUtDtoResponse: {
            /** Format: int32 */
            idTipoUt?: number;
            /** Format: int32 */
            idTipoEstructura?: number;
            /** Format: int32 */
            idTipoUtPadre?: number;
            /** Format: int32 */
            nivel?: number;
            nombreSingular?: string;
            nombrePlural?: string;
            icono?: string;
            interna?: boolean;
            tipoUts?: components["schemas"]["TipoUtDtoResponse"][];
            /** Format: int32 */
            validez?: number;
            unidadTiempoValidez?: components["schemas"]["UnidadTiempoValidezEnum"];
        };
        TipoUtIdInternaDtoResponse: {
            /** Format: int32 */
            idTipoUt?: number;
            interna?: boolean;
        };
        UgArbolDtoResponse: {
            icono?: string;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUg?: number;
            nombre?: string;
            ugs?: components["schemas"]["UgArbolDtoResponse"][];
        };
        UgCreadaDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUgPadre?: number;
            tipoUg?: components["schemas"]["TipoUgIdInternaDtoResponse"];
            nombre?: string;
            esPrimerHijo?: boolean;
            zonaHoraria?: components["schemas"]["ZoneId"];
        };
        UgDTO_POST: {
            nombre: string;
            /** Format: int32 */
            idUgPadre: number;
            observaciones: string;
            porDefectoEmpleado: boolean;
            porDefectoRecurso: boolean;
            fechaDesde: string;
            fechaHasta: string;
            porDefectoUsuario: boolean;
            porDefectoEmpresa: boolean;
            zonaHoraria: components["schemas"]["ZoneId"];
            /** Format: int32 */
            idTipoUg: number;
        };
        UgDTO_PUT: {
            nombre: string;
            /** Format: int32 */
            idUgPadre: number;
            observaciones: string;
            porDefectoEmpleado: boolean;
            porDefectoRecurso: boolean;
            fechaDesde: string;
            fechaHasta: string;
            porDefectoUsuario: boolean;
            porDefectoEmpresa: boolean;
            zonaHoraria: components["schemas"]["ZoneId"];
        };
        UgDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            nivel?: number;
            /** Format: int32 */
            idTipoUg?: number;
            ugs?: components["schemas"]["UgDtoResponse"][];
            nombre?: string;
            /** Format: int32 */
            idUgPadre?: number;
            observaciones?: string;
            porDefectoEmpleado?: boolean;
            porDefectoRecurso?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
            tieneUgsHijas?: boolean;
            porDefectoUsuario?: boolean;
            porDefectoEmpresa?: boolean;
            zonaHoraria?: components["schemas"]["ZoneId"];
            /** Format: int32 */
            idTipoEstructura?: number;
        };
        UgHijaDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            nombreTipoUg?: string;
            nombreUg?: string;
        };
        UgTipoEstructuraDtoResponse: {
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUgPadre?: number;
            nombre?: string;
            tipoUg?: components["schemas"]["TipoUgIdInternaDtoResponse"];
        };
        UgUtDTO_GET: {
            /** Format: int32 */
            idEmpresa: number;
            /** Format: int32 */
            idUg?: number;
            /** Format: int32 */
            idUt: number;
            nombreUg?: string;
            nombreUt?: string;
        };
        /** @enum {string} */
        UnidadTiempoValidezEnum: UnidadTiempoValidezEnum;
        UsuarioDTO_GET: {
            /** Format: int32 */
            idUsuario: number;
        };
        UsuarioDtoEstructura: {
            /** Format: int32 */
            idUsuario?: number;
            email?: string;
            nombre?: string;
            apellidos?: string;
            rol?: string;
            activo?: boolean;
            fechaActivacion?: string;
            federado?: boolean;
        };
        UsuarioEmpleadoDTO_GET: {
            empleado?: components["schemas"]["EmpleadoDTO_GET"];
            usuario?: components["schemas"]["UsuarioDtoEstructura"];
        };
        UsuarioEmpleadoDTO_POST: {
            /** Format: int32 */
            idUsuario: number;
        };
        UsuarioNodoFavoritoDto: {
            tipoEntidadNodo: components["schemas"]["TipoEntidadNodoEnum"];
            /** Format: int32 */
            idEntidadNodo: number;
        };
        UsuarioNodoFavoritoDtoGet: {
            tipoEntidadNodo: components["schemas"]["TipoEntidadNodoEnum"];
            /** Format: int32 */
            idEntidadNodo: number;
            icono: string;
            nombreEntidadNodo: string;
        };
        UsuarioUtDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idUsuario?: number;
        };
        UtArbolDtoResponse: {
            icono?: string;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUt?: number;
            nombre?: string;
            uts?: components["schemas"]["UtArbolDtoResponse"][];
        };
        UtCreadaDtoResponse: {
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idUtPadre?: number;
            tipoUt?: components["schemas"]["TipoUtIdInternaDtoResponse"];
            nombre?: string;
            esPrimerHijo?: boolean;
        };
        UtDTO_POST: {
            nombre: string;
            /** Format: int32 */
            idUtPadre: number;
            observaciones: string;
            porDefectoEmpleado: boolean;
            porDefectoRecurso: boolean;
            fechaDesde: string;
            fechaHasta: string;
            porDefectoUsuario: boolean;
            porDefectoEmpresa: boolean;
            /** Format: int32 */
            idTipoUt: number;
        };
        UtDTO_PUT: {
            nombre: string;
            /** Format: int32 */
            idUtPadre: number;
            observaciones: string;
            porDefectoEmpleado: boolean;
            porDefectoRecurso: boolean;
            fechaDesde: string;
            fechaHasta: string;
            porDefectoUsuario: boolean;
            porDefectoEmpresa: boolean;
        };
        UtDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            nivel?: number;
            /** Format: int32 */
            idTipoUt?: number;
            uts?: components["schemas"]["UtDtoResponse"][];
            nombre?: string;
            /** Format: int32 */
            idUtPadre?: number;
            observaciones?: string;
            porDefectoEmpleado?: boolean;
            porDefectoRecurso?: boolean;
            fechaDesde?: string;
            fechaHasta?: string;
            tieneUtsHijas?: boolean;
            porDefectoUsuario?: boolean;
            porDefectoEmpresa?: boolean;
            /** Format: int32 */
            idTipoEstructura?: number;
        };
        UtHijaDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            nombreTipoUt?: string;
            nombreUt?: string;
        };
        UtTipoEstructuraDtoResponse: {
            /** Format: int32 */
            idUt?: number;
            /** Format: int32 */
            idEmpresa?: number;
            /** Format: int32 */
            idUtPadre?: number;
            nombre?: string;
            tipoUt?: components["schemas"]["TipoUtIdInternaDtoResponse"];
        };
        ValidacionPlantillaImportacionDtoRequest: {
            json?: string;
        };
        ZoneId: {
            id?: string;
            rules?: components["schemas"]["ZoneRules"];
        };
        ZoneOffset: {
            /** Format: int32 */
            totalSeconds?: number;
            rules?: components["schemas"]["ZoneRules"];
        };
        ZoneOffsetTransition: {
            /** Format: int64 */
            epochSecond?: number;
            transition?: components["schemas"]["LocalDateTime"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            offsetAfter?: components["schemas"]["ZoneOffset"];
            instant?: components["schemas"]["Instant"];
            dateTimeBefore?: components["schemas"]["LocalDateTime"];
            dateTimeAfter?: components["schemas"]["LocalDateTime"];
            duration?: components["schemas"]["Duration"];
            /** Format: int32 */
            durationSeconds?: number;
            gap?: boolean;
            overlap?: boolean;
            validOffsets?: components["schemas"]["ZoneOffset"][];
        };
        ZoneOffsetTransitionRule: {
            month?: components["schemas"]["Month"];
            /** Format: byte */
            dom?: string;
            dow?: components["schemas"]["DayOfWeek"];
            time?: components["schemas"]["LocalTime"];
            timeEndOfDay?: boolean;
            timeDefinition?: components["schemas"]["TimeDefinition"];
            standardOffset?: components["schemas"]["ZoneOffset"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            offsetAfter?: components["schemas"]["ZoneOffset"];
            /** Format: int32 */
            dayOfMonthIndicator?: number;
            dayOfWeek?: components["schemas"]["DayOfWeek"];
            localTime?: components["schemas"]["LocalTime"];
            midnightEndOfDay?: boolean;
        };
        ZoneRules: {
            standardTransitions?: number[];
            standardOffsets?: components["schemas"]["ZoneOffset"][];
            savingsInstantTransitions?: number[];
            savingsLocalTransitions?: components["schemas"]["LocalDateTime"][];
            wallOffsets?: components["schemas"]["ZoneOffset"][];
            lastRules?: components["schemas"]["ZoneOffsetTransitionRule"][];
            fixedOffset?: boolean;
            transitions?: components["schemas"]["ZoneOffsetTransition"][];
            transitionRules?: components["schemas"]["ZoneOffsetTransitionRule"][];
        };
        /**
         * Format: date-time
         * @example 2022-03-10T12:15:50-04:00
         */
        ZonedDateTime: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaArchivoDtoGet = components['schemas']['ArchivoDTO_GET'];
export type SchemaArchivoDtoGetInfo = components['schemas']['ArchivoDTO_GET_INFO'];
export type SchemaCategoriaRecursoMaterialDtoGet = components['schemas']['CategoriaRecursoMaterialDTO_GET'];
export type SchemaCategoriaRecursoMaterialDtoGet1 = components['schemas']['CategoriaRecursoMaterialDTO_GET1'];
export type SchemaCategoriaRecursoMaterialDtoPostPut = components['schemas']['CategoriaRecursoMaterialDTO_POST_PUT'];
export type SchemaConfirmacionPlantillaImportacionDtoRequest = components['schemas']['ConfirmacionPlantillaImportacionDtoRequest'];
export type SchemaDayOfWeek = components['schemas']['DayOfWeek'];
export type SchemaDuration = components['schemas']['Duration'];
export type SchemaEmpleadoDtoGet = components['schemas']['EmpleadoDTO_GET'];
export type SchemaEmpleadoDtoPost = components['schemas']['EmpleadoDTO_POST'];
export type SchemaEmpleadoDtoPut = components['schemas']['EmpleadoDtoPut'];
export type SchemaEmpleadoFechasDtoResponse = components['schemas']['EmpleadoFechasDtoResponse'];
export type SchemaEmpleadoIdDto = components['schemas']['EmpleadoIdDto'];
export type SchemaEmpleadoIdFechasDtoRequest = components['schemas']['EmpleadoIdFechasDtoRequest'];
export type SchemaEmpleadoUsuarioDtoPut = components['schemas']['EmpleadoUsuarioDTO_PUT'];
export type SchemaEmpleadosRecursoMaterialDtoRabbit = components['schemas']['EmpleadosRecursoMaterialDtoRabbit'];
export type SchemaEmpresaDtoResponse = components['schemas']['EmpresaDtoResponse'];
export type SchemaEmpresaDtoResponse1 = components['schemas']['EmpresaDtoResponse1'];
export type SchemaEstadoAltaDtoResponse = components['schemas']['EstadoAltaDtoResponse'];
export type SchemaExistenRelacionesDtoResponse = components['schemas']['ExistenRelacionesDtoResponse'];
export type SchemaFormatoEnum = components['schemas']['FormatoEnum'];
export type SchemaHistoricoEmpleadoRecursoMaterialResponse = components['schemas']['HistoricoEmpleadoRecursoMaterialResponse'];
export type SchemaHistoricoFechasDtoResponse = components['schemas']['HistoricoFechasDtoResponse'];
export type SchemaInstant = components['schemas']['Instant'];
export type SchemaLocalDateTime = components['schemas']['LocalDateTime'];
export type SchemaLocalTime = components['schemas']['LocalTime'];
export type SchemaModuloEnum = components['schemas']['ModuloEnum'];
export type SchemaMonth = components['schemas']['Month'];
export type SchemaPriorizarUgUtEnum = components['schemas']['PriorizarUgUtEnum'];
export type SchemaRecursoMaterialDtoGet = components['schemas']['RecursoMaterialDTO_GET'];
export type SchemaRecursoMaterialDtoPk = components['schemas']['RecursoMaterialDTO_PK'];
export type SchemaRecursoMaterialDtoPostPut = components['schemas']['RecursoMaterialDTO_POST_PUT'];
export type SchemaRecursoMaterialDto = components['schemas']['RecursoMaterialDto'];
export type SchemaRecursoMaterialFechasDtoResponse = components['schemas']['RecursoMaterialFechasDtoResponse'];
export type SchemaRecursoMaterialIdFechasDtoRequest = components['schemas']['RecursoMaterialIdFechasDtoRequest'];
export type SchemaRecursosMaterialEmpleadoDtoResponse = components['schemas']['RecursosMaterialEmpleadoDtoResponse'];
export type SchemaRelacionContratacionDtoGet = components['schemas']['RelacionContratacionDTO_GET'];
export type SchemaRelacionContratacionDtoPost = components['schemas']['RelacionContratacionDTO_POST'];
export type SchemaRelacionContratacionEliminarDtoRequest = components['schemas']['RelacionContratacionEliminarDtoRequest'];
export type SchemaRelacionContratacionEmpleadoFechasDtoResponse = components['schemas']['RelacionContratacionEmpleadoFechasDtoResponse'];
export type SchemaRelacionContratacionEmpleadoIdFechasDtoRequest = components['schemas']['RelacionContratacionEmpleadoIdFechasDtoRequest'];
export type SchemaRelacionContratacionFechasDtoResponse = components['schemas']['RelacionContratacionFechasDtoResponse'];
export type SchemaRelacionContratacionIdFechasDtoRequest = components['schemas']['RelacionContratacionIdFechasDtoRequest'];
export type SchemaRelacionContratacionRecursoFechasDtoResponse = components['schemas']['RelacionContratacionRecursoFechasDtoResponse'];
export type SchemaRelacionContratacionRecursoMaterialDtoRabbit = components['schemas']['RelacionContratacionRecursoMaterialDTO_RABBIT'];
export type SchemaRelacionContratacionUsuarioDtoResponse = components['schemas']['RelacionContratacionUsuarioDtoResponse'];
export type SchemaRelacionUsuarioNodoFavoritoDto = components['schemas']['RelacionUsuarioNodoFavoritoDto'];
export type SchemaRelacionesContratacionEmpleadoDtoResponse = components['schemas']['RelacionesContratacionEmpleadoDtoResponse'];
export type SchemaRelacionesContratacionRecursoMaterialDtoRabbit = components['schemas']['RelacionesContratacionRecursoMaterialDtoRabbit'];
export type SchemaRequestBodyDobleListaInteger = components['schemas']['RequestBodyDobleListaInteger'];
export type SchemaRequestBodyDobleListaObjetoUsuarioNodoFavoritoDtoUsuarioNodoFavoritoDto = components['schemas']['RequestBodyDobleListaObjetoUsuarioNodoFavoritoDtoUsuarioNodoFavoritoDto'];
export type SchemaRequestBodyTripleListaObjetoEmpleadoIdFechasDtoRequestEmpleadoIdDto = components['schemas']['RequestBodyTripleListaObjetoEmpleadoIdFechasDtoRequestEmpleadoIdDto'];
export type SchemaRequestBodyTripleListaObjetoRecursoMaterialIdFechasDtoRequestRecursoMaterialDtoPk = components['schemas']['RequestBodyTripleListaObjetoRecursoMaterialIdFechasDtoRequestRecursoMaterialDTO_PK'];
export type SchemaRequestBodyTripleListaObjetoRelacionContratacionEmpleadoIdFechasDtoRequestEmpleadoIdDto = components['schemas']['RequestBodyTripleListaObjetoRelacionContratacionEmpleadoIdFechasDtoRequestEmpleadoIdDto'];
export type SchemaRequestBodyTripleListaObjetoRelacionContratacionIdFechasDtoRequestRelacionContratacionEliminarDtoRequest = components['schemas']['RequestBodyTripleListaObjetoRelacionContratacionIdFechasDtoRequestRelacionContratacionEliminarDtoRequest'];
export type SchemaResultadoImportacionEmpleadosDtoResponse = components['schemas']['ResultadoImportacionEmpleadosDtoResponse'];
export type SchemaResultadoImportacionRecursosMaterialesDtoResponse = components['schemas']['ResultadoImportacionRecursosMaterialesDtoResponse'];
export type SchemaResultadoImportacionUgsUtsDtoResponse = components['schemas']['ResultadoImportacionUgsUtsDtoResponse'];
export type SchemaTimeDefinition = components['schemas']['TimeDefinition'];
export type SchemaTipoEntidadNodoEnum = components['schemas']['TipoEntidadNodoEnum'];
export type SchemaTipoEstructuraDtoActualizacionRequest = components['schemas']['TipoEstructuraDtoActualizacionRequest'];
export type SchemaTipoEstructuraDtoArbolResponse = components['schemas']['TipoEstructuraDtoArbolResponse'];
export type SchemaTipoEstructuraDtoCreacionRequest = components['schemas']['TipoEstructuraDtoCreacionRequest'];
export type SchemaTipoEstructuraDtoListadoResponse = components['schemas']['TipoEstructuraDtoListadoResponse'];
export type SchemaTipoEstructuraDtoResponse = components['schemas']['TipoEstructuraDtoResponse'];
export type SchemaTipoEstructuraModuloDtoRequest = components['schemas']['TipoEstructuraModuloDtoRequest'];
export type SchemaTipoEstructuraModuloDtoResponse = components['schemas']['TipoEstructuraModuloDtoResponse'];
export type SchemaTipoEstructuraTipoDeUsoDtoResponse = components['schemas']['TipoEstructuraTipoDeUsoDtoResponse'];
export type SchemaTipoRecursoMaterialBasicoDto = components['schemas']['TipoRecursoMaterialBasicoDto'];
export type SchemaTipoRecursoMaterialDtoGet = components['schemas']['TipoRecursoMaterialDTO_GET'];
export type SchemaTipoRecursoMaterialDtoPostPut = components['schemas']['TipoRecursoMaterialDTO_POST_PUT'];
export type SchemaTipoUgDtoActualizacionRequest = components['schemas']['TipoUgDtoActualizacionRequest'];
export type SchemaTipoUgDtoArbolEstructuraResponse = components['schemas']['TipoUgDtoArbolEstructuraResponse'];
export type SchemaTipoUgDtoCreacionPrimerNivelRequest = components['schemas']['TipoUgDtoCreacionPrimerNivelRequest'];
export type SchemaTipoUgDtoCreacionRequest = components['schemas']['TipoUgDtoCreacionRequest'];
export type SchemaTipoUgDtoResponse = components['schemas']['TipoUgDtoResponse'];
export type SchemaTipoUgIdInternaDtoResponse = components['schemas']['TipoUgIdInternaDtoResponse'];
export type SchemaTipoUtDtoActualizacionRequest = components['schemas']['TipoUtDtoActualizacionRequest'];
export type SchemaTipoUtDtoArbolEstructuraResponse = components['schemas']['TipoUtDtoArbolEstructuraResponse'];
export type SchemaTipoUtDtoCreacionPrimerNivelRequest = components['schemas']['TipoUtDtoCreacionPrimerNivelRequest'];
export type SchemaTipoUtDtoCreacionRequest = components['schemas']['TipoUtDtoCreacionRequest'];
export type SchemaTipoUtDtoResponse = components['schemas']['TipoUtDtoResponse'];
export type SchemaTipoUtIdInternaDtoResponse = components['schemas']['TipoUtIdInternaDtoResponse'];
export type SchemaUgArbolDtoResponse = components['schemas']['UgArbolDtoResponse'];
export type SchemaUgCreadaDtoResponse = components['schemas']['UgCreadaDtoResponse'];
export type SchemaUgDtoPost = components['schemas']['UgDTO_POST'];
export type SchemaUgDtoPut = components['schemas']['UgDTO_PUT'];
export type SchemaUgDtoResponse = components['schemas']['UgDtoResponse'];
export type SchemaUgHijaDtoResponse = components['schemas']['UgHijaDtoResponse'];
export type SchemaUgTipoEstructuraDtoResponse = components['schemas']['UgTipoEstructuraDtoResponse'];
export type SchemaUgUtDtoGet = components['schemas']['UgUtDTO_GET'];
export type SchemaUnidadTiempoValidezEnum = components['schemas']['UnidadTiempoValidezEnum'];
export type SchemaUsuarioDtoGet = components['schemas']['UsuarioDTO_GET'];
export type SchemaUsuarioDtoEstructura = components['schemas']['UsuarioDtoEstructura'];
export type SchemaUsuarioEmpleadoDtoGet = components['schemas']['UsuarioEmpleadoDTO_GET'];
export type SchemaUsuarioEmpleadoDtoPost = components['schemas']['UsuarioEmpleadoDTO_POST'];
export type SchemaUsuarioNodoFavoritoDto = components['schemas']['UsuarioNodoFavoritoDto'];
export type SchemaUsuarioNodoFavoritoDtoGet = components['schemas']['UsuarioNodoFavoritoDtoGet'];
export type SchemaUsuarioUtDtoResponse = components['schemas']['UsuarioUtDtoResponse'];
export type SchemaUtArbolDtoResponse = components['schemas']['UtArbolDtoResponse'];
export type SchemaUtCreadaDtoResponse = components['schemas']['UtCreadaDtoResponse'];
export type SchemaUtDtoPost = components['schemas']['UtDTO_POST'];
export type SchemaUtDtoPut = components['schemas']['UtDTO_PUT'];
export type SchemaUtDtoResponse = components['schemas']['UtDtoResponse'];
export type SchemaUtHijaDtoResponse = components['schemas']['UtHijaDtoResponse'];
export type SchemaUtTipoEstructuraDtoResponse = components['schemas']['UtTipoEstructuraDtoResponse'];
export type SchemaValidacionPlantillaImportacionDtoRequest = components['schemas']['ValidacionPlantillaImportacionDtoRequest'];
export type SchemaZoneId = components['schemas']['ZoneId'];
export type SchemaZoneOffset = components['schemas']['ZoneOffset'];
export type SchemaZoneOffsetTransition = components['schemas']['ZoneOffsetTransition'];
export type SchemaZoneOffsetTransitionRule = components['schemas']['ZoneOffsetTransitionRule'];
export type SchemaZoneRules = components['schemas']['ZoneRules'];
export type SchemaZonedDateTime = components['schemas']['ZonedDateTime'];
export type $defs = Record<string, never>;
export interface operations {
    getCategoriasRecursosMateriales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCategoriaRecursoMaterial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0023: La categoría recurso material universal solo puede estar asignada a una categoría */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putCategoriaRecursoMaterialPorIdCategoria: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0023: La categoría recurso material universal solo puede estar asignada a una categoría
             *      - EST_0039 : No se puede actualizar la categoria universal si tiene tipos de recursos material relacionados */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCategoriaRecursoMaterialPorIdCategoria: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriaRecursoMaterialDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0036 : No se puede eliminar una categoria de recurso material que se encuentre asignada a algún tipo recurso material */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposRecursosMaterialesPorIdCategoria: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoRecursoMaterialPorIdCategoria: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoRecursoMaterialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0025: El tipo recurso material universal solo puede estar asignado a un tipo recurso material
             *      - EST_0026: No se puede asignar un tipo recurso universal a un tipo recurso material con una categoría que no tiene categoría universal
             *      - EST_0065 : El tipo de recurso material debe de tener identificador 2
             *      - EST_0066 : El tipo de recurso material no debe de tener identificador 2 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoRecursoMaterialPorIdCategoriaPorIdTipoRecursoMaterial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
                idTipoRecursoMaterial: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoRecursoMaterialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0025: El tipo recurso material universal solo puede estar asignado a un tipo recurso material
             *      - EST_0026: No se puede asignar un tipo recurso universal a un tipo recurso material con una categoría que no tiene categoría universal
             *      - EST_0065 : El tipo de recurso material debe de tener identificador 2
             *      - EST_0066 : El tipo de recurso material no debe de tener identificador 2 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTipoRecursoMaterialPorIdCategoriaPorIdTipoRecursoMaterial: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idCategoria: number;
                idTipoRecursoMaterial: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleados: {
        parameters: {
            query?: {
                listaEmpresas?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpresas: {
        parameters: {
            query?: {
                listaIds?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpresaPrincipal: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUgsPorIdEmpresa: {
        parameters: {
            query?: {
                idEmpresaAportante?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgArbolDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUtsPorIdEmpresa: {
        parameters: {
            query?: {
                idEmpresaAportante?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtArbolDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPorIdEmpresa: {
        parameters: {
            query?: {
                idTipoEstructura?: number;
                idTipoUg?: number;
                idUgPadre?: number;
                listaIds?: number[];
                modoArbol?: boolean;
                nivel?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UgDTO_POST"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgCreadaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0052 : No puede crear una UG/UT, cuyo UG/UT padre ya que tiene relaciones con otras entidades
             *      - EST_0071: Solo puede existir una Ug o Ut interna en el sistema.
             *      - EST_0072: El padre del tipo no coincide con el tipo del padre */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putUgPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UgDTO_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0037 : El id de la ug padre debe ser diferente al id de la ug a actualizar */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteUgPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0032 : No se puede eliminar una ug relacionada con un tipoUg interno */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getExistenRelacionesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExistenRelacionesDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHijosPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgHijaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursosMaterialesPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPorIdEmpresaPorIdUg: {
        parameters: {
            query?: {
                modoArbol?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsPorIdEmpresaPorIdUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0034 : No se puede eliminar una relación con una Ut perteneciente a un TipoUt interno
             *      - EST_0073: No se puede realizar acciones con ugs o uts internas si el tipo de estructura no lo permite */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsRelacionadasPorIdEmpresaPorIdUg: {
        parameters: {
            query?: {
                idEmpleado?: number;
                idEmpresaAportante?: number;
                modoArbol?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRelacionesPorIdEmpresaPorIdUgPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUg: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RelacionContratacionDTO_POST"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0014: La UgUt de la relacion padre no coincide con el de la hija
             *      - EST_0015: La empresa aportante de la relación padre no coincide con empresa que solicita de la hija
             *      - EST_0018: No se puede crear una relación contratación para una empresa aportante que ya existe en niveles superiores */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPorIdEmpresa: {
        parameters: {
            query?: {
                idTipoEstructura?: number;
                idTipoUt?: number;
                idUtPadre?: number;
                listaIds?: number[];
                modoArbol?: boolean;
                nivel?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UtDTO_POST"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtCreadaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0052 : No puede crear una UG/UT, cuyo UG/UT padre ya que tiene relaciones con otras entidades
             *      - EST_0071: Solo puede existir una Ug o Ut interna en el sistema.
             *      - EST_0072: El padre del tipo no coincide con el tipo del padre */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putUtPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UtDTO_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0038 : El id de la ut padre debe ser diferente al id de la ut a actualizar */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteUtPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0033 : No se puede eliminar una ut relacionada con un tipoUt interno */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getExistenRelacionesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExistenRelacionesDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHijosPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtHijaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursosMaterialesPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPorIdEmpresaPorIdUt: {
        parameters: {
            query?: {
                modoArbol?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgPorIdEmpresaPorIdUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0034 : No se puede eliminar una relación con una Ut perteneciente a un TipoUt interno
             *      - EST_0073: No se puede realizar acciones con ugs o uts internas si el tipo de estructura no lo permite */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsRelacionadasPorIdEmpresaPorIdUt: {
        parameters: {
            query?: {
                idEmpleado?: number;
                idEmpresaAportante?: number;
                modoArbol?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpresaPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresa: {
        parameters: {
            query?: {
                soloNoAsignados?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadoPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmpleadoDTO_POST"];
            };
        };
        responses: {
            /** @description Creado */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0002: No puede insertar un empleado para esta empresa, al no ser empresa principal
             *      - EST_0003: Ya existe un empleado para estos ID de persona e ID de empresa
             *      - EST_0005: La Fecha hasta debe ser posterior a la fecha desde */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosConUsuarioPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsuarioEmpleadoDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadoPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putEmpleadoPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmpleadoDtoPut"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0005: La Fecha hasta debe ser posterior a la fecha desde
             *      - EST_0050 : El empleado no puede recibir comunicaciones digitales sin un correo electrónico por defecto en su datos de contacto */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteEmpleadoPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0002: No puede insertar un empleado para esta empresa, al no ser empresa principal
             *      - EST_0028 : No se puede eliminar un empleado que se encuentre asociado a otra empresa */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUgsPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: {
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgArbolDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUtsPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: {
                idUg?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtArbolDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoAltaPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idsUg?: number[];
                idsUt?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EstadoAltaDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0101: Alguna %s de la lista enviada no existe
             *      - EST_0102: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - EST_0103: El parámetro idsUgs/idsUts no puede ser nulo si idEmpresaUgUt no lo es, y viceversa */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursosMaterialesPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoEmpleadoRecursoMaterialResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRecursosMaterialesPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoRecursoMaterialIdFechasDtoRequestRecursoMaterialDTO_PK"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursosMaterialEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricosPorIdEmpresaPorIdEmpleadoPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelacionesContratacionPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query: {
                idEmpresaUgUt: number;
                idTipoEstructura?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionEmpleadoFechasDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRelacionesContratacionPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoRelacionContratacionIdFechasDtoRequestRelacionContratacionEliminarDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionesContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0001: No se puede relacionar un empleado cuya empresa sea distinta a la aportante de la relación de contratación */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricosPorIdEmpresaPorIdEmpleadoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUsuarioPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsuarioDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUsuarioPorIdEmpresaPorIdEmpleado: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpleado: number;
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsuarioEmpleadoDTO_POST"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0046 : El usuario ya está asociado a otro empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoAltaPorIdEmpresa: {
        parameters: {
            query?: {
                idsUg?: number[];
                idsUt?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EstadoAltaDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0101: Alguna %s de la lista enviada no existe
             *      - EST_0102: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - EST_0096: Es necesario pasar alguno de los dos listados */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursosMaterialesPorIdEmpresa: {
        parameters: {
            query?: {
                idCategoria?: number;
                soloSinAsignar?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRecursoMaterialPorIdEmpresa: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RecursoMaterialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0005: La Fecha hasta debe ser posterior a la fecha desde
             *      - EST_0006: No se pueden modificar recursos materiales que no pertenezcan a la empresa principal
             *      - EST_0007: Ya existe un recurso material con el mismo identificador, tipo recurso y empresa
             *      - EST_0067 : El recurso material debe de tener identificador 2
             *      - EST_0068 : El recurso material no debe de tener identificador 2 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursoMaterialPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putRecursoMaterialPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RecursoMaterialDTO_POST_PUT"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0005: La Fecha hasta debe ser posterior a la fecha desde
             *      - EST_0006: No se pueden modificar recursos materiales que no pertenezcan a la empresa principal
             *      - EST_0007: Ya existe un recurso material con el mismo identificador, tipo recurso y empresa */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteRecursoMaterialPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0006: No se pueden modificar recursos materiales que no pertenezcan a la empresa principal/n - EST_0029 : No se puede eliminar un recurso material que se encuentre asociado a otra empresa */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUgsPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgArbolDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUtsPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtArbolDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoEmpleadoIdFechasDtoRequestEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadosRecursoMaterialDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0070 : La empresa del recurso material tiene que coincidir con la del empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEstadoAltaPorIdEmpresaPorIdRecurso: {
        parameters: {
            query: {
                idEmpresaUgUt: number;
                idsUg?: number[];
                idsUt?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EstadoAltaDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0103: El parámetro idsUgs/idsUts no puede ser nulo si idEmpresaUgUt no lo es, y viceversa
             *      - EST_0102: El usuario no tiene acceso a las %s %s de la empresa %s
             *      - EST_0101: Alguna %s de la lista enviada no existe */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelacionContratacionPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: {
                idEmpresaUgUt?: number;
                idTipoEstructura?: number;
                idUg?: number;
                idUt?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionRecursoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRelacionContratacionPorIdEmpresaPorIdRecurso: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoRelacionContratacionIdFechasDtoRequestRelacionContratacionEliminarDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionesContratacionRecursoMaterialDtoRabbit"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0069 : El idEmpresa recurso material no es el mismo id que la empresa aportante de relacion contratacion */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFechasHistoricosPorIdEmpresaPorIdRecursoPorIdRelacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEmpresa: number;
                idRecurso: number;
                idRelacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putEntidadPorIdTipoEntidadPorIdEntidad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEntidad: number;
                idTipoEntidad: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    fileName?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0062 : El tipo entidad introducido no es logotipo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEntidadPorIdTipoEntidadPorIdEntidad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEntidad: number;
                idTipoEntidad: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    fileName?: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0062 : El tipo entidad introducido no es logotipo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteEntidadPorIdTipoEntidadPorIdEntidad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEntidad: number;
                idTipoEntidad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0062 : El tipo entidad introducido no es logotipo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInformacionPorIdTipoEntidadPorIdEntidad: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idEntidad: number;
                idTipoEntidad: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchivoDTO_GET_INFO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0062 : El tipo entidad introducido no es logotipo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getImagenPorUuid: {
        parameters: {
            query?: {
                alto?: number;
                ancho?: number;
                modoMiniaturizacion?: components["schemas"]["FormatoEnum"];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postConfirmacionImportacionEmpleados: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfirmacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionEmpleadosDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPlantillaImportacionEmpleados: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postValidacionImportacionEmpleados: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionEmpleadosDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postConfirmacionImportacionRecursosMateriales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfirmacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionRecursosMaterialesDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPlantillaImportacionRecursosMateriales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postValidacionImportacionRecursosMateriales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionRecursosMaterialesDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postConfirmacionImportacionUgs: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfirmacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionUgsUtsDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPlantillaImportacionUgs: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postValidacionImportacionUgs: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionUgsUtsDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postConfirmacionImportacionUts: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfirmacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionUgsUtsDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPlantillaImportacionUts: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postValidacionImportacionUts: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidacionPlantillaImportacionDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultadoImportacionUgsUtsDtoResponse"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    obtenerTipoEstructuraPorModulo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idModulo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraModuloDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoEstructuraPorIdModulo: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idModulo: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoEstructuraModuloDtoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraModuloDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursosMateriales: {
        parameters: {
            query?: {
                listaEmpresas?: number[];
                listaIds?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelacionesContratacion: {
        parameters: {
            query?: {
                idEmpresa?: number;
                idEmpresaAportante?: number;
                idEmpresaSolicitante?: number;
                idRelacionPadre?: number;
                idTipoEstructura?: number;
                idUg?: number;
                idUt?: number;
                modoArbol?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionDTO_GET"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdRelacionContratacion: {
        parameters: {
            query?: {
                idEmpresa?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idRelacionContratacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionEmpleadoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEmpleadosPorIdRelacionContratacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idRelacionContratacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoRelacionContratacionEmpleadoIdFechasDtoRequestEmpleadoIdDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionesContratacionEmpleadoDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0001: No se puede relacionar un empleado cuya empresa sea distinta a la aportante de la relación de contratación */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursosMaterialesPorIdRelacionContratacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idRelacionContratacion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionRecursoFechasDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRecursosMaterialesPorIdRelacionContratacion: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idRelacionContratacion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyTripleListaObjetoRecursoMaterialIdFechasDtoRequestRecursoMaterialDTO_PK"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionRecursoMaterialDTO_RABBIT"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposEstructuras: {
        parameters: {
            query?: {
                nombre?: string;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraDtoListadoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoEstructuraDtoCreacionRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolTiposEstructuras: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraDtoArbolResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposUsos: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraTipoDeUsoDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoEstructuraPorIdTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEstructura: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoEstructuraPorIdTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEstructura: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoEstructuraDtoActualizacionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTipoEstructuraPorIdTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEstructura: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoEstructuraDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0059: No se puede eliminar un tipoEstructura que tenga tipos de ug/ut asignadas - EST_0087: No se puede eliminar el tipo de estructura ya que está siendo usada por algún módulo */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUgsPorIdTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEstructura: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgArbolDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0083: El tipo de estructura no usa ugs */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArbolUtsPorIdTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEstructura: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtArbolDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0082: El tipo de estructura no usa uts */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgInternaPorIdTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEstructura: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgTipoEstructuraDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtInternaPorIdTipoEstructura: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoEstructura: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtTipoEstructuraDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposRecursosMateriales: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoRecursoMaterialBasicoDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposUg: {
        parameters: {
            query?: {
                idTipoEstructura?: number;
                idTipoUgPadre?: number;
                listaIds?: number[];
                modoArbol?: boolean;
                nivel?: number;
                nombrePlural?: string;
                nombreSingular?: string;
                obtenerInterna?: boolean;
                soloHijosDirectos?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUgDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoUgDtoCreacionRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUgDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0053 : No se puede crear el TipoUg porque ya existe uno con {nombreSingular: %s} o con {nombrePlural: %s} */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoUgPorIdTipoUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUgDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoUgPorIdTipoUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUg: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoUgDtoActualizacionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUgDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTipoUgPorIdTipoUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUgDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0019: No se puede eliminar un tipoUg que tenga ugs asignadas
             *      - EST_0020: No se puede eliminar un tipoUg que tenga hijos
             *      - EST_0031 : No se puede eliminar un tipoUg interno */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUsadoPorIdTipoUg: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUg: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTiposUts: {
        parameters: {
            query?: {
                idTipoEstructura?: number;
                idTipoUtPadre?: number;
                listaIds?: number[];
                modoArbol?: boolean;
                nivel?: number;
                nombrePlural?: string;
                nombreSingular?: string;
                obtenerInterna?: boolean;
                soloHijosDirectos?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTipoUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoUtDtoCreacionRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUtDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0054 : No se puede crear el TipoUt porque ya existe uno con {nombreSingular: %s} o con {nombrePlural: %s} */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTipoUtPorIdTipoUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUtDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTipoUtPorIdTipoUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUt: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TipoUtDtoActualizacionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUtDtoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTipoUtPorIdTipoUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TipoUtDtoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0021: No se puede eliminar un tipoUt que tenga uts asignadas
             *      - EST_0022: No se puede eliminar un tipoUt que tenga hijos
             *      - EST_0030 : No se puede eliminar un tipoUt interno */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUsadoPorIdTipoUt: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idTipoUt: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsUts: {
        parameters: {
            query?: {
                idTipoEstructura?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgUtDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUsuariosUgs: {
        parameters: {
            query?: {
                idTipoEstructura?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsuarioUtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUsuariosUts: {
        parameters: {
            query?: {
                idTipoEstructura?: number;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsuarioUtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadoPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoDTO_GET"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putEmpleadoPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmpleadoUsuarioDTO_PUT"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsuarioDTO_GET"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0046 : El usuario ya está asociado a otro empleado */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpleadosPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpleadoIdDto"][];
                };
            };
            /** @description Not Authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmpresasPorIdUsuario: {
        parameters: {
            query?: {
                idEmpresa?: number[];
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmpresaDtoResponse1"][];
                };
            };
            /** @description Not Authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFavoritosPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsuarioNodoFavoritoDtoGet"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFavoritosPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaObjetoUsuarioNodoFavoritoDtoUsuarioNodoFavoritoDto"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionUsuarioNodoFavoritoDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecursosMaterialesPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursoMaterialDTO_PK"][];
                };
            };
            /** @description Not Authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelacinesContratacionPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelacionContratacionUsuarioDtoResponse"][];
                };
            };
            /** @description Not Authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUgsPorIdUsuario: {
        parameters: {
            query?: {
                incluirPadres?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UgDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUgsPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0044 : No se pueden relacionar varias veces una misma UG y un mismo usuario
             *      - EST_0045 : No se puede eliminar la relación entre una UG y un usuario que no estén relacionados */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUtsPorIdUsuarios: {
        parameters: {
            query?: {
                incluirPadres?: boolean;
            };
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UtDtoResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postUtsPorIdUsuario: {
        parameters: {
            query?: never;
            header: {
                /** @description Zona horaria desde la que se hace la petición */
                "X-Timezone": string;
            };
            path: {
                idUsuario: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RequestBodyDobleListaInteger"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description - EST_0041 : No se pueden relacionar varias veces una misma UT y un mismo usuario
             *      - EST_0042 : No se puede eliminar la relación entre una UT y un usuario que no estén relacionados */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum DayOfWeek {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY"
}
export enum FormatoEnum {
    CROP_CENTRADO = "CROP_CENTRADO",
    REESCALADO = "REESCALADO",
    REESCALADO_ALTO = "REESCALADO_ALTO",
    REESCALADO_ANCHO = "REESCALADO_ANCHO"
}
export enum ModuloEnum {
    ESTRUCTURA = "ESTRUCTURA",
    CAE = "CAE",
    CA = "CA",
    FORMULARIOS = "FORMULARIOS",
    METAMARKET = "METAMARKET",
    MQL = "MQL",
    TAREAS = "TAREAS",
    PROVEEDORES = "PROVEEDORES"
}
export enum Month {
    JANUARY = "JANUARY",
    FEBRUARY = "FEBRUARY",
    MARCH = "MARCH",
    APRIL = "APRIL",
    MAY = "MAY",
    JUNE = "JUNE",
    JULY = "JULY",
    AUGUST = "AUGUST",
    SEPTEMBER = "SEPTEMBER",
    OCTOBER = "OCTOBER",
    NOVEMBER = "NOVEMBER",
    DECEMBER = "DECEMBER"
}
export enum PriorizarUgUtEnum {
    UG = "UG",
    UT = "UT"
}
export enum TimeDefinition {
    UTC = "UTC",
    WALL = "WALL",
    STANDARD = "STANDARD"
}
export enum TipoEntidadNodoEnum {
    TIPO_UG = "TIPO_UG",
    TIPO_UT = "TIPO_UT",
    UG = "UG",
    UT = "UT"
}
export enum UnidadTiempoValidezEnum {
    ANOS = "ANOS",
    MESES = "MESES",
    DIAS = "DIAS"
}
